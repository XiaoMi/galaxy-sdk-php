<?php
namespace EMQ\Message;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface MessageServiceIf extends \EMQ\Common\EMQBaseServiceIf {
  /**
   * Send message;
   * 
   * 
   * @param \EMQ\Message\SendMessageRequest $sendMessageRequest
   * @return \EMQ\Message\SendMessageResponse
   * @throws \EMQ\Common\GalaxyEmqServiceException
   */
  public function sendMessage(\EMQ\Message\SendMessageRequest $sendMessageRequest);
  /**
   * Send message batch;
   * 
   * 
   * @param \EMQ\Message\SendMessageBatchRequest $sendMessageBatchRequest
   * @return \EMQ\Message\SendMessageBatchResponse
   * @throws \EMQ\Common\GalaxyEmqServiceException
   */
  public function sendMessageBatch(\EMQ\Message\SendMessageBatchRequest $sendMessageBatchRequest);
  /**
   * Receive message;
   * 
   * 
   * @param \EMQ\Message\ReceiveMessageRequest $receiveMessageRequest
   * @return \EMQ\Message\ReceiveMessageResponse[]
   * @throws \EMQ\Common\GalaxyEmqServiceException
   */
  public function receiveMessage(\EMQ\Message\ReceiveMessageRequest $receiveMessageRequest);
  /**
   * Change message invisibility seconds;
   * 
   * 
   * @param \EMQ\Message\ChangeMessageVisibilityRequest $changeMessageVisibilityRequest
   * @throws \EMQ\Common\GalaxyEmqServiceException
   */
  public function changeMessageVisibilitySeconds(\EMQ\Message\ChangeMessageVisibilityRequest $changeMessageVisibilityRequest);
  /**
   * Change message invisibility seconds batch;
   * 
   * 
   * @param \EMQ\Message\ChangeMessageVisibilityBatchRequest $changeMessageVisibilityBatchRequest
   * @return \EMQ\Message\ChangeMessageVisibilityBatchResponse
   * @throws \EMQ\Common\GalaxyEmqServiceException
   */
  public function changeMessageVisibilitySecondsBatch(\EMQ\Message\ChangeMessageVisibilityBatchRequest $changeMessageVisibilityBatchRequest);
  /**
   * Delete message;
   * 
   * 
   * @param \EMQ\Message\DeleteMessageRequest $deleteMessageRequest
   * @throws \EMQ\Common\GalaxyEmqServiceException
   */
  public function deleteMessage(\EMQ\Message\DeleteMessageRequest $deleteMessageRequest);
  /**
   * Delete message batch;
   * 
   * 
   * @param \EMQ\Message\DeleteMessageBatchRequest $deleteMessageBatchRequest
   * @return \EMQ\Message\DeleteMessageBatchResponse
   * @throws \EMQ\Common\GalaxyEmqServiceException
   */
  public function deleteMessageBatch(\EMQ\Message\DeleteMessageBatchRequest $deleteMessageBatchRequest);
  /**
   * Dead message;
   * 
   * 
   * @param \EMQ\Message\DeadMessageRequest $deadMessageRequest
   * @throws \EMQ\Common\GalaxyEmqServiceException
   */
  public function deadMessage(\EMQ\Message\DeadMessageRequest $deadMessageRequest);
  /**
   * Dead message batch;
   * 
   * 
   * @param \EMQ\Message\DeadMessageBatchRequest $deadMessageBatchRequest
   * @return \EMQ\Message\DeadMessageBatchResponse
   * @throws \EMQ\Common\GalaxyEmqServiceException
   */
  public function deadMessageBatch(\EMQ\Message\DeadMessageBatchRequest $deadMessageBatchRequest);
}

class MessageServiceClient extends \EMQ\Common\EMQBaseServiceClient implements \EMQ\Message\MessageServiceIf {
  public function __construct($input, $output=null) {
    parent::__construct($input, $output);
  }

  public function sendMessage(\EMQ\Message\SendMessageRequest $sendMessageRequest)
  {
    $this->send_sendMessage($sendMessageRequest);
    return $this->recv_sendMessage();
  }

  public function send_sendMessage(\EMQ\Message\SendMessageRequest $sendMessageRequest)
  {
    $args = new \EMQ\Message\MessageService_sendMessage_args();
    $args->sendMessageRequest = $sendMessageRequest;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sendMessage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sendMessage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sendMessage()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EMQ\Message\MessageService_sendMessage_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EMQ\Message\MessageService_sendMessage_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("sendMessage failed: unknown result");
  }

  public function sendMessageBatch(\EMQ\Message\SendMessageBatchRequest $sendMessageBatchRequest)
  {
    $this->send_sendMessageBatch($sendMessageBatchRequest);
    return $this->recv_sendMessageBatch();
  }

  public function send_sendMessageBatch(\EMQ\Message\SendMessageBatchRequest $sendMessageBatchRequest)
  {
    $args = new \EMQ\Message\MessageService_sendMessageBatch_args();
    $args->sendMessageBatchRequest = $sendMessageBatchRequest;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sendMessageBatch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sendMessageBatch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sendMessageBatch()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EMQ\Message\MessageService_sendMessageBatch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EMQ\Message\MessageService_sendMessageBatch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("sendMessageBatch failed: unknown result");
  }

  public function receiveMessage(\EMQ\Message\ReceiveMessageRequest $receiveMessageRequest)
  {
    $this->send_receiveMessage($receiveMessageRequest);
    return $this->recv_receiveMessage();
  }

  public function send_receiveMessage(\EMQ\Message\ReceiveMessageRequest $receiveMessageRequest)
  {
    $args = new \EMQ\Message\MessageService_receiveMessage_args();
    $args->receiveMessageRequest = $receiveMessageRequest;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'receiveMessage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('receiveMessage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_receiveMessage()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EMQ\Message\MessageService_receiveMessage_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EMQ\Message\MessageService_receiveMessage_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("receiveMessage failed: unknown result");
  }

  public function changeMessageVisibilitySeconds(\EMQ\Message\ChangeMessageVisibilityRequest $changeMessageVisibilityRequest)
  {
    $this->send_changeMessageVisibilitySeconds($changeMessageVisibilityRequest);
    $this->recv_changeMessageVisibilitySeconds();
  }

  public function send_changeMessageVisibilitySeconds(\EMQ\Message\ChangeMessageVisibilityRequest $changeMessageVisibilityRequest)
  {
    $args = new \EMQ\Message\MessageService_changeMessageVisibilitySeconds_args();
    $args->changeMessageVisibilityRequest = $changeMessageVisibilityRequest;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'changeMessageVisibilitySeconds', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('changeMessageVisibilitySeconds', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_changeMessageVisibilitySeconds()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EMQ\Message\MessageService_changeMessageVisibilitySeconds_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EMQ\Message\MessageService_changeMessageVisibilitySeconds_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function changeMessageVisibilitySecondsBatch(\EMQ\Message\ChangeMessageVisibilityBatchRequest $changeMessageVisibilityBatchRequest)
  {
    $this->send_changeMessageVisibilitySecondsBatch($changeMessageVisibilityBatchRequest);
    return $this->recv_changeMessageVisibilitySecondsBatch();
  }

  public function send_changeMessageVisibilitySecondsBatch(\EMQ\Message\ChangeMessageVisibilityBatchRequest $changeMessageVisibilityBatchRequest)
  {
    $args = new \EMQ\Message\MessageService_changeMessageVisibilitySecondsBatch_args();
    $args->changeMessageVisibilityBatchRequest = $changeMessageVisibilityBatchRequest;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'changeMessageVisibilitySecondsBatch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('changeMessageVisibilitySecondsBatch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_changeMessageVisibilitySecondsBatch()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EMQ\Message\MessageService_changeMessageVisibilitySecondsBatch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EMQ\Message\MessageService_changeMessageVisibilitySecondsBatch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("changeMessageVisibilitySecondsBatch failed: unknown result");
  }

  public function deleteMessage(\EMQ\Message\DeleteMessageRequest $deleteMessageRequest)
  {
    $this->send_deleteMessage($deleteMessageRequest);
    $this->recv_deleteMessage();
  }

  public function send_deleteMessage(\EMQ\Message\DeleteMessageRequest $deleteMessageRequest)
  {
    $args = new \EMQ\Message\MessageService_deleteMessage_args();
    $args->deleteMessageRequest = $deleteMessageRequest;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteMessage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteMessage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteMessage()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EMQ\Message\MessageService_deleteMessage_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EMQ\Message\MessageService_deleteMessage_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function deleteMessageBatch(\EMQ\Message\DeleteMessageBatchRequest $deleteMessageBatchRequest)
  {
    $this->send_deleteMessageBatch($deleteMessageBatchRequest);
    return $this->recv_deleteMessageBatch();
  }

  public function send_deleteMessageBatch(\EMQ\Message\DeleteMessageBatchRequest $deleteMessageBatchRequest)
  {
    $args = new \EMQ\Message\MessageService_deleteMessageBatch_args();
    $args->deleteMessageBatchRequest = $deleteMessageBatchRequest;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteMessageBatch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteMessageBatch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteMessageBatch()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EMQ\Message\MessageService_deleteMessageBatch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EMQ\Message\MessageService_deleteMessageBatch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("deleteMessageBatch failed: unknown result");
  }

  public function deadMessage(\EMQ\Message\DeadMessageRequest $deadMessageRequest)
  {
    $this->send_deadMessage($deadMessageRequest);
    $this->recv_deadMessage();
  }

  public function send_deadMessage(\EMQ\Message\DeadMessageRequest $deadMessageRequest)
  {
    $args = new \EMQ\Message\MessageService_deadMessage_args();
    $args->deadMessageRequest = $deadMessageRequest;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deadMessage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deadMessage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deadMessage()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EMQ\Message\MessageService_deadMessage_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EMQ\Message\MessageService_deadMessage_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function deadMessageBatch(\EMQ\Message\DeadMessageBatchRequest $deadMessageBatchRequest)
  {
    $this->send_deadMessageBatch($deadMessageBatchRequest);
    return $this->recv_deadMessageBatch();
  }

  public function send_deadMessageBatch(\EMQ\Message\DeadMessageBatchRequest $deadMessageBatchRequest)
  {
    $args = new \EMQ\Message\MessageService_deadMessageBatch_args();
    $args->deadMessageBatchRequest = $deadMessageBatchRequest;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deadMessageBatch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deadMessageBatch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deadMessageBatch()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EMQ\Message\MessageService_deadMessageBatch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EMQ\Message\MessageService_deadMessageBatch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("deadMessageBatch failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class MessageService_sendMessage_args {
  static $_TSPEC;

  /**
   * @var \EMQ\Message\SendMessageRequest
   */
  public $sendMessageRequest = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sendMessageRequest',
          'type' => TType::STRUCT,
          'class' => '\EMQ\Message\SendMessageRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sendMessageRequest'])) {
        $this->sendMessageRequest = $vals['sendMessageRequest'];
      }
    }
  }

  public function getName() {
    return 'MessageService_sendMessage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sendMessageRequest = new \EMQ\Message\SendMessageRequest();
            $xfer += $this->sendMessageRequest->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageService_sendMessage_args');
    if ($this->sendMessageRequest !== null) {
      if (!is_object($this->sendMessageRequest)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('sendMessageRequest', TType::STRUCT, 1);
      $xfer += $this->sendMessageRequest->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessageService_sendMessage_result {
  static $_TSPEC;

  /**
   * @var \EMQ\Message\SendMessageResponse
   */
  public $success = null;
  /**
   * @var \EMQ\Common\GalaxyEmqServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EMQ\Message\SendMessageResponse',
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\EMQ\Common\GalaxyEmqServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'MessageService_sendMessage_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \EMQ\Message\SendMessageResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \EMQ\Common\GalaxyEmqServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageService_sendMessage_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessageService_sendMessageBatch_args {
  static $_TSPEC;

  /**
   * @var \EMQ\Message\SendMessageBatchRequest
   */
  public $sendMessageBatchRequest = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sendMessageBatchRequest',
          'type' => TType::STRUCT,
          'class' => '\EMQ\Message\SendMessageBatchRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sendMessageBatchRequest'])) {
        $this->sendMessageBatchRequest = $vals['sendMessageBatchRequest'];
      }
    }
  }

  public function getName() {
    return 'MessageService_sendMessageBatch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sendMessageBatchRequest = new \EMQ\Message\SendMessageBatchRequest();
            $xfer += $this->sendMessageBatchRequest->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageService_sendMessageBatch_args');
    if ($this->sendMessageBatchRequest !== null) {
      if (!is_object($this->sendMessageBatchRequest)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('sendMessageBatchRequest', TType::STRUCT, 1);
      $xfer += $this->sendMessageBatchRequest->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessageService_sendMessageBatch_result {
  static $_TSPEC;

  /**
   * @var \EMQ\Message\SendMessageBatchResponse
   */
  public $success = null;
  /**
   * @var \EMQ\Common\GalaxyEmqServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EMQ\Message\SendMessageBatchResponse',
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\EMQ\Common\GalaxyEmqServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'MessageService_sendMessageBatch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \EMQ\Message\SendMessageBatchResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \EMQ\Common\GalaxyEmqServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageService_sendMessageBatch_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessageService_receiveMessage_args {
  static $_TSPEC;

  /**
   * @var \EMQ\Message\ReceiveMessageRequest
   */
  public $receiveMessageRequest = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'receiveMessageRequest',
          'type' => TType::STRUCT,
          'class' => '\EMQ\Message\ReceiveMessageRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['receiveMessageRequest'])) {
        $this->receiveMessageRequest = $vals['receiveMessageRequest'];
      }
    }
  }

  public function getName() {
    return 'MessageService_receiveMessage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->receiveMessageRequest = new \EMQ\Message\ReceiveMessageRequest();
            $xfer += $this->receiveMessageRequest->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageService_receiveMessage_args');
    if ($this->receiveMessageRequest !== null) {
      if (!is_object($this->receiveMessageRequest)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('receiveMessageRequest', TType::STRUCT, 1);
      $xfer += $this->receiveMessageRequest->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessageService_receiveMessage_result {
  static $_TSPEC;

  /**
   * @var \EMQ\Message\ReceiveMessageResponse[]
   */
  public $success = null;
  /**
   * @var \EMQ\Common\GalaxyEmqServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EMQ\Message\ReceiveMessageResponse',
            ),
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\EMQ\Common\GalaxyEmqServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'MessageService_receiveMessage_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size120 = 0;
            $_etype123 = 0;
            $xfer += $input->readListBegin($_etype123, $_size120);
            for ($_i124 = 0; $_i124 < $_size120; ++$_i124)
            {
              $elem125 = null;
              $elem125 = new \EMQ\Message\ReceiveMessageResponse();
              $xfer += $elem125->read($input);
              $this->success []= $elem125;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \EMQ\Common\GalaxyEmqServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageService_receiveMessage_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter126)
          {
            $xfer += $iter126->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessageService_changeMessageVisibilitySeconds_args {
  static $_TSPEC;

  /**
   * @var \EMQ\Message\ChangeMessageVisibilityRequest
   */
  public $changeMessageVisibilityRequest = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'changeMessageVisibilityRequest',
          'type' => TType::STRUCT,
          'class' => '\EMQ\Message\ChangeMessageVisibilityRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['changeMessageVisibilityRequest'])) {
        $this->changeMessageVisibilityRequest = $vals['changeMessageVisibilityRequest'];
      }
    }
  }

  public function getName() {
    return 'MessageService_changeMessageVisibilitySeconds_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->changeMessageVisibilityRequest = new \EMQ\Message\ChangeMessageVisibilityRequest();
            $xfer += $this->changeMessageVisibilityRequest->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageService_changeMessageVisibilitySeconds_args');
    if ($this->changeMessageVisibilityRequest !== null) {
      if (!is_object($this->changeMessageVisibilityRequest)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('changeMessageVisibilityRequest', TType::STRUCT, 1);
      $xfer += $this->changeMessageVisibilityRequest->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessageService_changeMessageVisibilitySeconds_result {
  static $_TSPEC;

  /**
   * @var \EMQ\Common\GalaxyEmqServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\EMQ\Common\GalaxyEmqServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'MessageService_changeMessageVisibilitySeconds_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \EMQ\Common\GalaxyEmqServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageService_changeMessageVisibilitySeconds_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessageService_changeMessageVisibilitySecondsBatch_args {
  static $_TSPEC;

  /**
   * @var \EMQ\Message\ChangeMessageVisibilityBatchRequest
   */
  public $changeMessageVisibilityBatchRequest = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'changeMessageVisibilityBatchRequest',
          'type' => TType::STRUCT,
          'class' => '\EMQ\Message\ChangeMessageVisibilityBatchRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['changeMessageVisibilityBatchRequest'])) {
        $this->changeMessageVisibilityBatchRequest = $vals['changeMessageVisibilityBatchRequest'];
      }
    }
  }

  public function getName() {
    return 'MessageService_changeMessageVisibilitySecondsBatch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->changeMessageVisibilityBatchRequest = new \EMQ\Message\ChangeMessageVisibilityBatchRequest();
            $xfer += $this->changeMessageVisibilityBatchRequest->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageService_changeMessageVisibilitySecondsBatch_args');
    if ($this->changeMessageVisibilityBatchRequest !== null) {
      if (!is_object($this->changeMessageVisibilityBatchRequest)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('changeMessageVisibilityBatchRequest', TType::STRUCT, 1);
      $xfer += $this->changeMessageVisibilityBatchRequest->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessageService_changeMessageVisibilitySecondsBatch_result {
  static $_TSPEC;

  /**
   * @var \EMQ\Message\ChangeMessageVisibilityBatchResponse
   */
  public $success = null;
  /**
   * @var \EMQ\Common\GalaxyEmqServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EMQ\Message\ChangeMessageVisibilityBatchResponse',
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\EMQ\Common\GalaxyEmqServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'MessageService_changeMessageVisibilitySecondsBatch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \EMQ\Message\ChangeMessageVisibilityBatchResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \EMQ\Common\GalaxyEmqServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageService_changeMessageVisibilitySecondsBatch_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessageService_deleteMessage_args {
  static $_TSPEC;

  /**
   * @var \EMQ\Message\DeleteMessageRequest
   */
  public $deleteMessageRequest = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'deleteMessageRequest',
          'type' => TType::STRUCT,
          'class' => '\EMQ\Message\DeleteMessageRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['deleteMessageRequest'])) {
        $this->deleteMessageRequest = $vals['deleteMessageRequest'];
      }
    }
  }

  public function getName() {
    return 'MessageService_deleteMessage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->deleteMessageRequest = new \EMQ\Message\DeleteMessageRequest();
            $xfer += $this->deleteMessageRequest->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageService_deleteMessage_args');
    if ($this->deleteMessageRequest !== null) {
      if (!is_object($this->deleteMessageRequest)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('deleteMessageRequest', TType::STRUCT, 1);
      $xfer += $this->deleteMessageRequest->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessageService_deleteMessage_result {
  static $_TSPEC;

  /**
   * @var \EMQ\Common\GalaxyEmqServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\EMQ\Common\GalaxyEmqServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'MessageService_deleteMessage_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \EMQ\Common\GalaxyEmqServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageService_deleteMessage_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessageService_deleteMessageBatch_args {
  static $_TSPEC;

  /**
   * @var \EMQ\Message\DeleteMessageBatchRequest
   */
  public $deleteMessageBatchRequest = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'deleteMessageBatchRequest',
          'type' => TType::STRUCT,
          'class' => '\EMQ\Message\DeleteMessageBatchRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['deleteMessageBatchRequest'])) {
        $this->deleteMessageBatchRequest = $vals['deleteMessageBatchRequest'];
      }
    }
  }

  public function getName() {
    return 'MessageService_deleteMessageBatch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->deleteMessageBatchRequest = new \EMQ\Message\DeleteMessageBatchRequest();
            $xfer += $this->deleteMessageBatchRequest->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageService_deleteMessageBatch_args');
    if ($this->deleteMessageBatchRequest !== null) {
      if (!is_object($this->deleteMessageBatchRequest)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('deleteMessageBatchRequest', TType::STRUCT, 1);
      $xfer += $this->deleteMessageBatchRequest->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessageService_deleteMessageBatch_result {
  static $_TSPEC;

  /**
   * @var \EMQ\Message\DeleteMessageBatchResponse
   */
  public $success = null;
  /**
   * @var \EMQ\Common\GalaxyEmqServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EMQ\Message\DeleteMessageBatchResponse',
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\EMQ\Common\GalaxyEmqServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'MessageService_deleteMessageBatch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \EMQ\Message\DeleteMessageBatchResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \EMQ\Common\GalaxyEmqServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageService_deleteMessageBatch_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessageService_deadMessage_args {
  static $_TSPEC;

  /**
   * @var \EMQ\Message\DeadMessageRequest
   */
  public $deadMessageRequest = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'deadMessageRequest',
          'type' => TType::STRUCT,
          'class' => '\EMQ\Message\DeadMessageRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['deadMessageRequest'])) {
        $this->deadMessageRequest = $vals['deadMessageRequest'];
      }
    }
  }

  public function getName() {
    return 'MessageService_deadMessage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->deadMessageRequest = new \EMQ\Message\DeadMessageRequest();
            $xfer += $this->deadMessageRequest->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageService_deadMessage_args');
    if ($this->deadMessageRequest !== null) {
      if (!is_object($this->deadMessageRequest)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('deadMessageRequest', TType::STRUCT, 1);
      $xfer += $this->deadMessageRequest->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessageService_deadMessage_result {
  static $_TSPEC;

  /**
   * @var \EMQ\Common\GalaxyEmqServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\EMQ\Common\GalaxyEmqServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'MessageService_deadMessage_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \EMQ\Common\GalaxyEmqServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageService_deadMessage_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessageService_deadMessageBatch_args {
  static $_TSPEC;

  /**
   * @var \EMQ\Message\DeadMessageBatchRequest
   */
  public $deadMessageBatchRequest = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'deadMessageBatchRequest',
          'type' => TType::STRUCT,
          'class' => '\EMQ\Message\DeadMessageBatchRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['deadMessageBatchRequest'])) {
        $this->deadMessageBatchRequest = $vals['deadMessageBatchRequest'];
      }
    }
  }

  public function getName() {
    return 'MessageService_deadMessageBatch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->deadMessageBatchRequest = new \EMQ\Message\DeadMessageBatchRequest();
            $xfer += $this->deadMessageBatchRequest->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageService_deadMessageBatch_args');
    if ($this->deadMessageBatchRequest !== null) {
      if (!is_object($this->deadMessageBatchRequest)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('deadMessageBatchRequest', TType::STRUCT, 1);
      $xfer += $this->deadMessageBatchRequest->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessageService_deadMessageBatch_result {
  static $_TSPEC;

  /**
   * @var \EMQ\Message\DeadMessageBatchResponse
   */
  public $success = null;
  /**
   * @var \EMQ\Common\GalaxyEmqServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EMQ\Message\DeadMessageBatchResponse',
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\EMQ\Common\GalaxyEmqServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'MessageService_deadMessageBatch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \EMQ\Message\DeadMessageBatchResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \EMQ\Common\GalaxyEmqServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageService_deadMessageBatch_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


