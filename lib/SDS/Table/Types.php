<?php
namespace SDS\Table;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * 数据类型
 */
final class DataType {
  /**
   * 布尔类型
   */
  const BOOL = 1;
  /**
   * 1字节整形
   */
  const INT8 = 2;
  /**
   * 2字节整形
   */
  const INT16 = 3;
  /**
   * 4字节整形
   */
  const INT32 = 4;
  /**
   * 8字节整形
   */
  const INT64 = 5;
  /**
   * 单精度浮点类型
   */
  const FLOAT = 6;
  /**
   * 双精度浮点类型
   */
  const DOUBLE = 7;
  /**
   * 字符串类型
   */
  const STRING = 8;
  /**
   * 编码二进制类型，可用做索引属性
   */
  const BINARY = 9;
  /**
   * 原生二进制类型，存储序列化开销最小，不能包含'0x00'数据，不可用做索引
   */
  const RAWBINARY = 10;
  /**
   * 布尔类型集合
   */
  const BOOL_SET = 100;
  /**
   * 1字节整形集合
   */
  const INT8_SET = 101;
  /**
   * 2字节整形集合
   */
  const INT16_SET = 102;
  /**
   * 4字节整形集合
   */
  const INT32_SET = 103;
  /**
   * 8字节整形集合
   */
  const INT64_SET = 104;
  /**
   * 单精度浮点集合
   */
  const FLOAT_SET = 105;
  /**
   * 双精度浮点集合
   */
  const DOUBLE_SET = 106;
  /**
   * 字符串集合
   */
  const STRING_SET = 107;
  /**
   * 编码二进制集合
   */
  const BINARY_SET = 108;
  static public $__names = array(
    1 => 'BOOL',
    2 => 'INT8',
    3 => 'INT16',
    4 => 'INT32',
    5 => 'INT64',
    6 => 'FLOAT',
    7 => 'DOUBLE',
    8 => 'STRING',
    9 => 'BINARY',
    10 => 'RAWBINARY',
    100 => 'BOOL_SET',
    101 => 'INT8_SET',
    102 => 'INT16_SET',
    103 => 'INT32_SET',
    104 => 'INT64_SET',
    105 => 'FLOAT_SET',
    106 => 'DOUBLE_SET',
    107 => 'STRING_SET',
    108 => 'BINARY_SET',
  );
}

/**
 * 操作符类型
 */
final class OperatorType {
  /**
   * 等于
   */
  const EQUAL = 1;
  /**
   * 不等于
   */
  const NOT_EQUAL = 2;
  /**
   * 大于
   */
  const GREATER = 3;
  /**
   * 大于等于
   */
  const GREATER_OR_EQUAL = 4;
  /**
   * 小于
   */
  const LESS = 5;
  /**
   * 小于等于
   */
  const LESS_OR_EQUAL = 6;
  static public $__names = array(
    1 => 'EQUAL',
    2 => 'NOT_EQUAL',
    3 => 'GREATER',
    4 => 'GREATER_OR_EQUAL',
    5 => 'LESS',
    6 => 'LESS_OR_EQUAL',
  );
}

/**
 * 索引数据一致性类型
 */
final class SecondaryIndexConsistencyMode {
  /**
   * 读取时判断索引一致性，此模式不能进行属性projection
   */
  const LAZY = 0;
  /**
   * 写入时保持索引一致性
   */
  const EAGER = 1;
  /**
   * 适用于只读数据，写入后不再修改，写入时采用LAZY方式，读
   * 取时采用EAGER方式
   */
  const IMMUTABLE = 2;
  static public $__names = array(
    0 => 'LAZY',
    1 => 'EAGER',
    2 => 'IMMUTABLE',
  );
}

/**
 * ACL模板，针对每个应用进行设置，
 * 开发者登录可以访问所拥有的表数据，无需额外设置
 */
final class CannedAcl {
  /**
   * App Secret登录读整表权限
   */
  const APP_SECRET_READ = 1;
  /**
   * App Secret登录写整表权限
   */
  const APP_SECRET_WRITE = 2;
  /**
   * 应用登录用户对Entity Group等于用户ID的记录的读权限，
   * 如果表没有设置Entity Group支持，此设置无效，
   * 授权后，不自动授予App Secret登录对应权限，必须单独设置
   */
  const APP_USER_ENTITY_GROUP_READ = 3;
  /**
   * 应用登录用户对Entity Group等于用户ID的记录的写权限，
   * 如果表没有设置Entity Group支持，此设置无效，
   * 授权后，不自动授予App Secret登录对应权限，必须单独设置
   */
  const APP_USER_ENTITY_GROUP_WRITE = 4;
  /**
   * 应用登录用户读整表权限(授权后，App Secret登录会自动拥有对应权限)
   */
  const APP_USER_READ = 5;
  /**
   * 应用登录用户写整表权限(授权后，App Secret登录会自动拥有对应权限)
   */
  const APP_USER_WRITE = 6;
  /**
   * 匿名用户读整表权限(授权后，App登录用户和App Secret登录用户会自动拥有对应权限)
   */
  const PUBLIC_READ = 7;
  /**
   * 匿名用户写整表权限(授权后，App登录用户和App Secret登录用户会自动拥有对应权限)
   */
  const PUBLIC_WRITE = 8;
  static public $__names = array(
    1 => 'APP_SECRET_READ',
    2 => 'APP_SECRET_WRITE',
    3 => 'APP_USER_ENTITY_GROUP_READ',
    4 => 'APP_USER_ENTITY_GROUP_WRITE',
    5 => 'APP_USER_READ',
    6 => 'APP_USER_WRITE',
    7 => 'PUBLIC_READ',
    8 => 'PUBLIC_WRITE',
  );
}

/**
 * 表状态
 */
final class TableState {
  /**
   * 正在创建，不可操作
   */
  const CREATING = 1;
  /**
   * 正在开启，不可操作
   */
  const ENABLING = 2;
  /**
   * 开启状态，可读写
   */
  const ENABLED = 3;
  /**
   * 正在关闭，不可操作
   */
  const DISABLING = 4;
  /**
   * 关闭状态，不可读写
   */
  const DISABLED = 5;
  /**
   * 正在删除，不可见
   */
  const DELETING = 6;
  /**
   * 已删除，不可见
   */
  const DELETED = 7;
  /**
   * 延迟删除, 可见
   */
  const LAZY_DELETE = 8;
  /**
   * 正在重命名，不可操作
   */
  const RENAMING = 9;
  static public $__names = array(
    1 => 'CREATING',
    2 => 'ENABLING',
    3 => 'ENABLED',
    4 => 'DISABLING',
    5 => 'DISABLED',
    6 => 'DELETING',
    7 => 'DELETED',
    8 => 'LAZY_DELETE',
    9 => 'RENAMING',
  );
}

/**
 * 快照状态
 */
final class SnapshotState {
  /**
   * 开启状态，可操作
   */
  const ENABLED = 1;
  /**
   * 正在创建，不可操作
   */
  const INPROGRESS = 2;
  static public $__names = array(
    1 => 'ENABLED',
    2 => 'INPROGRESS',
  );
}

final class ScanOp {
  /**
   * 统计满足查询条件的记录数
   */
  const COUNT = 0;
  /**
   * 删除满足查询条件的记录
   */
  const DELETE = 1;
  /**
   * 更新满足条件的记录
   */
  const UPDATE = 2;
  static public $__names = array(
    0 => 'COUNT',
    1 => 'DELETE',
    2 => 'UPDATE',
  );
}

final class BatchOp {
  const GET = 1;
  const PUT = 2;
  const INCREMENT = 3;
  const REMOVE = 4;
  static public $__names = array(
    1 => 'GET',
    2 => 'PUT',
    3 => 'INCREMENT',
    4 => 'REMOVE',
  );
}

/**
 * 增量操作类型
 */
final class EditType {
  const PUT = 1;
  const DELETE = 2;
  static public $__names = array(
    1 => 'PUT',
    2 => 'DELETE',
  );
}

/**
 * 数据值union类型
 */
class Value {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $boolValue = null;
  /**
   * @var int
   */
  public $int8Value = null;
  /**
   * @var int
   */
  public $int16Value = null;
  /**
   * @var int
   */
  public $int32Value = null;
  /**
   * @var int
   */
  public $int64Value = null;
  /**
   * 用于FLOAT/DOUBLE类型
   * 
   * @var double
   */
  public $doubleValue = null;
  /**
   * @var string
   */
  public $stringValue = null;
  /**
   * 用于BINARY/RAWBINARY类型
   * 
   * @var string
   */
  public $binaryValue = null;
  /**
   * @var bool[]
   */
  public $boolSetValue = null;
  /**
   * @var int[]
   */
  public $int8SetValue = null;
  /**
   * @var int[]
   */
  public $int16SetValue = null;
  /**
   * @var int[]
   */
  public $int32SetValue = null;
  /**
   * @var int[]
   */
  public $int64SetValue = null;
  /**
   * 用于FLOAT/DOUBLE类型集合
   * 
   * @var double[]
   */
  public $doubleSetValue = null;
  /**
   * @var string[]
   */
  public $stringSetValue = null;
  /**
   * @var string[]
   */
  public $binarySetValue = null;
  /**
   * null，只用于RC_BASIC存储格式
   * 
   * @var bool
   */
  public $nullValue = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'boolValue',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'int8Value',
          'type' => TType::BYTE,
          ),
        3 => array(
          'var' => 'int16Value',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'int32Value',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'int64Value',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'doubleValue',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'stringValue',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'binaryValue',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'boolSetValue',
          'type' => TType::LST,
          'etype' => TType::BOOL,
          'elem' => array(
            'type' => TType::BOOL,
            ),
          ),
        10 => array(
          'var' => 'int8SetValue',
          'type' => TType::LST,
          'etype' => TType::BYTE,
          'elem' => array(
            'type' => TType::BYTE,
            ),
          ),
        11 => array(
          'var' => 'int16SetValue',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        12 => array(
          'var' => 'int32SetValue',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        13 => array(
          'var' => 'int64SetValue',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        14 => array(
          'var' => 'doubleSetValue',
          'type' => TType::LST,
          'etype' => TType::DOUBLE,
          'elem' => array(
            'type' => TType::DOUBLE,
            ),
          ),
        15 => array(
          'var' => 'stringSetValue',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        16 => array(
          'var' => 'binarySetValue',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        20 => array(
          'var' => 'nullValue',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['boolValue'])) {
        $this->boolValue = $vals['boolValue'];
      }
      if (isset($vals['int8Value'])) {
        $this->int8Value = $vals['int8Value'];
      }
      if (isset($vals['int16Value'])) {
        $this->int16Value = $vals['int16Value'];
      }
      if (isset($vals['int32Value'])) {
        $this->int32Value = $vals['int32Value'];
      }
      if (isset($vals['int64Value'])) {
        $this->int64Value = $vals['int64Value'];
      }
      if (isset($vals['doubleValue'])) {
        $this->doubleValue = $vals['doubleValue'];
      }
      if (isset($vals['stringValue'])) {
        $this->stringValue = $vals['stringValue'];
      }
      if (isset($vals['binaryValue'])) {
        $this->binaryValue = $vals['binaryValue'];
      }
      if (isset($vals['boolSetValue'])) {
        $this->boolSetValue = $vals['boolSetValue'];
      }
      if (isset($vals['int8SetValue'])) {
        $this->int8SetValue = $vals['int8SetValue'];
      }
      if (isset($vals['int16SetValue'])) {
        $this->int16SetValue = $vals['int16SetValue'];
      }
      if (isset($vals['int32SetValue'])) {
        $this->int32SetValue = $vals['int32SetValue'];
      }
      if (isset($vals['int64SetValue'])) {
        $this->int64SetValue = $vals['int64SetValue'];
      }
      if (isset($vals['doubleSetValue'])) {
        $this->doubleSetValue = $vals['doubleSetValue'];
      }
      if (isset($vals['stringSetValue'])) {
        $this->stringSetValue = $vals['stringSetValue'];
      }
      if (isset($vals['binarySetValue'])) {
        $this->binarySetValue = $vals['binarySetValue'];
      }
      if (isset($vals['nullValue'])) {
        $this->nullValue = $vals['nullValue'];
      }
    }
  }

  public function getName() {
    return 'Value';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->boolValue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->int8Value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->int16Value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->int32Value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->int64Value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->doubleValue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->stringValue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->binaryValue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->boolSetValue = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readBool($elem5);
              $this->boolSetValue []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->int8SetValue = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $xfer += $input->readByte($elem11);
              $this->int8SetValue []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->int16SetValue = array();
            $_size12 = 0;
            $_etype15 = 0;
            $xfer += $input->readListBegin($_etype15, $_size12);
            for ($_i16 = 0; $_i16 < $_size12; ++$_i16)
            {
              $elem17 = null;
              $xfer += $input->readI16($elem17);
              $this->int16SetValue []= $elem17;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::LST) {
            $this->int32SetValue = array();
            $_size18 = 0;
            $_etype21 = 0;
            $xfer += $input->readListBegin($_etype21, $_size18);
            for ($_i22 = 0; $_i22 < $_size18; ++$_i22)
            {
              $elem23 = null;
              $xfer += $input->readI32($elem23);
              $this->int32SetValue []= $elem23;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::LST) {
            $this->int64SetValue = array();
            $_size24 = 0;
            $_etype27 = 0;
            $xfer += $input->readListBegin($_etype27, $_size24);
            for ($_i28 = 0; $_i28 < $_size24; ++$_i28)
            {
              $elem29 = null;
              $xfer += $input->readI64($elem29);
              $this->int64SetValue []= $elem29;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::LST) {
            $this->doubleSetValue = array();
            $_size30 = 0;
            $_etype33 = 0;
            $xfer += $input->readListBegin($_etype33, $_size30);
            for ($_i34 = 0; $_i34 < $_size30; ++$_i34)
            {
              $elem35 = null;
              $xfer += $input->readDouble($elem35);
              $this->doubleSetValue []= $elem35;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::LST) {
            $this->stringSetValue = array();
            $_size36 = 0;
            $_etype39 = 0;
            $xfer += $input->readListBegin($_etype39, $_size36);
            for ($_i40 = 0; $_i40 < $_size36; ++$_i40)
            {
              $elem41 = null;
              $xfer += $input->readString($elem41);
              $this->stringSetValue []= $elem41;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::LST) {
            $this->binarySetValue = array();
            $_size42 = 0;
            $_etype45 = 0;
            $xfer += $input->readListBegin($_etype45, $_size42);
            for ($_i46 = 0; $_i46 < $_size42; ++$_i46)
            {
              $elem47 = null;
              $xfer += $input->readString($elem47);
              $this->binarySetValue []= $elem47;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->nullValue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Value');
    if ($this->boolValue !== null) {
      $xfer += $output->writeFieldBegin('boolValue', TType::BOOL, 1);
      $xfer += $output->writeBool($this->boolValue);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->int8Value !== null) {
      $xfer += $output->writeFieldBegin('int8Value', TType::BYTE, 2);
      $xfer += $output->writeByte($this->int8Value);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->int16Value !== null) {
      $xfer += $output->writeFieldBegin('int16Value', TType::I16, 3);
      $xfer += $output->writeI16($this->int16Value);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->int32Value !== null) {
      $xfer += $output->writeFieldBegin('int32Value', TType::I32, 4);
      $xfer += $output->writeI32($this->int32Value);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->int64Value !== null) {
      $xfer += $output->writeFieldBegin('int64Value', TType::I64, 5);
      $xfer += $output->writeI64($this->int64Value);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->doubleValue !== null) {
      $xfer += $output->writeFieldBegin('doubleValue', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->doubleValue);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stringValue !== null) {
      $xfer += $output->writeFieldBegin('stringValue', TType::STRING, 7);
      $xfer += $output->writeString($this->stringValue);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->binaryValue !== null) {
      $xfer += $output->writeFieldBegin('binaryValue', TType::STRING, 8);
      $xfer += $output->writeString($this->binaryValue);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->boolSetValue !== null) {
      if (!is_array($this->boolSetValue)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('boolSetValue', TType::LST, 9);
      {
        $output->writeListBegin(TType::BOOL, count($this->boolSetValue));
        {
          foreach ($this->boolSetValue as $iter48)
          {
            $xfer += $output->writeBool($iter48);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->int8SetValue !== null) {
      if (!is_array($this->int8SetValue)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('int8SetValue', TType::LST, 10);
      {
        $output->writeListBegin(TType::BYTE, count($this->int8SetValue));
        {
          foreach ($this->int8SetValue as $iter49)
          {
            $xfer += $output->writeByte($iter49);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->int16SetValue !== null) {
      if (!is_array($this->int16SetValue)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('int16SetValue', TType::LST, 11);
      {
        $output->writeListBegin(TType::I16, count($this->int16SetValue));
        {
          foreach ($this->int16SetValue as $iter50)
          {
            $xfer += $output->writeI16($iter50);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->int32SetValue !== null) {
      if (!is_array($this->int32SetValue)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('int32SetValue', TType::LST, 12);
      {
        $output->writeListBegin(TType::I32, count($this->int32SetValue));
        {
          foreach ($this->int32SetValue as $iter51)
          {
            $xfer += $output->writeI32($iter51);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->int64SetValue !== null) {
      if (!is_array($this->int64SetValue)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('int64SetValue', TType::LST, 13);
      {
        $output->writeListBegin(TType::I64, count($this->int64SetValue));
        {
          foreach ($this->int64SetValue as $iter52)
          {
            $xfer += $output->writeI64($iter52);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->doubleSetValue !== null) {
      if (!is_array($this->doubleSetValue)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('doubleSetValue', TType::LST, 14);
      {
        $output->writeListBegin(TType::DOUBLE, count($this->doubleSetValue));
        {
          foreach ($this->doubleSetValue as $iter53)
          {
            $xfer += $output->writeDouble($iter53);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stringSetValue !== null) {
      if (!is_array($this->stringSetValue)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('stringSetValue', TType::LST, 15);
      {
        $output->writeListBegin(TType::STRING, count($this->stringSetValue));
        {
          foreach ($this->stringSetValue as $iter54)
          {
            $xfer += $output->writeString($iter54);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->binarySetValue !== null) {
      if (!is_array($this->binarySetValue)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('binarySetValue', TType::LST, 16);
      {
        $output->writeListBegin(TType::STRING, count($this->binarySetValue));
        {
          foreach ($this->binarySetValue as $iter55)
          {
            $xfer += $output->writeString($iter55);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nullValue !== null) {
      $xfer += $output->writeFieldBegin('nullValue', TType::BOOL, 20);
      $xfer += $output->writeBool($this->nullValue);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 数据单元
 */
class Datum {
  static $_TSPEC;

  /**
   * @var int
   */
  public $type = null;
  /**
   * @var \SDS\Table\Value
   */
  public $value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\Value',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
    }
  }

  public function getName() {
    return 'Datum';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \SDS\Table\Value();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Datum');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 吞吐量配额
 */
class ProvisionThroughput {
  static $_TSPEC;

  /**
   * @var int
   */
  public $readCapacity = null;
  /**
   * @var int
   */
  public $writeCapacity = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'readCapacity',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'writeCapacity',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['readCapacity'])) {
        $this->readCapacity = $vals['readCapacity'];
      }
      if (isset($vals['writeCapacity'])) {
        $this->writeCapacity = $vals['writeCapacity'];
      }
    }
  }

  public function getName() {
    return 'ProvisionThroughput';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->readCapacity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->writeCapacity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProvisionThroughput');
    if ($this->readCapacity !== null) {
      $xfer += $output->writeFieldBegin('readCapacity', TType::I64, 1);
      $xfer += $output->writeI64($this->readCapacity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->writeCapacity !== null) {
      $xfer += $output->writeFieldBegin('writeCapacity', TType::I64, 2);
      $xfer += $output->writeI64($this->writeCapacity);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 空间配额
 */
class TableQuota {
  static $_TSPEC;

  /**
   * 空间配额，单位为字节
   * 
   * @var int
   */
  public $size = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'size',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
    }
  }

  public function getName() {
    return 'TableQuota';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TableQuota');
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I64, 1);
      $xfer += $output->writeI64($this->size);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class KeySpec {
  static $_TSPEC;

  /**
   * @var string
   */
  public $attribute = null;
  /**
   * @var bool
   */
  public $asc = true;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'attribute',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'asc',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['attribute'])) {
        $this->attribute = $vals['attribute'];
      }
      if (isset($vals['asc'])) {
        $this->asc = $vals['asc'];
      }
    }
  }

  public function getName() {
    return 'KeySpec';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->attribute);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->asc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('KeySpec');
    if ($this->attribute !== null) {
      $xfer += $output->writeFieldBegin('attribute', TType::STRING, 1);
      $xfer += $output->writeString($this->attribute);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->asc !== null) {
      $xfer += $output->writeFieldBegin('asc', TType::BOOL, 2);
      $xfer += $output->writeBool($this->asc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 局部二级索引定义
 */
class LocalSecondaryIndexSpec {
  static $_TSPEC;

  /**
   * 索引定义
   * 
   * @var \SDS\Table\KeySpec[]
   */
  public $indexSchema = null;
  /**
   * 映射的属性，仅当索引类型为Eager时才可设置
   * 
   * @var string[]
   */
  public $projections = null;
  /**
   * 索引数据一致性模式
   * 
   * @var int
   */
  public $consistencyMode =   0;
  /**
   * 是否为唯一索引
   * 
   * @var bool
   */
  public $unique = false;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'indexSchema',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\KeySpec',
            ),
          ),
        2 => array(
          'var' => 'projections',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'consistencyMode',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'unique',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['indexSchema'])) {
        $this->indexSchema = $vals['indexSchema'];
      }
      if (isset($vals['projections'])) {
        $this->projections = $vals['projections'];
      }
      if (isset($vals['consistencyMode'])) {
        $this->consistencyMode = $vals['consistencyMode'];
      }
      if (isset($vals['unique'])) {
        $this->unique = $vals['unique'];
      }
    }
  }

  public function getName() {
    return 'LocalSecondaryIndexSpec';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->indexSchema = array();
            $_size56 = 0;
            $_etype59 = 0;
            $xfer += $input->readListBegin($_etype59, $_size56);
            for ($_i60 = 0; $_i60 < $_size56; ++$_i60)
            {
              $elem61 = null;
              $elem61 = new \SDS\Table\KeySpec();
              $xfer += $elem61->read($input);
              $this->indexSchema []= $elem61;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->projections = array();
            $_size62 = 0;
            $_etype65 = 0;
            $xfer += $input->readListBegin($_etype65, $_size62);
            for ($_i66 = 0; $_i66 < $_size62; ++$_i66)
            {
              $elem67 = null;
              $xfer += $input->readString($elem67);
              $this->projections []= $elem67;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->consistencyMode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->unique);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LocalSecondaryIndexSpec');
    if ($this->indexSchema !== null) {
      if (!is_array($this->indexSchema)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('indexSchema', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->indexSchema));
        {
          foreach ($this->indexSchema as $iter68)
          {
            $xfer += $iter68->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->projections !== null) {
      if (!is_array($this->projections)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projections', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->projections));
        {
          foreach ($this->projections as $iter69)
          {
            $xfer += $output->writeString($iter69);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->consistencyMode !== null) {
      $xfer += $output->writeFieldBegin('consistencyMode', TType::I32, 3);
      $xfer += $output->writeI32($this->consistencyMode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unique !== null) {
      $xfer += $output->writeFieldBegin('unique', TType::BOOL, 4);
      $xfer += $output->writeBool($this->unique);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * EntityGroup定义
 */
class EntityGroupSpec {
  static $_TSPEC;

  /**
   * 属性有序列表
   * 
   * @var \SDS\Table\KeySpec[]
   */
  public $attributes = null;
  /**
   * 是否对属性进行哈希分布:
   * 开启后表中记录按照(hash(attribute value), attribute value)大小顺序分布
   * 
   * @var bool
   */
  public $enableHash = true;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'attributes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\KeySpec',
            ),
          ),
        2 => array(
          'var' => 'enableHash',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
      if (isset($vals['enableHash'])) {
        $this->enableHash = $vals['enableHash'];
      }
    }
  }

  public function getName() {
    return 'EntityGroupSpec';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->attributes = array();
            $_size70 = 0;
            $_etype73 = 0;
            $xfer += $input->readListBegin($_etype73, $_size70);
            for ($_i74 = 0; $_i74 < $_size70; ++$_i74)
            {
              $elem75 = null;
              $elem75 = new \SDS\Table\KeySpec();
              $xfer += $elem75->read($input);
              $this->attributes []= $elem75;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->enableHash);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EntityGroupSpec');
    if ($this->attributes !== null) {
      if (!is_array($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->attributes));
        {
          foreach ($this->attributes as $iter76)
          {
            $xfer += $iter76->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enableHash !== null) {
      $xfer += $output->writeFieldBegin('enableHash', TType::BOOL, 2);
      $xfer += $output->writeBool($this->enableHash);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 表Schema设置
 */
class TableSchema {
  static $_TSPEC;

  /**
   * Schema版本号，仅作为输出，作为输入不需要设置
   * 
   * @var int
   */
  public $version = null;
  /**
   * Entity group定义, 不设置表示不开启Entity Group支持。
   * 开启后自动支持应用用户表空间隔离(需配合相应权限设置),
   * 即每个应用用户将看到独立的表空间
   * 
   * @var \SDS\Table\EntityGroupSpec
   */
  public $entityGroup = null;
  /**
   * 主键定义
   * 
   * @var \SDS\Table\KeySpec[]
   */
  public $primaryIndex = null;
  /**
   * 二级索引定义
   * 
   * @var array
   */
  public $secondaryIndexes = null;
  /**
   * 属性定义
   * 
   * @var array
   */
  public $attributes = null;
  /**
   * 记录存活时间，单位为秒。-1表示不会自动删除
   * 
   * @var int
   */
  public $ttl = -1;
  /**
   * 表初始分片数目，仅支持Entity Group开启hash分布的表，且仅在建表时起作用
   * 
   * @var int
   */
  public $preSplits = 1;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'version',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'entityGroup',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\EntityGroupSpec',
          ),
        3 => array(
          'var' => 'primaryIndex',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\KeySpec',
            ),
          ),
        4 => array(
          'var' => 'secondaryIndexes',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\LocalSecondaryIndexSpec',
            ),
          ),
        5 => array(
          'var' => 'attributes',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        6 => array(
          'var' => 'ttl',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'preSplits',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['entityGroup'])) {
        $this->entityGroup = $vals['entityGroup'];
      }
      if (isset($vals['primaryIndex'])) {
        $this->primaryIndex = $vals['primaryIndex'];
      }
      if (isset($vals['secondaryIndexes'])) {
        $this->secondaryIndexes = $vals['secondaryIndexes'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
      if (isset($vals['ttl'])) {
        $this->ttl = $vals['ttl'];
      }
      if (isset($vals['preSplits'])) {
        $this->preSplits = $vals['preSplits'];
      }
    }
  }

  public function getName() {
    return 'TableSchema';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->entityGroup = new \SDS\Table\EntityGroupSpec();
            $xfer += $this->entityGroup->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->primaryIndex = array();
            $_size77 = 0;
            $_etype80 = 0;
            $xfer += $input->readListBegin($_etype80, $_size77);
            for ($_i81 = 0; $_i81 < $_size77; ++$_i81)
            {
              $elem82 = null;
              $elem82 = new \SDS\Table\KeySpec();
              $xfer += $elem82->read($input);
              $this->primaryIndex []= $elem82;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->secondaryIndexes = array();
            $_size83 = 0;
            $_ktype84 = 0;
            $_vtype85 = 0;
            $xfer += $input->readMapBegin($_ktype84, $_vtype85, $_size83);
            for ($_i87 = 0; $_i87 < $_size83; ++$_i87)
            {
              $key88 = '';
              $val89 = new \SDS\Table\LocalSecondaryIndexSpec();
              $xfer += $input->readString($key88);
              $val89 = new \SDS\Table\LocalSecondaryIndexSpec();
              $xfer += $val89->read($input);
              $this->secondaryIndexes[$key88] = $val89;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::MAP) {
            $this->attributes = array();
            $_size90 = 0;
            $_ktype91 = 0;
            $_vtype92 = 0;
            $xfer += $input->readMapBegin($_ktype91, $_vtype92, $_size90);
            for ($_i94 = 0; $_i94 < $_size90; ++$_i94)
            {
              $key95 = '';
              $val96 = 0;
              $xfer += $input->readString($key95);
              $xfer += $input->readI32($val96);
              $this->attributes[$key95] = $val96;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ttl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->preSplits);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TableSchema');
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::I32, 1);
      $xfer += $output->writeI32($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->entityGroup !== null) {
      if (!is_object($this->entityGroup)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('entityGroup', TType::STRUCT, 2);
      $xfer += $this->entityGroup->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->primaryIndex !== null) {
      if (!is_array($this->primaryIndex)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('primaryIndex', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->primaryIndex));
        {
          foreach ($this->primaryIndex as $iter97)
          {
            $xfer += $iter97->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->secondaryIndexes !== null) {
      if (!is_array($this->secondaryIndexes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('secondaryIndexes', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->secondaryIndexes));
        {
          foreach ($this->secondaryIndexes as $kiter98 => $viter99)
          {
            $xfer += $output->writeString($kiter98);
            $xfer += $viter99->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_array($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::MAP, 5);
      {
        $output->writeMapBegin(TType::STRING, TType::I32, count($this->attributes));
        {
          foreach ($this->attributes as $kiter100 => $viter101)
          {
            $xfer += $output->writeString($kiter100);
            $xfer += $output->writeI32($viter101);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ttl !== null) {
      $xfer += $output->writeFieldBegin('ttl', TType::I32, 6);
      $xfer += $output->writeI32($this->ttl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preSplits !== null) {
      $xfer += $output->writeFieldBegin('preSplits', TType::I32, 7);
      $xfer += $output->writeI32($this->preSplits);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 远程复制吞吐量配额
 */
class ReplicationProvisionThroughput {
  static $_TSPEC;

  /**
   * @var int
   */
  public $consumeCapacity = null;
  /**
   * @var int
   */
  public $commitCapacity = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'consumeCapacity',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'commitCapacity',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['consumeCapacity'])) {
        $this->consumeCapacity = $vals['consumeCapacity'];
      }
      if (isset($vals['commitCapacity'])) {
        $this->commitCapacity = $vals['commitCapacity'];
      }
    }
  }

  public function getName() {
    return 'ReplicationProvisionThroughput';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->consumeCapacity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->commitCapacity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReplicationProvisionThroughput');
    if ($this->consumeCapacity !== null) {
      $xfer += $output->writeFieldBegin('consumeCapacity', TType::I64, 1);
      $xfer += $output->writeI64($this->consumeCapacity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commitCapacity !== null) {
      $xfer += $output->writeFieldBegin('commitCapacity', TType::I64, 2);
      $xfer += $output->writeI64($this->commitCapacity);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 远程复制定义
 */
class ReplicationSpec {
  static $_TSPEC;

  /**
   * 是否做增量复制
   * 
   * @var bool
   */
  public $enableReplication = null;
  /**
   * 吞吐量配额
   * 
   * @var \SDS\Table\ReplicationProvisionThroughput
   */
  public $throughput = null;
  /**
   * 订阅者的最大数量
   * 
   * @var int
   */
  public $maxSubscribers = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'enableReplication',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'throughput',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\ReplicationProvisionThroughput',
          ),
        3 => array(
          'var' => 'maxSubscribers',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['enableReplication'])) {
        $this->enableReplication = $vals['enableReplication'];
      }
      if (isset($vals['throughput'])) {
        $this->throughput = $vals['throughput'];
      }
      if (isset($vals['maxSubscribers'])) {
        $this->maxSubscribers = $vals['maxSubscribers'];
      }
    }
  }

  public function getName() {
    return 'ReplicationSpec';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->enableReplication);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->throughput = new \SDS\Table\ReplicationProvisionThroughput();
            $xfer += $this->throughput->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxSubscribers);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReplicationSpec');
    if ($this->enableReplication !== null) {
      $xfer += $output->writeFieldBegin('enableReplication', TType::BOOL, 1);
      $xfer += $output->writeBool($this->enableReplication);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->throughput !== null) {
      if (!is_object($this->throughput)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('throughput', TType::STRUCT, 2);
      $xfer += $this->throughput->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxSubscribers !== null) {
      $xfer += $output->writeFieldBegin('maxSubscribers', TType::I32, 3);
      $xfer += $output->writeI32($this->maxSubscribers);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 表元信息
 */
class TableMetadata {
  static $_TSPEC;

  /**
   * 表ID
   * 仅作为输出值，作为输入时无需指定
   * 
   * @var string
   */
  public $tableId = null;
  /**
   * 所有者的开发者ID，
   * 对于CreateTable/AlterTable，值不设置时，默认为当前登录用户。
   * 
   * @var string
   */
  public $developerId = null;
  /**
   * 权限控制设置
   * 
   * @var array
   */
  public $appAcl = null;
  /**
   * 空间配额
   * 
   * @var \SDS\Table\TableQuota
   */
  public $quota = null;
  /**
   * 吞吐量配额
   * 
   * @var \SDS\Table\ProvisionThroughput
   */
  public $throughput = null;
  /**
   * 表备注信息
   * 
   * @var string
   */
  public $description = null;
  /**
   * 是否支持全局有序扫描
   * 
   * @var bool
   */
  public $enableScanInGlobalOrder = null;
  /**
   * 远程复制定义
   * 
   * @var \SDS\Table\ReplicationSpec
   */
  public $replication = null;
  /**
   * 是否支持系统定期做snapshot， 默认为true
   * 
   * @var bool
   */
  public $enableSysSnapshot = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'developerId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'appAcl',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::LST,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::LST,
            'etype' => TType::I32,
            'elem' => array(
              'type' => TType::I32,
              ),
            ),
          ),
        4 => array(
          'var' => 'quota',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\TableQuota',
          ),
        5 => array(
          'var' => 'throughput',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\ProvisionThroughput',
          ),
        6 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'enableScanInGlobalOrder',
          'type' => TType::BOOL,
          ),
        8 => array(
          'var' => 'replication',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\ReplicationSpec',
          ),
        9 => array(
          'var' => 'enableSysSnapshot',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableId'])) {
        $this->tableId = $vals['tableId'];
      }
      if (isset($vals['developerId'])) {
        $this->developerId = $vals['developerId'];
      }
      if (isset($vals['appAcl'])) {
        $this->appAcl = $vals['appAcl'];
      }
      if (isset($vals['quota'])) {
        $this->quota = $vals['quota'];
      }
      if (isset($vals['throughput'])) {
        $this->throughput = $vals['throughput'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['enableScanInGlobalOrder'])) {
        $this->enableScanInGlobalOrder = $vals['enableScanInGlobalOrder'];
      }
      if (isset($vals['replication'])) {
        $this->replication = $vals['replication'];
      }
      if (isset($vals['enableSysSnapshot'])) {
        $this->enableSysSnapshot = $vals['enableSysSnapshot'];
      }
    }
  }

  public function getName() {
    return 'TableMetadata';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->developerId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->appAcl = array();
            $_size102 = 0;
            $_ktype103 = 0;
            $_vtype104 = 0;
            $xfer += $input->readMapBegin($_ktype103, $_vtype104, $_size102);
            for ($_i106 = 0; $_i106 < $_size102; ++$_i106)
            {
              $key107 = '';
              $val108 = array();
              $xfer += $input->readString($key107);
              $val108 = array();
              $_size109 = 0;
              $_etype112 = 0;
              $xfer += $input->readListBegin($_etype112, $_size109);
              for ($_i113 = 0; $_i113 < $_size109; ++$_i113)
              {
                $elem114 = null;
                $xfer += $input->readI32($elem114);
                $val108 []= $elem114;
              }
              $xfer += $input->readListEnd();
              $this->appAcl[$key107] = $val108;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->quota = new \SDS\Table\TableQuota();
            $xfer += $this->quota->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->throughput = new \SDS\Table\ProvisionThroughput();
            $xfer += $this->throughput->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->enableScanInGlobalOrder);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->replication = new \SDS\Table\ReplicationSpec();
            $xfer += $this->replication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->enableSysSnapshot);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TableMetadata');
    if ($this->tableId !== null) {
      $xfer += $output->writeFieldBegin('tableId', TType::STRING, 1);
      $xfer += $output->writeString($this->tableId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->developerId !== null) {
      $xfer += $output->writeFieldBegin('developerId', TType::STRING, 2);
      $xfer += $output->writeString($this->developerId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appAcl !== null) {
      if (!is_array($this->appAcl)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('appAcl', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::LST, count($this->appAcl));
        {
          foreach ($this->appAcl as $kiter115 => $viter116)
          {
            $xfer += $output->writeString($kiter115);
            {
              $output->writeListBegin(TType::I32, count($viter116));
              {
                foreach ($viter116 as $iter117)
                {
                  $xfer += $output->writeI32($iter117);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->quota !== null) {
      if (!is_object($this->quota)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('quota', TType::STRUCT, 4);
      $xfer += $this->quota->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->throughput !== null) {
      if (!is_object($this->throughput)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('throughput', TType::STRUCT, 5);
      $xfer += $this->throughput->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 6);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enableScanInGlobalOrder !== null) {
      $xfer += $output->writeFieldBegin('enableScanInGlobalOrder', TType::BOOL, 7);
      $xfer += $output->writeBool($this->enableScanInGlobalOrder);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->replication !== null) {
      if (!is_object($this->replication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('replication', TType::STRUCT, 8);
      $xfer += $this->replication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enableSysSnapshot !== null) {
      $xfer += $output->writeFieldBegin('enableSysSnapshot', TType::BOOL, 9);
      $xfer += $output->writeBool($this->enableSysSnapshot);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 表配置信息
 */
class TableSpec {
  static $_TSPEC;

  /**
   * @var \SDS\Table\TableSchema
   */
  public $schema = null;
  /**
   * @var \SDS\Table\TableMetadata
   */
  public $metadata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'schema',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\TableSchema',
          ),
        2 => array(
          'var' => 'metadata',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\TableMetadata',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['schema'])) {
        $this->schema = $vals['schema'];
      }
      if (isset($vals['metadata'])) {
        $this->metadata = $vals['metadata'];
      }
    }
  }

  public function getName() {
    return 'TableSpec';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->schema = new \SDS\Table\TableSchema();
            $xfer += $this->schema->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->metadata = new \SDS\Table\TableMetadata();
            $xfer += $this->metadata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TableSpec');
    if ($this->schema !== null) {
      if (!is_object($this->schema)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('schema', TType::STRUCT, 1);
      $xfer += $this->schema->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->metadata !== null) {
      if (!is_object($this->metadata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('metadata', TType::STRUCT, 2);
      $xfer += $this->metadata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Subscriber {
  static $_TSPEC;

  /**
   * 表名
   * 
   * @var string
   */
  public $tableName = null;
  /**
   * 订阅者名字
   * 
   * @var string
   */
  public $subscriberName = null;
  /**
   * 订阅者ID,仅作为输出值，作为输入时无需指定
   * 
   * @var string
   */
  public $subscriberId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'subscriberName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'subscriberId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
      if (isset($vals['subscriberName'])) {
        $this->subscriberName = $vals['subscriberName'];
      }
      if (isset($vals['subscriberId'])) {
        $this->subscriberId = $vals['subscriberId'];
      }
    }
  }

  public function getName() {
    return 'Subscriber';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->subscriberName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->subscriberId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Subscriber');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subscriberName !== null) {
      $xfer += $output->writeFieldBegin('subscriberName', TType::STRING, 2);
      $xfer += $output->writeString($this->subscriberName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subscriberId !== null) {
      $xfer += $output->writeFieldBegin('subscriberId', TType::STRING, 3);
      $xfer += $output->writeString($this->subscriberId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Sinker {
  static $_TSPEC;

  /**
   * 主集群订阅的表名
   * 
   * @var string
   */
  public $subscribedTableName = null;
  /**
   * 订阅者名字
   * 
   * @var string
   */
  public $subscriberName = null;
  /**
   * 主集群域名
   * 
   * @var string
   */
  public $endpoint = null;
  /**
   * 备集群的表名
   * 
   * @var string
   */
  public $sinkedTableName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'subscribedTableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'subscriberName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'endpoint',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'sinkedTableName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['subscribedTableName'])) {
        $this->subscribedTableName = $vals['subscribedTableName'];
      }
      if (isset($vals['subscriberName'])) {
        $this->subscriberName = $vals['subscriberName'];
      }
      if (isset($vals['endpoint'])) {
        $this->endpoint = $vals['endpoint'];
      }
      if (isset($vals['sinkedTableName'])) {
        $this->sinkedTableName = $vals['sinkedTableName'];
      }
    }
  }

  public function getName() {
    return 'Sinker';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->subscribedTableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->subscriberName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endpoint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sinkedTableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Sinker');
    if ($this->subscribedTableName !== null) {
      $xfer += $output->writeFieldBegin('subscribedTableName', TType::STRING, 1);
      $xfer += $output->writeString($this->subscribedTableName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subscriberName !== null) {
      $xfer += $output->writeFieldBegin('subscriberName', TType::STRING, 2);
      $xfer += $output->writeString($this->subscriberName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endpoint !== null) {
      $xfer += $output->writeFieldBegin('endpoint', TType::STRING, 3);
      $xfer += $output->writeString($this->endpoint);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sinkedTableName !== null) {
      $xfer += $output->writeFieldBegin('sinkedTableName', TType::STRING, 4);
      $xfer += $output->writeString($this->sinkedTableName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 表状态信息
 */
class TableStatus {
  static $_TSPEC;

  /**
   * 表状态
   * 
   * @var int
   */
  public $state = null;
  /**
   * 创建时间
   * 
   * @var int
   */
  public $createTime = null;
  /**
   * 最近修改时间
   * 
   * @var int
   */
  public $alterTime = null;
  /**
   * 最近统计时间
   * 
   * @var int
   */
  public $statTime = null;
  /**
   * 占用空间统计，单位为字节
   * 
   * @var int
   */
  public $size = null;
  /**
   * 行数统计，非即时精确值
   * 
   * @var int
   */
  public $rowCount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'state',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'createTime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'alterTime',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'statTime',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'size',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'rowCount',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['alterTime'])) {
        $this->alterTime = $vals['alterTime'];
      }
      if (isset($vals['statTime'])) {
        $this->statTime = $vals['statTime'];
      }
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
      if (isset($vals['rowCount'])) {
        $this->rowCount = $vals['rowCount'];
      }
    }
  }

  public function getName() {
    return 'TableStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->alterTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->statTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->rowCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TableStatus');
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 1);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::I64, 2);
      $xfer += $output->writeI64($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alterTime !== null) {
      $xfer += $output->writeFieldBegin('alterTime', TType::I64, 3);
      $xfer += $output->writeI64($this->alterTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statTime !== null) {
      $xfer += $output->writeFieldBegin('statTime', TType::I64, 4);
      $xfer += $output->writeI64($this->statTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I64, 5);
      $xfer += $output->writeI64($this->size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rowCount !== null) {
      $xfer += $output->writeFieldBegin('rowCount', TType::I64, 6);
      $xfer += $output->writeI64($this->rowCount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 表信息
 */
class TableInfo {
  static $_TSPEC;

  /**
   * @var string
   */
  public $name = null;
  /**
   * @var \SDS\Table\TableSpec
   */
  public $spec = null;
  /**
   * @var \SDS\Table\TableStatus
   */
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'spec',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\TableSpec',
          ),
        3 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\TableStatus',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['spec'])) {
        $this->spec = $vals['spec'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'TableInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->spec = new \SDS\Table\TableSpec();
            $xfer += $this->spec->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->status = new \SDS\Table\TableStatus();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TableInfo');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spec !== null) {
      if (!is_object($this->spec)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('spec', TType::STRUCT, 2);
      $xfer += $this->spec->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 3);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 简单条件，用于checkAndPut/Delete操作，判定逻辑为: value operator field
 */
class SimpleCondition {
  static $_TSPEC;

  /**
   * @var int
   */
  public $operator = null;
  /**
   * @var string
   */
  public $field = null;
  /**
   * @var \SDS\Table\Datum
   */
  public $value = null;
  /**
   * @var bool
   */
  public $rowExist = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'operator',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'field',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\Datum',
          ),
        4 => array(
          'var' => 'rowExist',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['operator'])) {
        $this->operator = $vals['operator'];
      }
      if (isset($vals['field'])) {
        $this->field = $vals['field'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['rowExist'])) {
        $this->rowExist = $vals['rowExist'];
      }
    }
  }

  public function getName() {
    return 'SimpleCondition';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operator);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->field);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->value = new \SDS\Table\Datum();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->rowExist);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SimpleCondition');
    if ($this->operator !== null) {
      $xfer += $output->writeFieldBegin('operator', TType::I32, 1);
      $xfer += $output->writeI32($this->operator);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->field !== null) {
      $xfer += $output->writeFieldBegin('field', TType::STRING, 2);
      $xfer += $output->writeString($this->field);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 3);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rowExist !== null) {
      $xfer += $output->writeFieldBegin('rowExist', TType::BOOL, 4);
      $xfer += $output->writeBool($this->rowExist);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 表分片信息，包括起始和结束的row key
 */
class TableSplit {
  static $_TSPEC;

  /**
   * @var array
   */
  public $startKey = null;
  /**
   * @var array
   */
  public $stopKey = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'startKey',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        2 => array(
          'var' => 'stopKey',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['startKey'])) {
        $this->startKey = $vals['startKey'];
      }
      if (isset($vals['stopKey'])) {
        $this->stopKey = $vals['stopKey'];
      }
    }
  }

  public function getName() {
    return 'TableSplit';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->startKey = array();
            $_size118 = 0;
            $_ktype119 = 0;
            $_vtype120 = 0;
            $xfer += $input->readMapBegin($_ktype119, $_vtype120, $_size118);
            for ($_i122 = 0; $_i122 < $_size118; ++$_i122)
            {
              $key123 = '';
              $val124 = new \SDS\Table\Datum();
              $xfer += $input->readString($key123);
              $val124 = new \SDS\Table\Datum();
              $xfer += $val124->read($input);
              $this->startKey[$key123] = $val124;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->stopKey = array();
            $_size125 = 0;
            $_ktype126 = 0;
            $_vtype127 = 0;
            $xfer += $input->readMapBegin($_ktype126, $_vtype127, $_size125);
            for ($_i129 = 0; $_i129 < $_size125; ++$_i129)
            {
              $key130 = '';
              $val131 = new \SDS\Table\Datum();
              $xfer += $input->readString($key130);
              $val131 = new \SDS\Table\Datum();
              $xfer += $val131->read($input);
              $this->stopKey[$key130] = $val131;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TableSplit');
    if ($this->startKey !== null) {
      if (!is_array($this->startKey)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('startKey', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->startKey));
        {
          foreach ($this->startKey as $kiter132 => $viter133)
          {
            $xfer += $output->writeString($kiter132);
            $xfer += $viter133->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stopKey !== null) {
      if (!is_array($this->stopKey)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('stopKey', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->stopKey));
        {
          foreach ($this->stopKey as $kiter134 => $viter135)
          {
            $xfer += $output->writeString($kiter134);
            $xfer += $viter135->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 表分区信息，包括分区id，起始和结束的row key
 */
class Partition {
  static $_TSPEC;

  /**
   * @var int
   */
  public $partitionId = null;
  /**
   * @var array
   */
  public $startKey = null;
  /**
   * @var array
   */
  public $stopKey = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'partitionId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'startKey',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        3 => array(
          'var' => 'stopKey',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['partitionId'])) {
        $this->partitionId = $vals['partitionId'];
      }
      if (isset($vals['startKey'])) {
        $this->startKey = $vals['startKey'];
      }
      if (isset($vals['stopKey'])) {
        $this->stopKey = $vals['stopKey'];
      }
    }
  }

  public function getName() {
    return 'Partition';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->partitionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->startKey = array();
            $_size136 = 0;
            $_ktype137 = 0;
            $_vtype138 = 0;
            $xfer += $input->readMapBegin($_ktype137, $_vtype138, $_size136);
            for ($_i140 = 0; $_i140 < $_size136; ++$_i140)
            {
              $key141 = '';
              $val142 = new \SDS\Table\Datum();
              $xfer += $input->readString($key141);
              $val142 = new \SDS\Table\Datum();
              $xfer += $val142->read($input);
              $this->startKey[$key141] = $val142;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->stopKey = array();
            $_size143 = 0;
            $_ktype144 = 0;
            $_vtype145 = 0;
            $xfer += $input->readMapBegin($_ktype144, $_vtype145, $_size143);
            for ($_i147 = 0; $_i147 < $_size143; ++$_i147)
            {
              $key148 = '';
              $val149 = new \SDS\Table\Datum();
              $xfer += $input->readString($key148);
              $val149 = new \SDS\Table\Datum();
              $xfer += $val149->read($input);
              $this->stopKey[$key148] = $val149;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Partition');
    if ($this->partitionId !== null) {
      $xfer += $output->writeFieldBegin('partitionId', TType::I32, 1);
      $xfer += $output->writeI32($this->partitionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startKey !== null) {
      if (!is_array($this->startKey)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('startKey', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->startKey));
        {
          foreach ($this->startKey as $kiter150 => $viter151)
          {
            $xfer += $output->writeString($kiter150);
            $xfer += $viter151->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stopKey !== null) {
      if (!is_array($this->stopKey)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('stopKey', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->stopKey));
        {
          foreach ($this->stopKey as $kiter152 => $viter153)
          {
            $xfer += $output->writeString($kiter152);
            $xfer += $viter153->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 表分区统计信息
 */
class PartitionStatistics {
  static $_TSPEC;

  /**
   * @var int
   */
  public $collectedEditNumber = null;
  /**
   * @var int
   */
  public $retrievedEditNumber = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'collectedEditNumber',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'retrievedEditNumber',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['collectedEditNumber'])) {
        $this->collectedEditNumber = $vals['collectedEditNumber'];
      }
      if (isset($vals['retrievedEditNumber'])) {
        $this->retrievedEditNumber = $vals['retrievedEditNumber'];
      }
    }
  }

  public function getName() {
    return 'PartitionStatistics';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->collectedEditNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->retrievedEditNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PartitionStatistics');
    if ($this->collectedEditNumber !== null) {
      $xfer += $output->writeFieldBegin('collectedEditNumber', TType::I64, 1);
      $xfer += $output->writeI64($this->collectedEditNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retrievedEditNumber !== null) {
      $xfer += $output->writeFieldBegin('retrievedEditNumber', TType::I64, 2);
      $xfer += $output->writeI64($this->retrievedEditNumber);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 表分区订阅统计信息
 */
class SubscriberStatistics {
  static $_TSPEC;

  /**
   * @var int
   */
  public $consumedDataNumber = null;
  /**
   * @var int
   */
  public $committedDataNumber = null;
  /**
   * @var int
   */
  public $consumedEditNumber = null;
  /**
   * @var int
   */
  public $committedEditNumber = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'consumedDataNumber',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'committedDataNumber',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'consumedEditNumber',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'committedEditNumber',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['consumedDataNumber'])) {
        $this->consumedDataNumber = $vals['consumedDataNumber'];
      }
      if (isset($vals['committedDataNumber'])) {
        $this->committedDataNumber = $vals['committedDataNumber'];
      }
      if (isset($vals['consumedEditNumber'])) {
        $this->consumedEditNumber = $vals['consumedEditNumber'];
      }
      if (isset($vals['committedEditNumber'])) {
        $this->committedEditNumber = $vals['committedEditNumber'];
      }
    }
  }

  public function getName() {
    return 'SubscriberStatistics';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->consumedDataNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->committedDataNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->consumedEditNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->committedEditNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SubscriberStatistics');
    if ($this->consumedDataNumber !== null) {
      $xfer += $output->writeFieldBegin('consumedDataNumber', TType::I64, 1);
      $xfer += $output->writeI64($this->consumedDataNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->committedDataNumber !== null) {
      $xfer += $output->writeFieldBegin('committedDataNumber', TType::I64, 2);
      $xfer += $output->writeI64($this->committedDataNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->consumedEditNumber !== null) {
      $xfer += $output->writeFieldBegin('consumedEditNumber', TType::I64, 3);
      $xfer += $output->writeI64($this->consumedEditNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->committedEditNumber !== null) {
      $xfer += $output->writeFieldBegin('committedEditNumber', TType::I64, 4);
      $xfer += $output->writeI64($this->committedEditNumber);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetRequest {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tableName = null;
  /**
   * 记录主键，必须包含主键所有的属性
   * 
   * @var array
   */
  public $keys = null;
  /**
   * 需要返回的属性列表，不指定表示返回所有属性
   * 
   * @var string[]
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'keys',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        3 => array(
          'var' => 'attributes',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'GetRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->keys = array();
            $_size154 = 0;
            $_ktype155 = 0;
            $_vtype156 = 0;
            $xfer += $input->readMapBegin($_ktype155, $_vtype156, $_size154);
            for ($_i158 = 0; $_i158 < $_size154; ++$_i158)
            {
              $key159 = '';
              $val160 = new \SDS\Table\Datum();
              $xfer += $input->readString($key159);
              $val160 = new \SDS\Table\Datum();
              $xfer += $val160->read($input);
              $this->keys[$key159] = $val160;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->attributes = array();
            $_size161 = 0;
            $_etype164 = 0;
            $xfer += $input->readListBegin($_etype164, $_size161);
            for ($_i165 = 0; $_i165 < $_size161; ++$_i165)
            {
              $elem166 = null;
              $xfer += $input->readString($elem166);
              $this->attributes []= $elem166;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetRequest');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->keys));
        {
          foreach ($this->keys as $kiter167 => $viter168)
          {
            $xfer += $output->writeString($kiter167);
            $xfer += $viter168->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_array($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->attributes));
        {
          foreach ($this->attributes as $iter169)
          {
            $xfer += $output->writeString($iter169);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetResult {
  static $_TSPEC;

  /**
   * @var array
   */
  public $item = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'item',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['item'])) {
        $this->item = $vals['item'];
      }
    }
  }

  public function getName() {
    return 'GetResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->item = array();
            $_size170 = 0;
            $_ktype171 = 0;
            $_vtype172 = 0;
            $xfer += $input->readMapBegin($_ktype171, $_vtype172, $_size170);
            for ($_i174 = 0; $_i174 < $_size170; ++$_i174)
            {
              $key175 = '';
              $val176 = new \SDS\Table\Datum();
              $xfer += $input->readString($key175);
              $val176 = new \SDS\Table\Datum();
              $xfer += $val176->read($input);
              $this->item[$key175] = $val176;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetResult');
    if ($this->item !== null) {
      if (!is_array($this->item)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('item', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->item));
        {
          foreach ($this->item as $kiter177 => $viter178)
          {
            $xfer += $output->writeString($kiter177);
            $xfer += $viter178->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PutRequest {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tableName = null;
  /**
   * 待写入的记录
   * 
   * @var array
   */
  public $record = null;
  /**
   * 仅当满足指定条件时执行写入操作
   * 
   * @var \SDS\Table\SimpleCondition
   */
  public $condition = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        3 => array(
          'var' => 'condition',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\SimpleCondition',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['condition'])) {
        $this->condition = $vals['condition'];
      }
    }
  }

  public function getName() {
    return 'PutRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->record = array();
            $_size179 = 0;
            $_ktype180 = 0;
            $_vtype181 = 0;
            $xfer += $input->readMapBegin($_ktype180, $_vtype181, $_size179);
            for ($_i183 = 0; $_i183 < $_size179; ++$_i183)
            {
              $key184 = '';
              $val185 = new \SDS\Table\Datum();
              $xfer += $input->readString($key184);
              $val185 = new \SDS\Table\Datum();
              $xfer += $val185->read($input);
              $this->record[$key184] = $val185;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->condition = new \SDS\Table\SimpleCondition();
            $xfer += $this->condition->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PutRequest');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      if (!is_array($this->record)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('record', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->record));
        {
          foreach ($this->record as $kiter186 => $viter187)
          {
            $xfer += $output->writeString($kiter186);
            $xfer += $viter187->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->condition !== null) {
      if (!is_object($this->condition)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('condition', TType::STRUCT, 3);
      $xfer += $this->condition->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PutResult {
  static $_TSPEC;

  /**
   * 写入操作是否被执行(是否满足设置的条件)
   * 
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'PutResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PutResult');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 1);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IncrementRequest {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tableName = null;
  /**
   * 待自增的记录主键
   * 
   * @var array
   */
  public $keys = null;
  /**
   * 需要进行自增操作的属性，必须为整形，且不能为索引属性
   * 
   * @var array
   */
  public $amounts = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'keys',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        3 => array(
          'var' => 'amounts',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['amounts'])) {
        $this->amounts = $vals['amounts'];
      }
    }
  }

  public function getName() {
    return 'IncrementRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->keys = array();
            $_size188 = 0;
            $_ktype189 = 0;
            $_vtype190 = 0;
            $xfer += $input->readMapBegin($_ktype189, $_vtype190, $_size188);
            for ($_i192 = 0; $_i192 < $_size188; ++$_i192)
            {
              $key193 = '';
              $val194 = new \SDS\Table\Datum();
              $xfer += $input->readString($key193);
              $val194 = new \SDS\Table\Datum();
              $xfer += $val194->read($input);
              $this->keys[$key193] = $val194;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->amounts = array();
            $_size195 = 0;
            $_ktype196 = 0;
            $_vtype197 = 0;
            $xfer += $input->readMapBegin($_ktype196, $_vtype197, $_size195);
            for ($_i199 = 0; $_i199 < $_size195; ++$_i199)
            {
              $key200 = '';
              $val201 = new \SDS\Table\Datum();
              $xfer += $input->readString($key200);
              $val201 = new \SDS\Table\Datum();
              $xfer += $val201->read($input);
              $this->amounts[$key200] = $val201;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IncrementRequest');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->keys));
        {
          foreach ($this->keys as $kiter202 => $viter203)
          {
            $xfer += $output->writeString($kiter202);
            $xfer += $viter203->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amounts !== null) {
      if (!is_array($this->amounts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('amounts', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->amounts));
        {
          foreach ($this->amounts as $kiter204 => $viter205)
          {
            $xfer += $output->writeString($kiter204);
            $xfer += $viter205->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IncrementResult {
  static $_TSPEC;

  /**
   * @var array
   */
  public $amounts = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'amounts',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['amounts'])) {
        $this->amounts = $vals['amounts'];
      }
    }
  }

  public function getName() {
    return 'IncrementResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->amounts = array();
            $_size206 = 0;
            $_ktype207 = 0;
            $_vtype208 = 0;
            $xfer += $input->readMapBegin($_ktype207, $_vtype208, $_size206);
            for ($_i210 = 0; $_i210 < $_size206; ++$_i210)
            {
              $key211 = '';
              $val212 = new \SDS\Table\Datum();
              $xfer += $input->readString($key211);
              $val212 = new \SDS\Table\Datum();
              $xfer += $val212->read($input);
              $this->amounts[$key211] = $val212;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IncrementResult');
    if ($this->amounts !== null) {
      if (!is_array($this->amounts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('amounts', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->amounts));
        {
          foreach ($this->amounts as $kiter213 => $viter214)
          {
            $xfer += $output->writeString($kiter213);
            $xfer += $viter214->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RemoveRequest {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tableName = null;
  /**
   * 待删除的记录主键
   * 
   * @var array
   */
  public $keys = null;
  /**
   * 待删除的属性列表，不指定表示删除整条记录。
   * 当删除部分属性时，即使所有属性均已被删除，记录仍存在，删除整条记录需要显式删除
   * 
   * @var string[]
   */
  public $attributes = null;
  /**
   * 仅当满足指定条件时执行删除操作
   * 
   * @var \SDS\Table\SimpleCondition
   */
  public $condition = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'keys',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        3 => array(
          'var' => 'attributes',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'condition',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\SimpleCondition',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
      if (isset($vals['condition'])) {
        $this->condition = $vals['condition'];
      }
    }
  }

  public function getName() {
    return 'RemoveRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->keys = array();
            $_size215 = 0;
            $_ktype216 = 0;
            $_vtype217 = 0;
            $xfer += $input->readMapBegin($_ktype216, $_vtype217, $_size215);
            for ($_i219 = 0; $_i219 < $_size215; ++$_i219)
            {
              $key220 = '';
              $val221 = new \SDS\Table\Datum();
              $xfer += $input->readString($key220);
              $val221 = new \SDS\Table\Datum();
              $xfer += $val221->read($input);
              $this->keys[$key220] = $val221;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->attributes = array();
            $_size222 = 0;
            $_etype225 = 0;
            $xfer += $input->readListBegin($_etype225, $_size222);
            for ($_i226 = 0; $_i226 < $_size222; ++$_i226)
            {
              $elem227 = null;
              $xfer += $input->readString($elem227);
              $this->attributes []= $elem227;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->condition = new \SDS\Table\SimpleCondition();
            $xfer += $this->condition->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RemoveRequest');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->keys));
        {
          foreach ($this->keys as $kiter228 => $viter229)
          {
            $xfer += $output->writeString($kiter228);
            $xfer += $viter229->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_array($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->attributes));
        {
          foreach ($this->attributes as $iter230)
          {
            $xfer += $output->writeString($iter230);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->condition !== null) {
      if (!is_object($this->condition)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('condition', TType::STRUCT, 4);
      $xfer += $this->condition->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RemoveResult {
  static $_TSPEC;

  /**
   * 删除操作是否被执行（是否满足设置的条件）
   * 
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'RemoveResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RemoveResult');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 1);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Request {
  static $_TSPEC;

  /**
   * 随机读操作
   * 
   * @var \SDS\Table\GetRequest
   */
  public $getRequest = null;
  /**
   * 写入操作，不支持条件
   * 
   * @var \SDS\Table\PutRequest
   */
  public $putRequest = null;
  /**
   * 自增操作
   * 
   * @var \SDS\Table\IncrementRequest
   */
  public $incrementRequest = null;
  /**
   * 删除操作，不支持条件
   * 
   * @var \SDS\Table\RemoveRequest
   */
  public $removeRequest = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'getRequest',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\GetRequest',
          ),
        2 => array(
          'var' => 'putRequest',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\PutRequest',
          ),
        3 => array(
          'var' => 'incrementRequest',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\IncrementRequest',
          ),
        4 => array(
          'var' => 'removeRequest',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\RemoveRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['getRequest'])) {
        $this->getRequest = $vals['getRequest'];
      }
      if (isset($vals['putRequest'])) {
        $this->putRequest = $vals['putRequest'];
      }
      if (isset($vals['incrementRequest'])) {
        $this->incrementRequest = $vals['incrementRequest'];
      }
      if (isset($vals['removeRequest'])) {
        $this->removeRequest = $vals['removeRequest'];
      }
    }
  }

  public function getName() {
    return 'Request';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->getRequest = new \SDS\Table\GetRequest();
            $xfer += $this->getRequest->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->putRequest = new \SDS\Table\PutRequest();
            $xfer += $this->putRequest->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->incrementRequest = new \SDS\Table\IncrementRequest();
            $xfer += $this->incrementRequest->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->removeRequest = new \SDS\Table\RemoveRequest();
            $xfer += $this->removeRequest->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Request');
    if ($this->getRequest !== null) {
      if (!is_object($this->getRequest)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('getRequest', TType::STRUCT, 1);
      $xfer += $this->getRequest->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->putRequest !== null) {
      if (!is_object($this->putRequest)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('putRequest', TType::STRUCT, 2);
      $xfer += $this->putRequest->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->incrementRequest !== null) {
      if (!is_object($this->incrementRequest)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('incrementRequest', TType::STRUCT, 3);
      $xfer += $this->incrementRequest->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->removeRequest !== null) {
      if (!is_object($this->removeRequest)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('removeRequest', TType::STRUCT, 4);
      $xfer += $this->removeRequest->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ScanAction {
  static $_TSPEC;

  /**
   * scan时连带操作
   * 
   * @var int
   */
  public $action = null;
  /**
   * 实际操作，不需要指定key
   * 
   * @var \SDS\Table\Request
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'action',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\Request',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['action'])) {
        $this->action = $vals['action'];
      }
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'ScanAction';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->action);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->request = new \SDS\Table\Request();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ScanAction');
    if ($this->action !== null) {
      $xfer += $output->writeFieldBegin('action', TType::I32, 1);
      $xfer += $output->writeI32($this->action);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 2);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 范围查询，支持主键和二级索引查询，
 * 查询范围为闭开区间[startKey, endKey)，
 * 当指定索引时，查询范围的entity group必须唯一指定
 */
class ScanRequest {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tableName = null;
  /**
   * 不指定表示通过主键进行查询
   * 
   * @var string
   */
  public $indexName = null;
  /**
   * 查询范围开始，包含startKey，
   * 如果startKey不是完整键，而是部分key的前缀，则实际查询的startKey为{startKey, 最小可能的后缀}补全形式
   * 
   * @var array
   */
  public $startKey = null;
  /**
   * 查询范围结束，不包含stopKey，
   * 如果stopKey不是完整键，而是部分key的前缀，则实际查询的stopKey为{stopKey, 最大可能的后缀}补全形式
   * 
   * @var array
   */
  public $stopKey = null;
  /**
   * 需要返回的属性列表，不指定表示返回所有属性
   * 
   * @var string[]
   */
  public $attributes = null;
  /**
   * 类SQL WHERE语句的查询条件。
   * 注意：与SQL不同，此条件仅作为过滤条件，不影响具体查询计划(index, startKey, endKey)，
   * 进行范围查询时需要显示设置index和startKey以及endKey。每个扫描的记录均计入读配额，
   * 即使不满足查询条件。尽量避免使用条件过滤，尤其是当过滤掉的记录占一半以上时，强烈不建议使用。
   * 
   * @var string
   */
  public $condition = null;
  /**
   * 返回记录的最大数目，返回数目可能小于此值(如超出表的读配额时)
   * 
   * @var int
   */
  public $limit = 10;
  /**
   * 是否进行逆序扫描，进行逆序扫描时startKey应大于endKey，
   * 注意：逆序查询效率较低，谨慎使用，建议设置对应的Key为逆序存储
   * 
   * @var bool
   */
  public $reverse = false;
  /**
   * 是否全局有序扫描
   * 
   * @var bool
   */
  public $inGlobalOrder = false;
  /**
   * 是否将结果放入cache，对于类似MapReduce的大批量扫描的应用应该关闭此选项
   * 
   * @var bool
   */
  public $cacheResult = true;
  /**
   * 查找属性在seek之前进行顺序skip的次数。非必要情况，请不要设置
   * 
   * @var int
   */
  public $lookAheadStep = 0;
  /**
   * scan时的连带操作，包括COUNT，DELETE和UPDATE
   * 
   * @var \SDS\Table\ScanAction
   */
  public $action = null;
  /**
   * 扫描表分片的索引，对salted table全局无序扫描时设置
   * 
   * @var int
   */
  public $splitIndex = -1;
  /**
   * 查询范围开始的初始值，对salted table全局无序扫描时设置
   * 
   * @var array
   */
  public $initialStartKey = null;
  /**
   * 对salted table, 确定startKey和stopKey在同一个split内，可开启该选项加速
   * 
   * @var bool
   */
  public $scanInOneSplit = false;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'indexName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'startKey',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        4 => array(
          'var' => 'stopKey',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        5 => array(
          'var' => 'attributes',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        6 => array(
          'var' => 'condition',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'reverse',
          'type' => TType::BOOL,
          ),
        9 => array(
          'var' => 'inGlobalOrder',
          'type' => TType::BOOL,
          ),
        10 => array(
          'var' => 'cacheResult',
          'type' => TType::BOOL,
          ),
        11 => array(
          'var' => 'lookAheadStep',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'action',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\ScanAction',
          ),
        13 => array(
          'var' => 'splitIndex',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'initialStartKey',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        15 => array(
          'var' => 'scanInOneSplit',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
      if (isset($vals['indexName'])) {
        $this->indexName = $vals['indexName'];
      }
      if (isset($vals['startKey'])) {
        $this->startKey = $vals['startKey'];
      }
      if (isset($vals['stopKey'])) {
        $this->stopKey = $vals['stopKey'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
      if (isset($vals['condition'])) {
        $this->condition = $vals['condition'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['reverse'])) {
        $this->reverse = $vals['reverse'];
      }
      if (isset($vals['inGlobalOrder'])) {
        $this->inGlobalOrder = $vals['inGlobalOrder'];
      }
      if (isset($vals['cacheResult'])) {
        $this->cacheResult = $vals['cacheResult'];
      }
      if (isset($vals['lookAheadStep'])) {
        $this->lookAheadStep = $vals['lookAheadStep'];
      }
      if (isset($vals['action'])) {
        $this->action = $vals['action'];
      }
      if (isset($vals['splitIndex'])) {
        $this->splitIndex = $vals['splitIndex'];
      }
      if (isset($vals['initialStartKey'])) {
        $this->initialStartKey = $vals['initialStartKey'];
      }
      if (isset($vals['scanInOneSplit'])) {
        $this->scanInOneSplit = $vals['scanInOneSplit'];
      }
    }
  }

  public function getName() {
    return 'ScanRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->indexName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->startKey = array();
            $_size231 = 0;
            $_ktype232 = 0;
            $_vtype233 = 0;
            $xfer += $input->readMapBegin($_ktype232, $_vtype233, $_size231);
            for ($_i235 = 0; $_i235 < $_size231; ++$_i235)
            {
              $key236 = '';
              $val237 = new \SDS\Table\Datum();
              $xfer += $input->readString($key236);
              $val237 = new \SDS\Table\Datum();
              $xfer += $val237->read($input);
              $this->startKey[$key236] = $val237;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->stopKey = array();
            $_size238 = 0;
            $_ktype239 = 0;
            $_vtype240 = 0;
            $xfer += $input->readMapBegin($_ktype239, $_vtype240, $_size238);
            for ($_i242 = 0; $_i242 < $_size238; ++$_i242)
            {
              $key243 = '';
              $val244 = new \SDS\Table\Datum();
              $xfer += $input->readString($key243);
              $val244 = new \SDS\Table\Datum();
              $xfer += $val244->read($input);
              $this->stopKey[$key243] = $val244;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->attributes = array();
            $_size245 = 0;
            $_etype248 = 0;
            $xfer += $input->readListBegin($_etype248, $_size245);
            for ($_i249 = 0; $_i249 < $_size245; ++$_i249)
            {
              $elem250 = null;
              $xfer += $input->readString($elem250);
              $this->attributes []= $elem250;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->condition);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->reverse);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->inGlobalOrder);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->cacheResult);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lookAheadStep);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRUCT) {
            $this->action = new \SDS\Table\ScanAction();
            $xfer += $this->action->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->splitIndex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::MAP) {
            $this->initialStartKey = array();
            $_size251 = 0;
            $_ktype252 = 0;
            $_vtype253 = 0;
            $xfer += $input->readMapBegin($_ktype252, $_vtype253, $_size251);
            for ($_i255 = 0; $_i255 < $_size251; ++$_i255)
            {
              $key256 = '';
              $val257 = new \SDS\Table\Datum();
              $xfer += $input->readString($key256);
              $val257 = new \SDS\Table\Datum();
              $xfer += $val257->read($input);
              $this->initialStartKey[$key256] = $val257;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->scanInOneSplit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ScanRequest');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->indexName !== null) {
      $xfer += $output->writeFieldBegin('indexName', TType::STRING, 2);
      $xfer += $output->writeString($this->indexName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startKey !== null) {
      if (!is_array($this->startKey)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('startKey', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->startKey));
        {
          foreach ($this->startKey as $kiter258 => $viter259)
          {
            $xfer += $output->writeString($kiter258);
            $xfer += $viter259->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stopKey !== null) {
      if (!is_array($this->stopKey)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('stopKey', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->stopKey));
        {
          foreach ($this->stopKey as $kiter260 => $viter261)
          {
            $xfer += $output->writeString($kiter260);
            $xfer += $viter261->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_array($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRING, count($this->attributes));
        {
          foreach ($this->attributes as $iter262)
          {
            $xfer += $output->writeString($iter262);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->condition !== null) {
      $xfer += $output->writeFieldBegin('condition', TType::STRING, 6);
      $xfer += $output->writeString($this->condition);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 7);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reverse !== null) {
      $xfer += $output->writeFieldBegin('reverse', TType::BOOL, 8);
      $xfer += $output->writeBool($this->reverse);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inGlobalOrder !== null) {
      $xfer += $output->writeFieldBegin('inGlobalOrder', TType::BOOL, 9);
      $xfer += $output->writeBool($this->inGlobalOrder);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cacheResult !== null) {
      $xfer += $output->writeFieldBegin('cacheResult', TType::BOOL, 10);
      $xfer += $output->writeBool($this->cacheResult);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lookAheadStep !== null) {
      $xfer += $output->writeFieldBegin('lookAheadStep', TType::I32, 11);
      $xfer += $output->writeI32($this->lookAheadStep);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action !== null) {
      if (!is_object($this->action)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('action', TType::STRUCT, 12);
      $xfer += $this->action->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->splitIndex !== null) {
      $xfer += $output->writeFieldBegin('splitIndex', TType::I32, 13);
      $xfer += $output->writeI32($this->splitIndex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->initialStartKey !== null) {
      if (!is_array($this->initialStartKey)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('initialStartKey', TType::MAP, 14);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->initialStartKey));
        {
          foreach ($this->initialStartKey as $kiter263 => $viter264)
          {
            $xfer += $output->writeString($kiter263);
            $xfer += $viter264->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scanInOneSplit !== null) {
      $xfer += $output->writeFieldBegin('scanInOneSplit', TType::BOOL, 15);
      $xfer += $output->writeBool($this->scanInOneSplit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ScanResult {
  static $_TSPEC;

  /**
   * 下一个需要扫描的记录主键，NULL表示达到制定的结束位置
   * 
   * @var array
   */
  public $nextStartKey = null;
  /**
   * 扫描的记录
   * 
   * @var array[]
   */
  public $records = null;
  /**
   * 是否超过表的qps quota
   * 
   * @var bool
   */
  public $throttled = null;
  /**
   * 下一个需要扫描的分片索引，-1表示已经扫描完所有分片，对salted table全局无序扫描时使用
   * 
   * @var int
   */
  public $nextSplitIndex = -1;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'nextStartKey',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::MAP,
          'elem' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\SDS\Table\Datum',
              ),
            ),
          ),
        3 => array(
          'var' => 'throttled',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'nextSplitIndex',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['nextStartKey'])) {
        $this->nextStartKey = $vals['nextStartKey'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['throttled'])) {
        $this->throttled = $vals['throttled'];
      }
      if (isset($vals['nextSplitIndex'])) {
        $this->nextSplitIndex = $vals['nextSplitIndex'];
      }
    }
  }

  public function getName() {
    return 'ScanResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->nextStartKey = array();
            $_size265 = 0;
            $_ktype266 = 0;
            $_vtype267 = 0;
            $xfer += $input->readMapBegin($_ktype266, $_vtype267, $_size265);
            for ($_i269 = 0; $_i269 < $_size265; ++$_i269)
            {
              $key270 = '';
              $val271 = new \SDS\Table\Datum();
              $xfer += $input->readString($key270);
              $val271 = new \SDS\Table\Datum();
              $xfer += $val271->read($input);
              $this->nextStartKey[$key270] = $val271;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size272 = 0;
            $_etype275 = 0;
            $xfer += $input->readListBegin($_etype275, $_size272);
            for ($_i276 = 0; $_i276 < $_size272; ++$_i276)
            {
              $elem277 = null;
              $elem277 = array();
              $_size278 = 0;
              $_ktype279 = 0;
              $_vtype280 = 0;
              $xfer += $input->readMapBegin($_ktype279, $_vtype280, $_size278);
              for ($_i282 = 0; $_i282 < $_size278; ++$_i282)
              {
                $key283 = '';
                $val284 = new \SDS\Table\Datum();
                $xfer += $input->readString($key283);
                $val284 = new \SDS\Table\Datum();
                $xfer += $val284->read($input);
                $elem277[$key283] = $val284;
              }
              $xfer += $input->readMapEnd();
              $this->records []= $elem277;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->throttled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->nextSplitIndex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ScanResult');
    if ($this->nextStartKey !== null) {
      if (!is_array($this->nextStartKey)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('nextStartKey', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->nextStartKey));
        {
          foreach ($this->nextStartKey as $kiter285 => $viter286)
          {
            $xfer += $output->writeString($kiter285);
            $xfer += $viter286->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::MAP, count($this->records));
        {
          foreach ($this->records as $iter287)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($iter287));
              {
                foreach ($iter287 as $kiter288 => $viter289)
                {
                  $xfer += $output->writeString($kiter288);
                  $xfer += $viter289->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->throttled !== null) {
      $xfer += $output->writeFieldBegin('throttled', TType::BOOL, 3);
      $xfer += $output->writeBool($this->throttled);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nextSplitIndex !== null) {
      $xfer += $output->writeFieldBegin('nextSplitIndex', TType::I32, 4);
      $xfer += $output->writeI32($this->nextSplitIndex);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BatchRequestItem {
  static $_TSPEC;

  /**
   * @var int
   */
  public $action = null;
  /**
   * @var \SDS\Table\Request
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'action',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\Request',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['action'])) {
        $this->action = $vals['action'];
      }
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'BatchRequestItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->action);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->request = new \SDS\Table\Request();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BatchRequestItem');
    if ($this->action !== null) {
      $xfer += $output->writeFieldBegin('action', TType::I32, 1);
      $xfer += $output->writeI32($this->action);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 2);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Result {
  static $_TSPEC;

  /**
   * @var \SDS\Table\GetResult
   */
  public $getResult = null;
  /**
   * @var \SDS\Table\PutResult
   */
  public $putResult = null;
  /**
   * @var \SDS\Table\IncrementResult
   */
  public $incrementResult = null;
  /**
   * @var \SDS\Table\RemoveResult
   */
  public $removeResult = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'getResult',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\GetResult',
          ),
        2 => array(
          'var' => 'putResult',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\PutResult',
          ),
        3 => array(
          'var' => 'incrementResult',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\IncrementResult',
          ),
        4 => array(
          'var' => 'removeResult',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\RemoveResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['getResult'])) {
        $this->getResult = $vals['getResult'];
      }
      if (isset($vals['putResult'])) {
        $this->putResult = $vals['putResult'];
      }
      if (isset($vals['incrementResult'])) {
        $this->incrementResult = $vals['incrementResult'];
      }
      if (isset($vals['removeResult'])) {
        $this->removeResult = $vals['removeResult'];
      }
    }
  }

  public function getName() {
    return 'Result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->getResult = new \SDS\Table\GetResult();
            $xfer += $this->getResult->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->putResult = new \SDS\Table\PutResult();
            $xfer += $this->putResult->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->incrementResult = new \SDS\Table\IncrementResult();
            $xfer += $this->incrementResult->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->removeResult = new \SDS\Table\RemoveResult();
            $xfer += $this->removeResult->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Result');
    if ($this->getResult !== null) {
      if (!is_object($this->getResult)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('getResult', TType::STRUCT, 1);
      $xfer += $this->getResult->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->putResult !== null) {
      if (!is_object($this->putResult)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('putResult', TType::STRUCT, 2);
      $xfer += $this->putResult->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->incrementResult !== null) {
      if (!is_object($this->incrementResult)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('incrementResult', TType::STRUCT, 3);
      $xfer += $this->incrementResult->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->removeResult !== null) {
      if (!is_object($this->removeResult)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('removeResult', TType::STRUCT, 4);
      $xfer += $this->removeResult->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BatchResultItem {
  static $_TSPEC;

  /**
   * 操作类型
   * 
   * @var int
   */
  public $action = null;
  /**
   * 是否成功执行，即无异常
   * 
   * @var bool
   */
  public $success = null;
  /**
   * 操作结果，操作成功时被设置
   * 
   * @var \SDS\Table\Result
   */
  public $result = null;
  /**
   * 操作时发生的异常，操作失败时被设置
   * 
   * @var \SDS\Errors\ServiceException
   */
  public $serviceException = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'action',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'result',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\Result',
          ),
        4 => array(
          'var' => 'serviceException',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['action'])) {
        $this->action = $vals['action'];
      }
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['serviceException'])) {
        $this->serviceException = $vals['serviceException'];
      }
    }
  }

  public function getName() {
    return 'BatchResultItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->action);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->result = new \SDS\Table\Result();
            $xfer += $this->result->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->serviceException = new \SDS\Errors\ServiceException();
            $xfer += $this->serviceException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BatchResultItem');
    if ($this->action !== null) {
      $xfer += $output->writeFieldBegin('action', TType::I32, 1);
      $xfer += $output->writeI32($this->action);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 2);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->result !== null) {
      if (!is_object($this->result)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('result', TType::STRUCT, 3);
      $xfer += $this->result->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serviceException !== null) {
      $xfer += $output->writeFieldBegin('serviceException', TType::STRUCT, 4);
      $xfer += $this->serviceException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BatchRequest {
  static $_TSPEC;

  /**
   * @var \SDS\Table\BatchRequestItem[]
   */
  public $items = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'items',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\BatchRequestItem',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['items'])) {
        $this->items = $vals['items'];
      }
    }
  }

  public function getName() {
    return 'BatchRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->items = array();
            $_size290 = 0;
            $_etype293 = 0;
            $xfer += $input->readListBegin($_etype293, $_size290);
            for ($_i294 = 0; $_i294 < $_size290; ++$_i294)
            {
              $elem295 = null;
              $elem295 = new \SDS\Table\BatchRequestItem();
              $xfer += $elem295->read($input);
              $this->items []= $elem295;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BatchRequest');
    if ($this->items !== null) {
      if (!is_array($this->items)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('items', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->items));
        {
          foreach ($this->items as $iter296)
          {
            $xfer += $iter296->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BatchResult {
  static $_TSPEC;

  /**
   * @var \SDS\Table\BatchResultItem[]
   */
  public $items = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'items',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\BatchResultItem',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['items'])) {
        $this->items = $vals['items'];
      }
    }
  }

  public function getName() {
    return 'BatchResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->items = array();
            $_size297 = 0;
            $_etype300 = 0;
            $xfer += $input->readListBegin($_etype300, $_size297);
            for ($_i301 = 0; $_i301 < $_size297; ++$_i301)
            {
              $elem302 = null;
              $elem302 = new \SDS\Table\BatchResultItem();
              $xfer += $elem302->read($input);
              $this->items []= $elem302;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BatchResult');
    if ($this->items !== null) {
      if (!is_array($this->items)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('items', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->items));
        {
          foreach ($this->items as $iter303)
          {
            $xfer += $iter303->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 增量操作单元
 */
class EditDatum {
  static $_TSPEC;

  /**
   * 增量操作类型
   * 
   * @var int
   */
  public $editType = null;
  /**
   * 增量操作单元的数据
   * 
   * @var \SDS\Table\Datum
   */
  public $datum = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'editType',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'datum',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\Datum',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['editType'])) {
        $this->editType = $vals['editType'];
      }
      if (isset($vals['datum'])) {
        $this->datum = $vals['datum'];
      }
    }
  }

  public function getName() {
    return 'EditDatum';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->editType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->datum = new \SDS\Table\Datum();
            $xfer += $this->datum->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EditDatum');
    if ($this->editType !== null) {
      $xfer += $output->writeFieldBegin('editType', TType::I32, 1);
      $xfer += $output->writeI32($this->editType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->datum !== null) {
      if (!is_object($this->datum)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('datum', TType::STRUCT, 2);
      $xfer += $this->datum->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 行级别的增量操作
 */
class RowEdit {
  static $_TSPEC;

  /**
   * 增量操作行的主键
   * 
   * @var array
   */
  public $keys = null;
  /**
   * 增量操作行的属性
   * 
   * @var array
   */
  public $edits = null;
  /**
   * 增量偏移
   * 
   * @var int
   */
  public $consumeOffset = null;
  /**
   * 是否删除整行
   * 
   * @var bool
   */
  public $deleteRow = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        2 => array(
          'var' => 'edits',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\EditDatum',
            ),
          ),
        3 => array(
          'var' => 'consumeOffset',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'deleteRow',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['edits'])) {
        $this->edits = $vals['edits'];
      }
      if (isset($vals['consumeOffset'])) {
        $this->consumeOffset = $vals['consumeOffset'];
      }
      if (isset($vals['deleteRow'])) {
        $this->deleteRow = $vals['deleteRow'];
      }
    }
  }

  public function getName() {
    return 'RowEdit';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->keys = array();
            $_size304 = 0;
            $_ktype305 = 0;
            $_vtype306 = 0;
            $xfer += $input->readMapBegin($_ktype305, $_vtype306, $_size304);
            for ($_i308 = 0; $_i308 < $_size304; ++$_i308)
            {
              $key309 = '';
              $val310 = new \SDS\Table\Datum();
              $xfer += $input->readString($key309);
              $val310 = new \SDS\Table\Datum();
              $xfer += $val310->read($input);
              $this->keys[$key309] = $val310;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->edits = array();
            $_size311 = 0;
            $_ktype312 = 0;
            $_vtype313 = 0;
            $xfer += $input->readMapBegin($_ktype312, $_vtype313, $_size311);
            for ($_i315 = 0; $_i315 < $_size311; ++$_i315)
            {
              $key316 = '';
              $val317 = new \SDS\Table\EditDatum();
              $xfer += $input->readString($key316);
              $val317 = new \SDS\Table\EditDatum();
              $xfer += $val317->read($input);
              $this->edits[$key316] = $val317;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->consumeOffset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->deleteRow);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RowEdit');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->keys));
        {
          foreach ($this->keys as $kiter318 => $viter319)
          {
            $xfer += $output->writeString($kiter318);
            $xfer += $viter319->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->edits !== null) {
      if (!is_array($this->edits)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('edits', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->edits));
        {
          foreach ($this->edits as $kiter320 => $viter321)
          {
            $xfer += $output->writeString($kiter320);
            $xfer += $viter321->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->consumeOffset !== null) {
      $xfer += $output->writeFieldBegin('consumeOffset', TType::I64, 3);
      $xfer += $output->writeI64($this->consumeOffset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deleteRow !== null) {
      $xfer += $output->writeFieldBegin('deleteRow', TType::BOOL, 4);
      $xfer += $output->writeBool($this->deleteRow);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 存量数据的消费请求
 */
class DataConsumeRequest {
  static $_TSPEC;

  /**
   * 表名
   * 
   * @var string
   */
  public $tableName = null;
  /**
   * 表分区ID
   * 
   * @var int
   */
  public $partitionId = null;
  /**
   * 订阅者名字
   * 
   * @var string
   */
  public $subscriberName = null;
  /**
   * 消费数量
   * 
   * @var int
   */
  public $consumeNumber = null;
  /**
   * 消费偏移
   * 
   * @var array
   */
  public $consumeOffset = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'partitionId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'subscriberName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'consumeNumber',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'consumeOffset',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
      if (isset($vals['partitionId'])) {
        $this->partitionId = $vals['partitionId'];
      }
      if (isset($vals['subscriberName'])) {
        $this->subscriberName = $vals['subscriberName'];
      }
      if (isset($vals['consumeNumber'])) {
        $this->consumeNumber = $vals['consumeNumber'];
      }
      if (isset($vals['consumeOffset'])) {
        $this->consumeOffset = $vals['consumeOffset'];
      }
    }
  }

  public function getName() {
    return 'DataConsumeRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->partitionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->subscriberName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->consumeNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::MAP) {
            $this->consumeOffset = array();
            $_size322 = 0;
            $_ktype323 = 0;
            $_vtype324 = 0;
            $xfer += $input->readMapBegin($_ktype323, $_vtype324, $_size322);
            for ($_i326 = 0; $_i326 < $_size322; ++$_i326)
            {
              $key327 = '';
              $val328 = new \SDS\Table\Datum();
              $xfer += $input->readString($key327);
              $val328 = new \SDS\Table\Datum();
              $xfer += $val328->read($input);
              $this->consumeOffset[$key327] = $val328;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DataConsumeRequest');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->partitionId !== null) {
      $xfer += $output->writeFieldBegin('partitionId', TType::I32, 2);
      $xfer += $output->writeI32($this->partitionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subscriberName !== null) {
      $xfer += $output->writeFieldBegin('subscriberName', TType::STRING, 3);
      $xfer += $output->writeString($this->subscriberName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->consumeNumber !== null) {
      $xfer += $output->writeFieldBegin('consumeNumber', TType::I32, 4);
      $xfer += $output->writeI32($this->consumeNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->consumeOffset !== null) {
      if (!is_array($this->consumeOffset)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('consumeOffset', TType::MAP, 5);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->consumeOffset));
        {
          foreach ($this->consumeOffset as $kiter329 => $viter330)
          {
            $xfer += $output->writeString($kiter329);
            $xfer += $viter330->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DataConsumeResult {
  static $_TSPEC;

  /**
   * 下一个开始消费的存量数据的偏移，NULL表示达到当前表分片的结束位置
   * 
   * @var array
   */
  public $nextConsumeOffset = null;
  /**
   * 消费的存量数据
   * 
   * @var array[]
   */
  public $records = null;
  /**
   * 表的主键属性
   * 
   * @var string[]
   */
  public $keys = null;
  /**
   * 是否超过表的qps quota
   * 
   * @var bool
   */
  public $throttled = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'nextConsumeOffset',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::MAP,
          'elem' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\SDS\Table\Datum',
              ),
            ),
          ),
        3 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'throttled',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['nextConsumeOffset'])) {
        $this->nextConsumeOffset = $vals['nextConsumeOffset'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['throttled'])) {
        $this->throttled = $vals['throttled'];
      }
    }
  }

  public function getName() {
    return 'DataConsumeResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->nextConsumeOffset = array();
            $_size331 = 0;
            $_ktype332 = 0;
            $_vtype333 = 0;
            $xfer += $input->readMapBegin($_ktype332, $_vtype333, $_size331);
            for ($_i335 = 0; $_i335 < $_size331; ++$_i335)
            {
              $key336 = '';
              $val337 = new \SDS\Table\Datum();
              $xfer += $input->readString($key336);
              $val337 = new \SDS\Table\Datum();
              $xfer += $val337->read($input);
              $this->nextConsumeOffset[$key336] = $val337;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size338 = 0;
            $_etype341 = 0;
            $xfer += $input->readListBegin($_etype341, $_size338);
            for ($_i342 = 0; $_i342 < $_size338; ++$_i342)
            {
              $elem343 = null;
              $elem343 = array();
              $_size344 = 0;
              $_ktype345 = 0;
              $_vtype346 = 0;
              $xfer += $input->readMapBegin($_ktype345, $_vtype346, $_size344);
              for ($_i348 = 0; $_i348 < $_size344; ++$_i348)
              {
                $key349 = '';
                $val350 = new \SDS\Table\Datum();
                $xfer += $input->readString($key349);
                $val350 = new \SDS\Table\Datum();
                $xfer += $val350->read($input);
                $elem343[$key349] = $val350;
              }
              $xfer += $input->readMapEnd();
              $this->records []= $elem343;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size351 = 0;
            $_etype354 = 0;
            $xfer += $input->readListBegin($_etype354, $_size351);
            for ($_i355 = 0; $_i355 < $_size351; ++$_i355)
            {
              $elem356 = null;
              $xfer += $input->readString($elem356);
              $this->keys []= $elem356;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->throttled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DataConsumeResult');
    if ($this->nextConsumeOffset !== null) {
      if (!is_array($this->nextConsumeOffset)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('nextConsumeOffset', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->nextConsumeOffset));
        {
          foreach ($this->nextConsumeOffset as $kiter357 => $viter358)
          {
            $xfer += $output->writeString($kiter357);
            $xfer += $viter358->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::MAP, count($this->records));
        {
          foreach ($this->records as $iter359)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($iter359));
              {
                foreach ($iter359 as $kiter360 => $viter361)
                {
                  $xfer += $output->writeString($kiter360);
                  $xfer += $viter361->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter362)
          {
            $xfer += $output->writeString($iter362);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->throttled !== null) {
      $xfer += $output->writeFieldBegin('throttled', TType::BOOL, 4);
      $xfer += $output->writeBool($this->throttled);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 增量数据的消费请求
 */
class EditConsumeRequest {
  static $_TSPEC;

  /**
   * 表名
   * 
   * @var string
   */
  public $tableName = null;
  /**
   * 表分区ID
   * 
   * @var int
   */
  public $partitionId = null;
  /**
   * 订阅者名字
   * 
   * @var string
   */
  public $subscriberName = null;
  /**
   * 消费数量
   * 
   * @var int
   */
  public $consumeNumber = null;
  /**
   * 消费偏移
   * 
   * @var int
   */
  public $consumeOffset = -1;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'partitionId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'subscriberName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'consumeNumber',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'consumeOffset',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
      if (isset($vals['partitionId'])) {
        $this->partitionId = $vals['partitionId'];
      }
      if (isset($vals['subscriberName'])) {
        $this->subscriberName = $vals['subscriberName'];
      }
      if (isset($vals['consumeNumber'])) {
        $this->consumeNumber = $vals['consumeNumber'];
      }
      if (isset($vals['consumeOffset'])) {
        $this->consumeOffset = $vals['consumeOffset'];
      }
    }
  }

  public function getName() {
    return 'EditConsumeRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->partitionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->subscriberName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->consumeNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->consumeOffset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EditConsumeRequest');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->partitionId !== null) {
      $xfer += $output->writeFieldBegin('partitionId', TType::I32, 2);
      $xfer += $output->writeI32($this->partitionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subscriberName !== null) {
      $xfer += $output->writeFieldBegin('subscriberName', TType::STRING, 3);
      $xfer += $output->writeString($this->subscriberName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->consumeNumber !== null) {
      $xfer += $output->writeFieldBegin('consumeNumber', TType::I32, 4);
      $xfer += $output->writeI32($this->consumeNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->consumeOffset !== null) {
      $xfer += $output->writeFieldBegin('consumeOffset', TType::I64, 5);
      $xfer += $output->writeI64($this->consumeOffset);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EditConsumeResult {
  static $_TSPEC;

  /**
   * 下一个开始消费的增量数据的偏移，NULL表示达到当前表分片的结束位置
   * 
   * @var int
   */
  public $nextConsumeOffset = null;
  /**
   * 消费的增量数据
   * 
   * @var \SDS\Table\RowEdit[]
   */
  public $rowEdits = null;
  /**
   * 是否超过表的qps quota
   * 
   * @var bool
   */
  public $throttled = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'nextConsumeOffset',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'rowEdits',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\RowEdit',
            ),
          ),
        3 => array(
          'var' => 'throttled',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['nextConsumeOffset'])) {
        $this->nextConsumeOffset = $vals['nextConsumeOffset'];
      }
      if (isset($vals['rowEdits'])) {
        $this->rowEdits = $vals['rowEdits'];
      }
      if (isset($vals['throttled'])) {
        $this->throttled = $vals['throttled'];
      }
    }
  }

  public function getName() {
    return 'EditConsumeResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->nextConsumeOffset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->rowEdits = array();
            $_size363 = 0;
            $_etype366 = 0;
            $xfer += $input->readListBegin($_etype366, $_size363);
            for ($_i367 = 0; $_i367 < $_size363; ++$_i367)
            {
              $elem368 = null;
              $elem368 = new \SDS\Table\RowEdit();
              $xfer += $elem368->read($input);
              $this->rowEdits []= $elem368;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->throttled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EditConsumeResult');
    if ($this->nextConsumeOffset !== null) {
      $xfer += $output->writeFieldBegin('nextConsumeOffset', TType::I64, 1);
      $xfer += $output->writeI64($this->nextConsumeOffset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rowEdits !== null) {
      if (!is_array($this->rowEdits)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('rowEdits', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->rowEdits));
        {
          foreach ($this->rowEdits as $iter369)
          {
            $xfer += $iter369->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->throttled !== null) {
      $xfer += $output->writeFieldBegin('throttled', TType::BOOL, 3);
      $xfer += $output->writeBool($this->throttled);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 存量数据的消费请求回执
 */
class DataCommitRequest {
  static $_TSPEC;

  /**
   * 表名
   * 
   * @var string
   */
  public $tableName = null;
  /**
   * 表分区ID
   * 
   * @var int
   */
  public $partitionId = null;
  /**
   * 订阅者名字
   * 
   * @var string
   */
  public $subscriberName = null;
  /**
   * 当前消费存量数据的最后偏移
   * 
   * @var array
   */
  public $lastConsumedOffset = null;
  /**
   * 确认消费数量
   * 
   * @var int
   */
  public $commitNumber = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'partitionId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'subscriberName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'lastConsumedOffset',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        5 => array(
          'var' => 'commitNumber',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
      if (isset($vals['partitionId'])) {
        $this->partitionId = $vals['partitionId'];
      }
      if (isset($vals['subscriberName'])) {
        $this->subscriberName = $vals['subscriberName'];
      }
      if (isset($vals['lastConsumedOffset'])) {
        $this->lastConsumedOffset = $vals['lastConsumedOffset'];
      }
      if (isset($vals['commitNumber'])) {
        $this->commitNumber = $vals['commitNumber'];
      }
    }
  }

  public function getName() {
    return 'DataCommitRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->partitionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->subscriberName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->lastConsumedOffset = array();
            $_size370 = 0;
            $_ktype371 = 0;
            $_vtype372 = 0;
            $xfer += $input->readMapBegin($_ktype371, $_vtype372, $_size370);
            for ($_i374 = 0; $_i374 < $_size370; ++$_i374)
            {
              $key375 = '';
              $val376 = new \SDS\Table\Datum();
              $xfer += $input->readString($key375);
              $val376 = new \SDS\Table\Datum();
              $xfer += $val376->read($input);
              $this->lastConsumedOffset[$key375] = $val376;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commitNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DataCommitRequest');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->partitionId !== null) {
      $xfer += $output->writeFieldBegin('partitionId', TType::I32, 2);
      $xfer += $output->writeI32($this->partitionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subscriberName !== null) {
      $xfer += $output->writeFieldBegin('subscriberName', TType::STRING, 3);
      $xfer += $output->writeString($this->subscriberName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastConsumedOffset !== null) {
      if (!is_array($this->lastConsumedOffset)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lastConsumedOffset', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->lastConsumedOffset));
        {
          foreach ($this->lastConsumedOffset as $kiter377 => $viter378)
          {
            $xfer += $output->writeString($kiter377);
            $xfer += $viter378->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commitNumber !== null) {
      $xfer += $output->writeFieldBegin('commitNumber', TType::I32, 5);
      $xfer += $output->writeI32($this->commitNumber);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DataCommitResult {
  static $_TSPEC;

  /**
   * 消费请求回执是否被服务器成功接收
   * 
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'DataCommitResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DataCommitResult');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 1);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 增量数据的消费请求回执
 */
class EditCommitRequest {
  static $_TSPEC;

  /**
   * 表名
   * 
   * @var string
   */
  public $tableName = null;
  /**
   * 表分区ID
   * 
   * @var int
   */
  public $partitionId = null;
  /**
   * 订阅者名字
   * 
   * @var string
   */
  public $subscriberName = null;
  /**
   * 当前消费增量数据的最后偏移
   * 
   * @var int
   */
  public $lastConsumedOffset = null;
  /**
   * 确认消费数量
   * 
   * @var int
   */
  public $commitNumber = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'partitionId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'subscriberName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'lastConsumedOffset',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'commitNumber',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
      if (isset($vals['partitionId'])) {
        $this->partitionId = $vals['partitionId'];
      }
      if (isset($vals['subscriberName'])) {
        $this->subscriberName = $vals['subscriberName'];
      }
      if (isset($vals['lastConsumedOffset'])) {
        $this->lastConsumedOffset = $vals['lastConsumedOffset'];
      }
      if (isset($vals['commitNumber'])) {
        $this->commitNumber = $vals['commitNumber'];
      }
    }
  }

  public function getName() {
    return 'EditCommitRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->partitionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->subscriberName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastConsumedOffset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commitNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EditCommitRequest');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->partitionId !== null) {
      $xfer += $output->writeFieldBegin('partitionId', TType::I32, 2);
      $xfer += $output->writeI32($this->partitionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subscriberName !== null) {
      $xfer += $output->writeFieldBegin('subscriberName', TType::STRING, 3);
      $xfer += $output->writeString($this->subscriberName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastConsumedOffset !== null) {
      $xfer += $output->writeFieldBegin('lastConsumedOffset', TType::I64, 4);
      $xfer += $output->writeI64($this->lastConsumedOffset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commitNumber !== null) {
      $xfer += $output->writeFieldBegin('commitNumber', TType::I32, 5);
      $xfer += $output->writeI32($this->commitNumber);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EditCommitResult {
  static $_TSPEC;

  /**
   * 消费请求回执是否被服务器成功接收
   * 
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'EditCommitResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EditCommitResult');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 1);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConsumedOffset {
  static $_TSPEC;

  /**
   * 当前存量数据的消费偏移
   * 
   * @var array
   */
  public $consumedDataOffset = null;
  /**
   * 存量数据是否消费完毕
   * 
   * @var bool
   */
  public $dataConsumeFinished = null;
  /**
   * 当前增量数据的消费偏移
   * 
   * @var int
   */
  public $consumedEditOffset = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'consumedDataOffset',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        2 => array(
          'var' => 'dataConsumeFinished',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'consumedEditOffset',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['consumedDataOffset'])) {
        $this->consumedDataOffset = $vals['consumedDataOffset'];
      }
      if (isset($vals['dataConsumeFinished'])) {
        $this->dataConsumeFinished = $vals['dataConsumeFinished'];
      }
      if (isset($vals['consumedEditOffset'])) {
        $this->consumedEditOffset = $vals['consumedEditOffset'];
      }
    }
  }

  public function getName() {
    return 'ConsumedOffset';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->consumedDataOffset = array();
            $_size379 = 0;
            $_ktype380 = 0;
            $_vtype381 = 0;
            $xfer += $input->readMapBegin($_ktype380, $_vtype381, $_size379);
            for ($_i383 = 0; $_i383 < $_size379; ++$_i383)
            {
              $key384 = '';
              $val385 = new \SDS\Table\Datum();
              $xfer += $input->readString($key384);
              $val385 = new \SDS\Table\Datum();
              $xfer += $val385->read($input);
              $this->consumedDataOffset[$key384] = $val385;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->dataConsumeFinished);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->consumedEditOffset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConsumedOffset');
    if ($this->consumedDataOffset !== null) {
      if (!is_array($this->consumedDataOffset)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('consumedDataOffset', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->consumedDataOffset));
        {
          foreach ($this->consumedDataOffset as $kiter386 => $viter387)
          {
            $xfer += $output->writeString($kiter386);
            $xfer += $viter387->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataConsumeFinished !== null) {
      $xfer += $output->writeFieldBegin('dataConsumeFinished', TType::BOOL, 2);
      $xfer += $output->writeBool($this->dataConsumeFinished);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->consumedEditOffset !== null) {
      $xfer += $output->writeFieldBegin('consumedEditOffset', TType::I64, 3);
      $xfer += $output->writeI64($this->consumedEditOffset);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommittedOffset {
  static $_TSPEC;

  /**
   * 当前存量数据已确认的消费偏移
   * 
   * @var array
   */
  public $committedDataOffset = null;
  /**
   * 存量数据是否确认消费完毕
   * 
   * @var bool
   */
  public $dataCommitFinished = null;
  /**
   * 当前增量数据已确认的消费偏移
   * 
   * @var int
   */
  public $committedEditOffset = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'committedDataOffset',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        2 => array(
          'var' => 'dataCommitFinished',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'committedEditOffset',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['committedDataOffset'])) {
        $this->committedDataOffset = $vals['committedDataOffset'];
      }
      if (isset($vals['dataCommitFinished'])) {
        $this->dataCommitFinished = $vals['dataCommitFinished'];
      }
      if (isset($vals['committedEditOffset'])) {
        $this->committedEditOffset = $vals['committedEditOffset'];
      }
    }
  }

  public function getName() {
    return 'CommittedOffset';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->committedDataOffset = array();
            $_size388 = 0;
            $_ktype389 = 0;
            $_vtype390 = 0;
            $xfer += $input->readMapBegin($_ktype389, $_vtype390, $_size388);
            for ($_i392 = 0; $_i392 < $_size388; ++$_i392)
            {
              $key393 = '';
              $val394 = new \SDS\Table\Datum();
              $xfer += $input->readString($key393);
              $val394 = new \SDS\Table\Datum();
              $xfer += $val394->read($input);
              $this->committedDataOffset[$key393] = $val394;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->dataCommitFinished);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->committedEditOffset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommittedOffset');
    if ($this->committedDataOffset !== null) {
      if (!is_array($this->committedDataOffset)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('committedDataOffset', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->committedDataOffset));
        {
          foreach ($this->committedDataOffset as $kiter395 => $viter396)
          {
            $xfer += $output->writeString($kiter395);
            $xfer += $viter396->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataCommitFinished !== null) {
      $xfer += $output->writeFieldBegin('dataCommitFinished', TType::BOOL, 2);
      $xfer += $output->writeBool($this->dataCommitFinished);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->committedEditOffset !== null) {
      $xfer += $output->writeFieldBegin('committedEditOffset', TType::I64, 3);
      $xfer += $output->writeI64($this->committedEditOffset);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


