<?php
namespace SDS\Table;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * 数据类型
 */
final class DataType {
  /**
   * 布尔类型
   */
  const BOOL = 1;
  /**
   * 1字节整形
   */
  const INT8 = 2;
  /**
   * 2字节整形
   */
  const INT16 = 3;
  /**
   * 4字节整形
   */
  const INT32 = 4;
  /**
   * 8字节整形
   */
  const INT64 = 5;
  /**
   * 单精度浮点类型
   */
  const FLOAT = 6;
  /**
   * 双精度浮点类型
   */
  const DOUBLE = 7;
  /**
   * 字符串类型
   */
  const STRING = 8;
  /**
   * 编码二进制类型，可用做索引属性
   */
  const BINARY = 9;
  /**
   * 原生二进制类型，存储序列化开销最小，不能包含'0x00'数据，不可用做索引
   */
  const RAWBINARY = 10;
  /**
   * 布尔类型集合
   */
  const BOOL_SET = 100;
  /**
   * 1字节整形集合
   */
  const INT8_SET = 101;
  /**
   * 2字节整形集合
   */
  const INT16_SET = 102;
  /**
   * 4字节整形集合
   */
  const INT32_SET = 103;
  /**
   * 8字节整形集合
   */
  const INT64_SET = 104;
  /**
   * 单精度浮点集合
   */
  const FLOAT_SET = 105;
  /**
   * 双精度浮点集合
   */
  const DOUBLE_SET = 106;
  /**
   * 字符串集合
   */
  const STRING_SET = 107;
  /**
   * 编码二进制集合
   */
  const BINARY_SET = 108;
  static public $__names = array(
    1 => 'BOOL',
    2 => 'INT8',
    3 => 'INT16',
    4 => 'INT32',
    5 => 'INT64',
    6 => 'FLOAT',
    7 => 'DOUBLE',
    8 => 'STRING',
    9 => 'BINARY',
    10 => 'RAWBINARY',
    100 => 'BOOL_SET',
    101 => 'INT8_SET',
    102 => 'INT16_SET',
    103 => 'INT32_SET',
    104 => 'INT64_SET',
    105 => 'FLOAT_SET',
    106 => 'DOUBLE_SET',
    107 => 'STRING_SET',
    108 => 'BINARY_SET',
  );
}

/**
 * 操作符类型
 */
final class OperatorType {
  /**
   * 等于
   */
  const EQUAL = 1;
  /**
   * 不等于
   */
  const NOT_EQUAL = 2;
  /**
   * 大于
   */
  const GREATER = 3;
  /**
   * 大于等于
   */
  const GREATER_OR_EQUAL = 4;
  /**
   * 小于
   */
  const LESS = 5;
  /**
   * 小于等于
   */
  const LESS_OR_EQUAL = 6;
  static public $__names = array(
    1 => 'EQUAL',
    2 => 'NOT_EQUAL',
    3 => 'GREATER',
    4 => 'GREATER_OR_EQUAL',
    5 => 'LESS',
    6 => 'LESS_OR_EQUAL',
  );
}

/**
 * 索引数据一致性类型
 */
final class SecondaryIndexConsistencyMode {
  /**
   * 读取时判断索引一致性，此模式不能进行属性projection
   */
  const LAZY = 0;
  /**
   * 写入时保持索引一致性
   */
  const EAGER = 1;
  /**
   * 适用于只读数据，写入后不再修改，写入时采用LAZY方式，读
   * 取时采用EAGER方式
   */
  const IMMUTABLE = 2;
  static public $__names = array(
    0 => 'LAZY',
    1 => 'EAGER',
    2 => 'IMMUTABLE',
  );
}

/**
 * ACL模板，针对每个应用进行设置，
 * 开发者登录可以访问所拥有的表数据，无需额外设置
 */
final class CannedAcl {
  /**
   * App Secret登录读整表权限
   */
  const APP_SECRET_READ = 1;
  /**
   * App Secret登录写整表权限
   */
  const APP_SECRET_WRITE = 2;
  /**
   * 应用登录用户对Entity Group等于用户ID的记录的读权限，
   * 如果表没有设置Entity Group支持，此设置无效，
   * 授权后，不自动授予App Secret登录对应权限，必须单独设置
   */
  const APP_USER_ENTITY_GROUP_READ = 3;
  /**
   * 应用登录用户对Entity Group等于用户ID的记录的写权限，
   * 如果表没有设置Entity Group支持，此设置无效，
   * 授权后，不自动授予App Secret登录对应权限，必须单独设置
   */
  const APP_USER_ENTITY_GROUP_WRITE = 4;
  /**
   * 应用登录用户读整表权限(授权后，App Secret登录会自动拥有对应权限)
   */
  const APP_USER_READ = 5;
  /**
   * 应用登录用户写整表权限(授权后，App Secret登录会自动拥有对应权限)
   */
  const APP_USER_WRITE = 6;
  /**
   * 匿名用户读整表权限(授权后，App登录用户和App Secret登录用户会自动拥有对应权限)
   */
  const PUBLIC_READ = 7;
  /**
   * 匿名用户写整表权限(授权后，App登录用户和App Secret登录用户会自动拥有对应权限)
   */
  const PUBLIC_WRITE = 8;
  static public $__names = array(
    1 => 'APP_SECRET_READ',
    2 => 'APP_SECRET_WRITE',
    3 => 'APP_USER_ENTITY_GROUP_READ',
    4 => 'APP_USER_ENTITY_GROUP_WRITE',
    5 => 'APP_USER_READ',
    6 => 'APP_USER_WRITE',
    7 => 'PUBLIC_READ',
    8 => 'PUBLIC_WRITE',
  );
}

/**
 * stream view type
 */
final class StreamViewType {
  const RECORD_IMAGE = 1;
  const MUTATE_LOG = 2;
  static public $__names = array(
    1 => 'RECORD_IMAGE',
    2 => 'MUTATE_LOG',
  );
}

/**
 * 表状态
 */
final class TableState {
  /**
   * 正在创建，不可操作
   */
  const CREATING = 1;
  /**
   * 正在开启，不可操作
   */
  const ENABLING = 2;
  /**
   * 开启状态，可读写
   */
  const ENABLED = 3;
  /**
   * 正在关闭，不可操作
   */
  const DISABLING = 4;
  /**
   * 关闭状态，不可读写
   */
  const DISABLED = 5;
  /**
   * 正在删除，不可见
   */
  const DELETING = 6;
  /**
   * 已删除，不可见
   */
  const DELETED = 7;
  /**
   * 延迟删除, 可见
   */
  const LAZY_DELETE = 8;
  /**
   * 正在重命名，不可操作
   */
  const RENAMING = 9;
  static public $__names = array(
    1 => 'CREATING',
    2 => 'ENABLING',
    3 => 'ENABLED',
    4 => 'DISABLING',
    5 => 'DISABLED',
    6 => 'DELETING',
    7 => 'DELETED',
    8 => 'LAZY_DELETE',
    9 => 'RENAMING',
  );
}

/**
 * 快照状态
 */
final class SnapshotState {
  /**
   * 开启状态，可操作
   */
  const ENABLED = 1;
  /**
   * 正在创建，不可操作
   */
  const INPROGRESS = 2;
  static public $__names = array(
    1 => 'ENABLED',
    2 => 'INPROGRESS',
  );
}

final class ScanOp {
  /**
   * 统计满足查询条件的记录数
   */
  const COUNT = 0;
  /**
   * 删除满足查询条件的记录
   */
  const DELETE = 1;
  /**
   * 更新满足条件的记录
   */
  const UPDATE = 2;
  static public $__names = array(
    0 => 'COUNT',
    1 => 'DELETE',
    2 => 'UPDATE',
  );
}

final class BatchOp {
  const GET = 1;
  const PUT = 2;
  const INCREMENT = 3;
  const REMOVE = 4;
  static public $__names = array(
    1 => 'GET',
    2 => 'PUT',
    3 => 'INCREMENT',
    4 => 'REMOVE',
  );
}

/**
 * mutation type
 */
final class MutationType {
  const PUT = 1;
  const DELETE = 2;
  const INCREMENT = 3;
  static public $__names = array(
    1 => 'PUT',
    2 => 'DELETE',
    3 => 'INCREMENT',
  );
}

/**
 * 数据值union类型
 */
class Value {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $boolValue = null;
  /**
   * @var int
   */
  public $int8Value = null;
  /**
   * @var int
   */
  public $int16Value = null;
  /**
   * @var int
   */
  public $int32Value = null;
  /**
   * @var int
   */
  public $int64Value = null;
  /**
   * 用于FLOAT/DOUBLE类型
   * 
   * @var double
   */
  public $doubleValue = null;
  /**
   * @var string
   */
  public $stringValue = null;
  /**
   * 用于BINARY/RAWBINARY类型
   * 
   * @var string
   */
  public $binaryValue = null;
  /**
   * @var bool[]
   */
  public $boolSetValue = null;
  /**
   * @var int[]
   */
  public $int8SetValue = null;
  /**
   * @var int[]
   */
  public $int16SetValue = null;
  /**
   * @var int[]
   */
  public $int32SetValue = null;
  /**
   * @var int[]
   */
  public $int64SetValue = null;
  /**
   * 用于FLOAT/DOUBLE类型集合
   * 
   * @var double[]
   */
  public $doubleSetValue = null;
  /**
   * @var string[]
   */
  public $stringSetValue = null;
  /**
   * @var string[]
   */
  public $binarySetValue = null;
  /**
   * null，只用于RC_BASIC存储格式
   * 
   * @var bool
   */
  public $nullValue = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'boolValue',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'int8Value',
          'type' => TType::BYTE,
          ),
        3 => array(
          'var' => 'int16Value',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'int32Value',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'int64Value',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'doubleValue',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'stringValue',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'binaryValue',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'boolSetValue',
          'type' => TType::LST,
          'etype' => TType::BOOL,
          'elem' => array(
            'type' => TType::BOOL,
            ),
          ),
        10 => array(
          'var' => 'int8SetValue',
          'type' => TType::LST,
          'etype' => TType::BYTE,
          'elem' => array(
            'type' => TType::BYTE,
            ),
          ),
        11 => array(
          'var' => 'int16SetValue',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        12 => array(
          'var' => 'int32SetValue',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        13 => array(
          'var' => 'int64SetValue',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        14 => array(
          'var' => 'doubleSetValue',
          'type' => TType::LST,
          'etype' => TType::DOUBLE,
          'elem' => array(
            'type' => TType::DOUBLE,
            ),
          ),
        15 => array(
          'var' => 'stringSetValue',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        16 => array(
          'var' => 'binarySetValue',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        20 => array(
          'var' => 'nullValue',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['boolValue'])) {
        $this->boolValue = $vals['boolValue'];
      }
      if (isset($vals['int8Value'])) {
        $this->int8Value = $vals['int8Value'];
      }
      if (isset($vals['int16Value'])) {
        $this->int16Value = $vals['int16Value'];
      }
      if (isset($vals['int32Value'])) {
        $this->int32Value = $vals['int32Value'];
      }
      if (isset($vals['int64Value'])) {
        $this->int64Value = $vals['int64Value'];
      }
      if (isset($vals['doubleValue'])) {
        $this->doubleValue = $vals['doubleValue'];
      }
      if (isset($vals['stringValue'])) {
        $this->stringValue = $vals['stringValue'];
      }
      if (isset($vals['binaryValue'])) {
        $this->binaryValue = $vals['binaryValue'];
      }
      if (isset($vals['boolSetValue'])) {
        $this->boolSetValue = $vals['boolSetValue'];
      }
      if (isset($vals['int8SetValue'])) {
        $this->int8SetValue = $vals['int8SetValue'];
      }
      if (isset($vals['int16SetValue'])) {
        $this->int16SetValue = $vals['int16SetValue'];
      }
      if (isset($vals['int32SetValue'])) {
        $this->int32SetValue = $vals['int32SetValue'];
      }
      if (isset($vals['int64SetValue'])) {
        $this->int64SetValue = $vals['int64SetValue'];
      }
      if (isset($vals['doubleSetValue'])) {
        $this->doubleSetValue = $vals['doubleSetValue'];
      }
      if (isset($vals['stringSetValue'])) {
        $this->stringSetValue = $vals['stringSetValue'];
      }
      if (isset($vals['binarySetValue'])) {
        $this->binarySetValue = $vals['binarySetValue'];
      }
      if (isset($vals['nullValue'])) {
        $this->nullValue = $vals['nullValue'];
      }
    }
  }

  public function getName() {
    return 'Value';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->boolValue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->int8Value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->int16Value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->int32Value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->int64Value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->doubleValue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->stringValue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->binaryValue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->boolSetValue = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readBool($elem5);
              $this->boolSetValue []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->int8SetValue = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $xfer += $input->readByte($elem11);
              $this->int8SetValue []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->int16SetValue = array();
            $_size12 = 0;
            $_etype15 = 0;
            $xfer += $input->readListBegin($_etype15, $_size12);
            for ($_i16 = 0; $_i16 < $_size12; ++$_i16)
            {
              $elem17 = null;
              $xfer += $input->readI16($elem17);
              $this->int16SetValue []= $elem17;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::LST) {
            $this->int32SetValue = array();
            $_size18 = 0;
            $_etype21 = 0;
            $xfer += $input->readListBegin($_etype21, $_size18);
            for ($_i22 = 0; $_i22 < $_size18; ++$_i22)
            {
              $elem23 = null;
              $xfer += $input->readI32($elem23);
              $this->int32SetValue []= $elem23;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::LST) {
            $this->int64SetValue = array();
            $_size24 = 0;
            $_etype27 = 0;
            $xfer += $input->readListBegin($_etype27, $_size24);
            for ($_i28 = 0; $_i28 < $_size24; ++$_i28)
            {
              $elem29 = null;
              $xfer += $input->readI64($elem29);
              $this->int64SetValue []= $elem29;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::LST) {
            $this->doubleSetValue = array();
            $_size30 = 0;
            $_etype33 = 0;
            $xfer += $input->readListBegin($_etype33, $_size30);
            for ($_i34 = 0; $_i34 < $_size30; ++$_i34)
            {
              $elem35 = null;
              $xfer += $input->readDouble($elem35);
              $this->doubleSetValue []= $elem35;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::LST) {
            $this->stringSetValue = array();
            $_size36 = 0;
            $_etype39 = 0;
            $xfer += $input->readListBegin($_etype39, $_size36);
            for ($_i40 = 0; $_i40 < $_size36; ++$_i40)
            {
              $elem41 = null;
              $xfer += $input->readString($elem41);
              $this->stringSetValue []= $elem41;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::LST) {
            $this->binarySetValue = array();
            $_size42 = 0;
            $_etype45 = 0;
            $xfer += $input->readListBegin($_etype45, $_size42);
            for ($_i46 = 0; $_i46 < $_size42; ++$_i46)
            {
              $elem47 = null;
              $xfer += $input->readString($elem47);
              $this->binarySetValue []= $elem47;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->nullValue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Value');
    if ($this->boolValue !== null) {
      $xfer += $output->writeFieldBegin('boolValue', TType::BOOL, 1);
      $xfer += $output->writeBool($this->boolValue);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->int8Value !== null) {
      $xfer += $output->writeFieldBegin('int8Value', TType::BYTE, 2);
      $xfer += $output->writeByte($this->int8Value);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->int16Value !== null) {
      $xfer += $output->writeFieldBegin('int16Value', TType::I16, 3);
      $xfer += $output->writeI16($this->int16Value);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->int32Value !== null) {
      $xfer += $output->writeFieldBegin('int32Value', TType::I32, 4);
      $xfer += $output->writeI32($this->int32Value);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->int64Value !== null) {
      $xfer += $output->writeFieldBegin('int64Value', TType::I64, 5);
      $xfer += $output->writeI64($this->int64Value);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->doubleValue !== null) {
      $xfer += $output->writeFieldBegin('doubleValue', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->doubleValue);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stringValue !== null) {
      $xfer += $output->writeFieldBegin('stringValue', TType::STRING, 7);
      $xfer += $output->writeString($this->stringValue);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->binaryValue !== null) {
      $xfer += $output->writeFieldBegin('binaryValue', TType::STRING, 8);
      $xfer += $output->writeString($this->binaryValue);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->boolSetValue !== null) {
      if (!is_array($this->boolSetValue)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('boolSetValue', TType::LST, 9);
      {
        $output->writeListBegin(TType::BOOL, count($this->boolSetValue));
        {
          foreach ($this->boolSetValue as $iter48)
          {
            $xfer += $output->writeBool($iter48);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->int8SetValue !== null) {
      if (!is_array($this->int8SetValue)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('int8SetValue', TType::LST, 10);
      {
        $output->writeListBegin(TType::BYTE, count($this->int8SetValue));
        {
          foreach ($this->int8SetValue as $iter49)
          {
            $xfer += $output->writeByte($iter49);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->int16SetValue !== null) {
      if (!is_array($this->int16SetValue)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('int16SetValue', TType::LST, 11);
      {
        $output->writeListBegin(TType::I16, count($this->int16SetValue));
        {
          foreach ($this->int16SetValue as $iter50)
          {
            $xfer += $output->writeI16($iter50);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->int32SetValue !== null) {
      if (!is_array($this->int32SetValue)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('int32SetValue', TType::LST, 12);
      {
        $output->writeListBegin(TType::I32, count($this->int32SetValue));
        {
          foreach ($this->int32SetValue as $iter51)
          {
            $xfer += $output->writeI32($iter51);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->int64SetValue !== null) {
      if (!is_array($this->int64SetValue)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('int64SetValue', TType::LST, 13);
      {
        $output->writeListBegin(TType::I64, count($this->int64SetValue));
        {
          foreach ($this->int64SetValue as $iter52)
          {
            $xfer += $output->writeI64($iter52);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->doubleSetValue !== null) {
      if (!is_array($this->doubleSetValue)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('doubleSetValue', TType::LST, 14);
      {
        $output->writeListBegin(TType::DOUBLE, count($this->doubleSetValue));
        {
          foreach ($this->doubleSetValue as $iter53)
          {
            $xfer += $output->writeDouble($iter53);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stringSetValue !== null) {
      if (!is_array($this->stringSetValue)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('stringSetValue', TType::LST, 15);
      {
        $output->writeListBegin(TType::STRING, count($this->stringSetValue));
        {
          foreach ($this->stringSetValue as $iter54)
          {
            $xfer += $output->writeString($iter54);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->binarySetValue !== null) {
      if (!is_array($this->binarySetValue)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('binarySetValue', TType::LST, 16);
      {
        $output->writeListBegin(TType::STRING, count($this->binarySetValue));
        {
          foreach ($this->binarySetValue as $iter55)
          {
            $xfer += $output->writeString($iter55);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nullValue !== null) {
      $xfer += $output->writeFieldBegin('nullValue', TType::BOOL, 20);
      $xfer += $output->writeBool($this->nullValue);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 数据单元
 */
class Datum {
  static $_TSPEC;

  /**
   * @var int
   */
  public $type = null;
  /**
   * @var \SDS\Table\Value
   */
  public $value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\Value',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
    }
  }

  public function getName() {
    return 'Datum';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \SDS\Table\Value();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Datum');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 吞吐量配额
 */
class ProvisionThroughput {
  static $_TSPEC;

  /**
   * @var int
   */
  public $readCapacity = null;
  /**
   * @var int
   */
  public $writeCapacity = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'readCapacity',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'writeCapacity',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['readCapacity'])) {
        $this->readCapacity = $vals['readCapacity'];
      }
      if (isset($vals['writeCapacity'])) {
        $this->writeCapacity = $vals['writeCapacity'];
      }
    }
  }

  public function getName() {
    return 'ProvisionThroughput';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->readCapacity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->writeCapacity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProvisionThroughput');
    if ($this->readCapacity !== null) {
      $xfer += $output->writeFieldBegin('readCapacity', TType::I64, 1);
      $xfer += $output->writeI64($this->readCapacity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->writeCapacity !== null) {
      $xfer += $output->writeFieldBegin('writeCapacity', TType::I64, 2);
      $xfer += $output->writeI64($this->writeCapacity);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 空间配额
 */
class TableQuota {
  static $_TSPEC;

  /**
   * 空间配额，单位为字节
   * 
   * @var int
   */
  public $size = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'size',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
    }
  }

  public function getName() {
    return 'TableQuota';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TableQuota');
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I64, 1);
      $xfer += $output->writeI64($this->size);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class KeySpec {
  static $_TSPEC;

  /**
   * @var string
   */
  public $attribute = null;
  /**
   * @var bool
   */
  public $asc = true;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'attribute',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'asc',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['attribute'])) {
        $this->attribute = $vals['attribute'];
      }
      if (isset($vals['asc'])) {
        $this->asc = $vals['asc'];
      }
    }
  }

  public function getName() {
    return 'KeySpec';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->attribute);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->asc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('KeySpec');
    if ($this->attribute !== null) {
      $xfer += $output->writeFieldBegin('attribute', TType::STRING, 1);
      $xfer += $output->writeString($this->attribute);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->asc !== null) {
      $xfer += $output->writeFieldBegin('asc', TType::BOOL, 2);
      $xfer += $output->writeBool($this->asc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 局部二级索引定义
 */
class LocalSecondaryIndexSpec {
  static $_TSPEC;

  /**
   * 索引定义
   * 
   * @var \SDS\Table\KeySpec[]
   */
  public $indexSchema = null;
  /**
   * 映射的属性，仅当索引类型为Eager时才可设置
   * 
   * @var string[]
   */
  public $projections = null;
  /**
   * 索引数据一致性模式
   * 
   * @var int
   */
  public $consistencyMode =   0;
  /**
   * 是否为唯一索引
   * 
   * @var bool
   */
  public $unique = false;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'indexSchema',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\KeySpec',
            ),
          ),
        2 => array(
          'var' => 'projections',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'consistencyMode',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'unique',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['indexSchema'])) {
        $this->indexSchema = $vals['indexSchema'];
      }
      if (isset($vals['projections'])) {
        $this->projections = $vals['projections'];
      }
      if (isset($vals['consistencyMode'])) {
        $this->consistencyMode = $vals['consistencyMode'];
      }
      if (isset($vals['unique'])) {
        $this->unique = $vals['unique'];
      }
    }
  }

  public function getName() {
    return 'LocalSecondaryIndexSpec';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->indexSchema = array();
            $_size56 = 0;
            $_etype59 = 0;
            $xfer += $input->readListBegin($_etype59, $_size56);
            for ($_i60 = 0; $_i60 < $_size56; ++$_i60)
            {
              $elem61 = null;
              $elem61 = new \SDS\Table\KeySpec();
              $xfer += $elem61->read($input);
              $this->indexSchema []= $elem61;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->projections = array();
            $_size62 = 0;
            $_etype65 = 0;
            $xfer += $input->readListBegin($_etype65, $_size62);
            for ($_i66 = 0; $_i66 < $_size62; ++$_i66)
            {
              $elem67 = null;
              $xfer += $input->readString($elem67);
              $this->projections []= $elem67;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->consistencyMode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->unique);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LocalSecondaryIndexSpec');
    if ($this->indexSchema !== null) {
      if (!is_array($this->indexSchema)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('indexSchema', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->indexSchema));
        {
          foreach ($this->indexSchema as $iter68)
          {
            $xfer += $iter68->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->projections !== null) {
      if (!is_array($this->projections)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projections', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->projections));
        {
          foreach ($this->projections as $iter69)
          {
            $xfer += $output->writeString($iter69);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->consistencyMode !== null) {
      $xfer += $output->writeFieldBegin('consistencyMode', TType::I32, 3);
      $xfer += $output->writeI32($this->consistencyMode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unique !== null) {
      $xfer += $output->writeFieldBegin('unique', TType::BOOL, 4);
      $xfer += $output->writeBool($this->unique);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * EntityGroup定义
 */
class EntityGroupSpec {
  static $_TSPEC;

  /**
   * 属性有序列表
   * 
   * @var \SDS\Table\KeySpec[]
   */
  public $attributes = null;
  /**
   * 是否对属性进行哈希分布:
   * 开启后表中记录按照(hash(attribute value), attribute value)大小顺序分布
   * 
   * @var bool
   */
  public $enableHash = true;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'attributes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\KeySpec',
            ),
          ),
        2 => array(
          'var' => 'enableHash',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
      if (isset($vals['enableHash'])) {
        $this->enableHash = $vals['enableHash'];
      }
    }
  }

  public function getName() {
    return 'EntityGroupSpec';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->attributes = array();
            $_size70 = 0;
            $_etype73 = 0;
            $xfer += $input->readListBegin($_etype73, $_size70);
            for ($_i74 = 0; $_i74 < $_size70; ++$_i74)
            {
              $elem75 = null;
              $elem75 = new \SDS\Table\KeySpec();
              $xfer += $elem75->read($input);
              $this->attributes []= $elem75;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->enableHash);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EntityGroupSpec');
    if ($this->attributes !== null) {
      if (!is_array($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->attributes));
        {
          foreach ($this->attributes as $iter76)
          {
            $xfer += $iter76->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enableHash !== null) {
      $xfer += $output->writeFieldBegin('enableHash', TType::BOOL, 2);
      $xfer += $output->writeBool($this->enableHash);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * stream specification
 */
class StreamSpec {
  static $_TSPEC;

  /**
   * stream is enable or not
   * 
   * @var bool
   */
  public $enableStream = null;
  /**
   * view type
   * 
   * @var int
   */
  public $viewType = null;
  /**
   * attribute list
   * 
   * @var string[]
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'enableStream',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'viewType',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'attributes',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['enableStream'])) {
        $this->enableStream = $vals['enableStream'];
      }
      if (isset($vals['viewType'])) {
        $this->viewType = $vals['viewType'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'StreamSpec';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->enableStream);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->viewType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->attributes = array();
            $_size77 = 0;
            $_etype80 = 0;
            $xfer += $input->readListBegin($_etype80, $_size77);
            for ($_i81 = 0; $_i81 < $_size77; ++$_i81)
            {
              $elem82 = null;
              $xfer += $input->readString($elem82);
              $this->attributes []= $elem82;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('StreamSpec');
    if ($this->enableStream !== null) {
      $xfer += $output->writeFieldBegin('enableStream', TType::BOOL, 1);
      $xfer += $output->writeBool($this->enableStream);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->viewType !== null) {
      $xfer += $output->writeFieldBegin('viewType', TType::I32, 2);
      $xfer += $output->writeI32($this->viewType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_array($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->attributes));
        {
          foreach ($this->attributes as $iter83)
          {
            $xfer += $output->writeString($iter83);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 表Schema设置
 */
class TableSchema {
  static $_TSPEC;

  /**
   * Schema版本号，仅作为输出，作为输入不需要设置
   * 
   * @var int
   */
  public $version = null;
  /**
   * Entity group定义, 不设置表示不开启Entity Group支持。
   * 开启后自动支持应用用户表空间隔离(需配合相应权限设置),
   * 即每个应用用户将看到独立的表空间
   * 
   * @var \SDS\Table\EntityGroupSpec
   */
  public $entityGroup = null;
  /**
   * 主键定义
   * 
   * @var \SDS\Table\KeySpec[]
   */
  public $primaryIndex = null;
  /**
   * 二级索引定义
   * 
   * @var array
   */
  public $secondaryIndexes = null;
  /**
   * 属性定义
   * 
   * @var array
   */
  public $attributes = null;
  /**
   * 记录存活时间，单位为秒。-1表示不会自动删除
   * 
   * @var int
   */
  public $ttl = -1;
  /**
   * 表初始分片数目，仅支持Entity Group开启hash分布的表，且仅在建表时起作用
   * 
   * @var int
   */
  public $preSplits = 1;
  /**
   * stream定义, TopicName => StreamSpec
   * 
   * @var array
   */
  public $streams = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'version',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'entityGroup',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\EntityGroupSpec',
          ),
        3 => array(
          'var' => 'primaryIndex',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\KeySpec',
            ),
          ),
        4 => array(
          'var' => 'secondaryIndexes',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\LocalSecondaryIndexSpec',
            ),
          ),
        5 => array(
          'var' => 'attributes',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        6 => array(
          'var' => 'ttl',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'preSplits',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'streams',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\StreamSpec',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['entityGroup'])) {
        $this->entityGroup = $vals['entityGroup'];
      }
      if (isset($vals['primaryIndex'])) {
        $this->primaryIndex = $vals['primaryIndex'];
      }
      if (isset($vals['secondaryIndexes'])) {
        $this->secondaryIndexes = $vals['secondaryIndexes'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
      if (isset($vals['ttl'])) {
        $this->ttl = $vals['ttl'];
      }
      if (isset($vals['preSplits'])) {
        $this->preSplits = $vals['preSplits'];
      }
      if (isset($vals['streams'])) {
        $this->streams = $vals['streams'];
      }
    }
  }

  public function getName() {
    return 'TableSchema';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->entityGroup = new \SDS\Table\EntityGroupSpec();
            $xfer += $this->entityGroup->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->primaryIndex = array();
            $_size84 = 0;
            $_etype87 = 0;
            $xfer += $input->readListBegin($_etype87, $_size84);
            for ($_i88 = 0; $_i88 < $_size84; ++$_i88)
            {
              $elem89 = null;
              $elem89 = new \SDS\Table\KeySpec();
              $xfer += $elem89->read($input);
              $this->primaryIndex []= $elem89;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->secondaryIndexes = array();
            $_size90 = 0;
            $_ktype91 = 0;
            $_vtype92 = 0;
            $xfer += $input->readMapBegin($_ktype91, $_vtype92, $_size90);
            for ($_i94 = 0; $_i94 < $_size90; ++$_i94)
            {
              $key95 = '';
              $val96 = new \SDS\Table\LocalSecondaryIndexSpec();
              $xfer += $input->readString($key95);
              $val96 = new \SDS\Table\LocalSecondaryIndexSpec();
              $xfer += $val96->read($input);
              $this->secondaryIndexes[$key95] = $val96;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::MAP) {
            $this->attributes = array();
            $_size97 = 0;
            $_ktype98 = 0;
            $_vtype99 = 0;
            $xfer += $input->readMapBegin($_ktype98, $_vtype99, $_size97);
            for ($_i101 = 0; $_i101 < $_size97; ++$_i101)
            {
              $key102 = '';
              $val103 = 0;
              $xfer += $input->readString($key102);
              $xfer += $input->readI32($val103);
              $this->attributes[$key102] = $val103;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ttl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->preSplits);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::MAP) {
            $this->streams = array();
            $_size104 = 0;
            $_ktype105 = 0;
            $_vtype106 = 0;
            $xfer += $input->readMapBegin($_ktype105, $_vtype106, $_size104);
            for ($_i108 = 0; $_i108 < $_size104; ++$_i108)
            {
              $key109 = '';
              $val110 = new \SDS\Table\StreamSpec();
              $xfer += $input->readString($key109);
              $val110 = new \SDS\Table\StreamSpec();
              $xfer += $val110->read($input);
              $this->streams[$key109] = $val110;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TableSchema');
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::I32, 1);
      $xfer += $output->writeI32($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->entityGroup !== null) {
      if (!is_object($this->entityGroup)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('entityGroup', TType::STRUCT, 2);
      $xfer += $this->entityGroup->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->primaryIndex !== null) {
      if (!is_array($this->primaryIndex)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('primaryIndex', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->primaryIndex));
        {
          foreach ($this->primaryIndex as $iter111)
          {
            $xfer += $iter111->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->secondaryIndexes !== null) {
      if (!is_array($this->secondaryIndexes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('secondaryIndexes', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->secondaryIndexes));
        {
          foreach ($this->secondaryIndexes as $kiter112 => $viter113)
          {
            $xfer += $output->writeString($kiter112);
            $xfer += $viter113->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_array($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::MAP, 5);
      {
        $output->writeMapBegin(TType::STRING, TType::I32, count($this->attributes));
        {
          foreach ($this->attributes as $kiter114 => $viter115)
          {
            $xfer += $output->writeString($kiter114);
            $xfer += $output->writeI32($viter115);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ttl !== null) {
      $xfer += $output->writeFieldBegin('ttl', TType::I32, 6);
      $xfer += $output->writeI32($this->ttl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preSplits !== null) {
      $xfer += $output->writeFieldBegin('preSplits', TType::I32, 7);
      $xfer += $output->writeI32($this->preSplits);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->streams !== null) {
      if (!is_array($this->streams)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('streams', TType::MAP, 8);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->streams));
        {
          foreach ($this->streams as $kiter116 => $viter117)
          {
            $xfer += $output->writeString($kiter116);
            $xfer += $viter117->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 表元信息
 */
class TableMetadata {
  static $_TSPEC;

  /**
   * 表ID
   * 仅作为输出值，作为输入时无需指定
   * 
   * @var string
   */
  public $tableId = null;
  /**
   * 所有者的开发者ID，
   * 对于CreateTable/AlterTable，值不设置时，默认为当前登录用户。
   * 
   * @var string
   */
  public $developerId = null;
  /**
   * 权限控制设置
   * 
   * @var array
   */
  public $appAcl = null;
  /**
   * @Deprecated 空间配额
   * 
   * @var \SDS\Table\TableQuota
   */
  public $quota = null;
  /**
   * 吞吐量配额
   * 
   * @var \SDS\Table\ProvisionThroughput
   */
  public $throughput = null;
  /**
   * 表备注信息
   * 
   * @var string
   */
  public $description = null;
  /**
   * stream设置，deprecated
   * 
   * @var \SDS\Table\StreamSpec
   */
  public $stream = null;
  /**
   * 是否支持系统定期做snapshot， 默认为true
   * 
   * @var bool
   */
  public $enableSysSnapshot = null;
  /**
   * 主集群最大超发的读写配额，即系统空闲时可能达到的最大吞吐，设置比throughput大即允许超发
   * 
   * @var \SDS\Table\ProvisionThroughput
   */
  public $exceededThroughput = null;
  /**
   * 预设备集群读写配额
   * 
   * @var \SDS\Table\ProvisionThroughput
   */
  public $slaveThroughput = null;
  /**
   * 备集群最大超发的读写配额，即系统空闲时可能达到最大的吞吐，设置比slaveThroughput大即允许超发
   * 
   * @var \SDS\Table\ProvisionThroughput
   */
  public $exceededSlaveThroughput = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'developerId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'appAcl',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::LST,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::LST,
            'etype' => TType::I32,
            'elem' => array(
              'type' => TType::I32,
              ),
            ),
          ),
        4 => array(
          'var' => 'quota',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\TableQuota',
          ),
        5 => array(
          'var' => 'throughput',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\ProvisionThroughput',
          ),
        6 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'stream',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\StreamSpec',
          ),
        8 => array(
          'var' => 'enableSysSnapshot',
          'type' => TType::BOOL,
          ),
        9 => array(
          'var' => 'exceededThroughput',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\ProvisionThroughput',
          ),
        10 => array(
          'var' => 'slaveThroughput',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\ProvisionThroughput',
          ),
        11 => array(
          'var' => 'exceededSlaveThroughput',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\ProvisionThroughput',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableId'])) {
        $this->tableId = $vals['tableId'];
      }
      if (isset($vals['developerId'])) {
        $this->developerId = $vals['developerId'];
      }
      if (isset($vals['appAcl'])) {
        $this->appAcl = $vals['appAcl'];
      }
      if (isset($vals['quota'])) {
        $this->quota = $vals['quota'];
      }
      if (isset($vals['throughput'])) {
        $this->throughput = $vals['throughput'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['stream'])) {
        $this->stream = $vals['stream'];
      }
      if (isset($vals['enableSysSnapshot'])) {
        $this->enableSysSnapshot = $vals['enableSysSnapshot'];
      }
      if (isset($vals['exceededThroughput'])) {
        $this->exceededThroughput = $vals['exceededThroughput'];
      }
      if (isset($vals['slaveThroughput'])) {
        $this->slaveThroughput = $vals['slaveThroughput'];
      }
      if (isset($vals['exceededSlaveThroughput'])) {
        $this->exceededSlaveThroughput = $vals['exceededSlaveThroughput'];
      }
    }
  }

  public function getName() {
    return 'TableMetadata';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->developerId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->appAcl = array();
            $_size118 = 0;
            $_ktype119 = 0;
            $_vtype120 = 0;
            $xfer += $input->readMapBegin($_ktype119, $_vtype120, $_size118);
            for ($_i122 = 0; $_i122 < $_size118; ++$_i122)
            {
              $key123 = '';
              $val124 = array();
              $xfer += $input->readString($key123);
              $val124 = array();
              $_size125 = 0;
              $_etype128 = 0;
              $xfer += $input->readListBegin($_etype128, $_size125);
              for ($_i129 = 0; $_i129 < $_size125; ++$_i129)
              {
                $elem130 = null;
                $xfer += $input->readI32($elem130);
                $val124 []= $elem130;
              }
              $xfer += $input->readListEnd();
              $this->appAcl[$key123] = $val124;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->quota = new \SDS\Table\TableQuota();
            $xfer += $this->quota->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->throughput = new \SDS\Table\ProvisionThroughput();
            $xfer += $this->throughput->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->stream = new \SDS\Table\StreamSpec();
            $xfer += $this->stream->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->enableSysSnapshot);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRUCT) {
            $this->exceededThroughput = new \SDS\Table\ProvisionThroughput();
            $xfer += $this->exceededThroughput->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
            $this->slaveThroughput = new \SDS\Table\ProvisionThroughput();
            $xfer += $this->slaveThroughput->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRUCT) {
            $this->exceededSlaveThroughput = new \SDS\Table\ProvisionThroughput();
            $xfer += $this->exceededSlaveThroughput->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TableMetadata');
    if ($this->tableId !== null) {
      $xfer += $output->writeFieldBegin('tableId', TType::STRING, 1);
      $xfer += $output->writeString($this->tableId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->developerId !== null) {
      $xfer += $output->writeFieldBegin('developerId', TType::STRING, 2);
      $xfer += $output->writeString($this->developerId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appAcl !== null) {
      if (!is_array($this->appAcl)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('appAcl', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::LST, count($this->appAcl));
        {
          foreach ($this->appAcl as $kiter131 => $viter132)
          {
            $xfer += $output->writeString($kiter131);
            {
              $output->writeListBegin(TType::I32, count($viter132));
              {
                foreach ($viter132 as $iter133)
                {
                  $xfer += $output->writeI32($iter133);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->quota !== null) {
      if (!is_object($this->quota)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('quota', TType::STRUCT, 4);
      $xfer += $this->quota->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->throughput !== null) {
      if (!is_object($this->throughput)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('throughput', TType::STRUCT, 5);
      $xfer += $this->throughput->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 6);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stream !== null) {
      if (!is_object($this->stream)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('stream', TType::STRUCT, 7);
      $xfer += $this->stream->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enableSysSnapshot !== null) {
      $xfer += $output->writeFieldBegin('enableSysSnapshot', TType::BOOL, 8);
      $xfer += $output->writeBool($this->enableSysSnapshot);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exceededThroughput !== null) {
      if (!is_object($this->exceededThroughput)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('exceededThroughput', TType::STRUCT, 9);
      $xfer += $this->exceededThroughput->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->slaveThroughput !== null) {
      if (!is_object($this->slaveThroughput)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('slaveThroughput', TType::STRUCT, 10);
      $xfer += $this->slaveThroughput->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exceededSlaveThroughput !== null) {
      if (!is_object($this->exceededSlaveThroughput)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('exceededSlaveThroughput', TType::STRUCT, 11);
      $xfer += $this->exceededSlaveThroughput->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 表配置信息
 */
class TableSpec {
  static $_TSPEC;

  /**
   * @var \SDS\Table\TableSchema
   */
  public $schema = null;
  /**
   * @var \SDS\Table\TableMetadata
   */
  public $metadata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'schema',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\TableSchema',
          ),
        2 => array(
          'var' => 'metadata',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\TableMetadata',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['schema'])) {
        $this->schema = $vals['schema'];
      }
      if (isset($vals['metadata'])) {
        $this->metadata = $vals['metadata'];
      }
    }
  }

  public function getName() {
    return 'TableSpec';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->schema = new \SDS\Table\TableSchema();
            $xfer += $this->schema->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->metadata = new \SDS\Table\TableMetadata();
            $xfer += $this->metadata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TableSpec');
    if ($this->schema !== null) {
      if (!is_object($this->schema)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('schema', TType::STRUCT, 1);
      $xfer += $this->schema->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->metadata !== null) {
      if (!is_object($this->metadata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('metadata', TType::STRUCT, 2);
      $xfer += $this->metadata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 表状态信息
 */
class TableStatus {
  static $_TSPEC;

  /**
   * 表状态
   * 
   * @var int
   */
  public $state = null;
  /**
   * 创建时间
   * 
   * @var int
   */
  public $createTime = null;
  /**
   * 最近修改时间
   * 
   * @var int
   */
  public $alterTime = null;
  /**
   * 最近统计时间
   * 
   * @var int
   */
  public $statTime = null;
  /**
   * 占用空间统计，单位为字节
   * 
   * @var int
   */
  public $size = null;
  /**
   * 行数统计，非即时精确值
   * 
   * @var int
   */
  public $rowCount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'state',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'createTime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'alterTime',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'statTime',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'size',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'rowCount',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['alterTime'])) {
        $this->alterTime = $vals['alterTime'];
      }
      if (isset($vals['statTime'])) {
        $this->statTime = $vals['statTime'];
      }
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
      if (isset($vals['rowCount'])) {
        $this->rowCount = $vals['rowCount'];
      }
    }
  }

  public function getName() {
    return 'TableStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->alterTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->statTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->rowCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TableStatus');
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 1);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::I64, 2);
      $xfer += $output->writeI64($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alterTime !== null) {
      $xfer += $output->writeFieldBegin('alterTime', TType::I64, 3);
      $xfer += $output->writeI64($this->alterTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statTime !== null) {
      $xfer += $output->writeFieldBegin('statTime', TType::I64, 4);
      $xfer += $output->writeI64($this->statTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I64, 5);
      $xfer += $output->writeI64($this->size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rowCount !== null) {
      $xfer += $output->writeFieldBegin('rowCount', TType::I64, 6);
      $xfer += $output->writeI64($this->rowCount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 表信息
 */
class TableInfo {
  static $_TSPEC;

  /**
   * @var string
   */
  public $name = null;
  /**
   * @var \SDS\Table\TableSpec
   */
  public $spec = null;
  /**
   * @var \SDS\Table\TableStatus
   */
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'spec',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\TableSpec',
          ),
        3 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\TableStatus',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['spec'])) {
        $this->spec = $vals['spec'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'TableInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->spec = new \SDS\Table\TableSpec();
            $xfer += $this->spec->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->status = new \SDS\Table\TableStatus();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TableInfo');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spec !== null) {
      if (!is_object($this->spec)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('spec', TType::STRUCT, 2);
      $xfer += $this->spec->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 3);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 简单条件，用于checkAndPut/Delete操作，判定逻辑为: value operator field
 */
class SimpleCondition {
  static $_TSPEC;

  /**
   * @var int
   */
  public $operator = null;
  /**
   * @var string
   */
  public $field = null;
  /**
   * @var \SDS\Table\Datum
   */
  public $value = null;
  /**
   * @var bool
   */
  public $rowExist = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'operator',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'field',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\Datum',
          ),
        4 => array(
          'var' => 'rowExist',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['operator'])) {
        $this->operator = $vals['operator'];
      }
      if (isset($vals['field'])) {
        $this->field = $vals['field'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['rowExist'])) {
        $this->rowExist = $vals['rowExist'];
      }
    }
  }

  public function getName() {
    return 'SimpleCondition';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operator);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->field);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->value = new \SDS\Table\Datum();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->rowExist);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SimpleCondition');
    if ($this->operator !== null) {
      $xfer += $output->writeFieldBegin('operator', TType::I32, 1);
      $xfer += $output->writeI32($this->operator);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->field !== null) {
      $xfer += $output->writeFieldBegin('field', TType::STRING, 2);
      $xfer += $output->writeString($this->field);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 3);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rowExist !== null) {
      $xfer += $output->writeFieldBegin('rowExist', TType::BOOL, 4);
      $xfer += $output->writeBool($this->rowExist);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 表分片信息，包括起始和结束的row key
 */
class TableSplit {
  static $_TSPEC;

  /**
   * @var array
   */
  public $startKey = null;
  /**
   * @var array
   */
  public $stopKey = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'startKey',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        2 => array(
          'var' => 'stopKey',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['startKey'])) {
        $this->startKey = $vals['startKey'];
      }
      if (isset($vals['stopKey'])) {
        $this->stopKey = $vals['stopKey'];
      }
    }
  }

  public function getName() {
    return 'TableSplit';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->startKey = array();
            $_size134 = 0;
            $_ktype135 = 0;
            $_vtype136 = 0;
            $xfer += $input->readMapBegin($_ktype135, $_vtype136, $_size134);
            for ($_i138 = 0; $_i138 < $_size134; ++$_i138)
            {
              $key139 = '';
              $val140 = new \SDS\Table\Datum();
              $xfer += $input->readString($key139);
              $val140 = new \SDS\Table\Datum();
              $xfer += $val140->read($input);
              $this->startKey[$key139] = $val140;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->stopKey = array();
            $_size141 = 0;
            $_ktype142 = 0;
            $_vtype143 = 0;
            $xfer += $input->readMapBegin($_ktype142, $_vtype143, $_size141);
            for ($_i145 = 0; $_i145 < $_size141; ++$_i145)
            {
              $key146 = '';
              $val147 = new \SDS\Table\Datum();
              $xfer += $input->readString($key146);
              $val147 = new \SDS\Table\Datum();
              $xfer += $val147->read($input);
              $this->stopKey[$key146] = $val147;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TableSplit');
    if ($this->startKey !== null) {
      if (!is_array($this->startKey)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('startKey', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->startKey));
        {
          foreach ($this->startKey as $kiter148 => $viter149)
          {
            $xfer += $output->writeString($kiter148);
            $xfer += $viter149->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stopKey !== null) {
      if (!is_array($this->stopKey)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('stopKey', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->stopKey));
        {
          foreach ($this->stopKey as $kiter150 => $viter151)
          {
            $xfer += $output->writeString($kiter150);
            $xfer += $viter151->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetRequest {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tableName = null;
  /**
   * 记录主键，必须包含主键所有的属性
   * 
   * @var array
   */
  public $keys = null;
  /**
   * 需要返回的属性列表，不指定表示返回所有属性
   * 
   * @var string[]
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'keys',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        3 => array(
          'var' => 'attributes',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'GetRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->keys = array();
            $_size152 = 0;
            $_ktype153 = 0;
            $_vtype154 = 0;
            $xfer += $input->readMapBegin($_ktype153, $_vtype154, $_size152);
            for ($_i156 = 0; $_i156 < $_size152; ++$_i156)
            {
              $key157 = '';
              $val158 = new \SDS\Table\Datum();
              $xfer += $input->readString($key157);
              $val158 = new \SDS\Table\Datum();
              $xfer += $val158->read($input);
              $this->keys[$key157] = $val158;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->attributes = array();
            $_size159 = 0;
            $_etype162 = 0;
            $xfer += $input->readListBegin($_etype162, $_size159);
            for ($_i163 = 0; $_i163 < $_size159; ++$_i163)
            {
              $elem164 = null;
              $xfer += $input->readString($elem164);
              $this->attributes []= $elem164;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetRequest');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->keys));
        {
          foreach ($this->keys as $kiter165 => $viter166)
          {
            $xfer += $output->writeString($kiter165);
            $xfer += $viter166->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_array($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->attributes));
        {
          foreach ($this->attributes as $iter167)
          {
            $xfer += $output->writeString($iter167);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetResult {
  static $_TSPEC;

  /**
   * @var array
   */
  public $item = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'item',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['item'])) {
        $this->item = $vals['item'];
      }
    }
  }

  public function getName() {
    return 'GetResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->item = array();
            $_size168 = 0;
            $_ktype169 = 0;
            $_vtype170 = 0;
            $xfer += $input->readMapBegin($_ktype169, $_vtype170, $_size168);
            for ($_i172 = 0; $_i172 < $_size168; ++$_i172)
            {
              $key173 = '';
              $val174 = new \SDS\Table\Datum();
              $xfer += $input->readString($key173);
              $val174 = new \SDS\Table\Datum();
              $xfer += $val174->read($input);
              $this->item[$key173] = $val174;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetResult');
    if ($this->item !== null) {
      if (!is_array($this->item)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('item', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->item));
        {
          foreach ($this->item as $kiter175 => $viter176)
          {
            $xfer += $output->writeString($kiter175);
            $xfer += $viter176->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PutRequest {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tableName = null;
  /**
   * 待写入的记录
   * 
   * @var array
   */
  public $record = null;
  /**
   * 仅当满足指定条件时执行写入操作
   * 
   * @var \SDS\Table\SimpleCondition
   */
  public $condition = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        3 => array(
          'var' => 'condition',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\SimpleCondition',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['condition'])) {
        $this->condition = $vals['condition'];
      }
    }
  }

  public function getName() {
    return 'PutRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->record = array();
            $_size177 = 0;
            $_ktype178 = 0;
            $_vtype179 = 0;
            $xfer += $input->readMapBegin($_ktype178, $_vtype179, $_size177);
            for ($_i181 = 0; $_i181 < $_size177; ++$_i181)
            {
              $key182 = '';
              $val183 = new \SDS\Table\Datum();
              $xfer += $input->readString($key182);
              $val183 = new \SDS\Table\Datum();
              $xfer += $val183->read($input);
              $this->record[$key182] = $val183;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->condition = new \SDS\Table\SimpleCondition();
            $xfer += $this->condition->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PutRequest');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      if (!is_array($this->record)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('record', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->record));
        {
          foreach ($this->record as $kiter184 => $viter185)
          {
            $xfer += $output->writeString($kiter184);
            $xfer += $viter185->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->condition !== null) {
      if (!is_object($this->condition)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('condition', TType::STRUCT, 3);
      $xfer += $this->condition->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PutResult {
  static $_TSPEC;

  /**
   * 写入操作是否被执行(是否满足设置的条件)
   * 
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'PutResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PutResult');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 1);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IncrementRequest {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tableName = null;
  /**
   * 待自增的记录主键
   * 
   * @var array
   */
  public $keys = null;
  /**
   * 需要进行自增操作的属性，必须为整形，且不能为索引属性
   * 
   * @var array
   */
  public $amounts = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'keys',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        3 => array(
          'var' => 'amounts',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['amounts'])) {
        $this->amounts = $vals['amounts'];
      }
    }
  }

  public function getName() {
    return 'IncrementRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->keys = array();
            $_size186 = 0;
            $_ktype187 = 0;
            $_vtype188 = 0;
            $xfer += $input->readMapBegin($_ktype187, $_vtype188, $_size186);
            for ($_i190 = 0; $_i190 < $_size186; ++$_i190)
            {
              $key191 = '';
              $val192 = new \SDS\Table\Datum();
              $xfer += $input->readString($key191);
              $val192 = new \SDS\Table\Datum();
              $xfer += $val192->read($input);
              $this->keys[$key191] = $val192;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->amounts = array();
            $_size193 = 0;
            $_ktype194 = 0;
            $_vtype195 = 0;
            $xfer += $input->readMapBegin($_ktype194, $_vtype195, $_size193);
            for ($_i197 = 0; $_i197 < $_size193; ++$_i197)
            {
              $key198 = '';
              $val199 = new \SDS\Table\Datum();
              $xfer += $input->readString($key198);
              $val199 = new \SDS\Table\Datum();
              $xfer += $val199->read($input);
              $this->amounts[$key198] = $val199;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IncrementRequest');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->keys));
        {
          foreach ($this->keys as $kiter200 => $viter201)
          {
            $xfer += $output->writeString($kiter200);
            $xfer += $viter201->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amounts !== null) {
      if (!is_array($this->amounts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('amounts', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->amounts));
        {
          foreach ($this->amounts as $kiter202 => $viter203)
          {
            $xfer += $output->writeString($kiter202);
            $xfer += $viter203->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IncrementResult {
  static $_TSPEC;

  /**
   * @var array
   */
  public $amounts = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'amounts',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['amounts'])) {
        $this->amounts = $vals['amounts'];
      }
    }
  }

  public function getName() {
    return 'IncrementResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->amounts = array();
            $_size204 = 0;
            $_ktype205 = 0;
            $_vtype206 = 0;
            $xfer += $input->readMapBegin($_ktype205, $_vtype206, $_size204);
            for ($_i208 = 0; $_i208 < $_size204; ++$_i208)
            {
              $key209 = '';
              $val210 = new \SDS\Table\Datum();
              $xfer += $input->readString($key209);
              $val210 = new \SDS\Table\Datum();
              $xfer += $val210->read($input);
              $this->amounts[$key209] = $val210;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IncrementResult');
    if ($this->amounts !== null) {
      if (!is_array($this->amounts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('amounts', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->amounts));
        {
          foreach ($this->amounts as $kiter211 => $viter212)
          {
            $xfer += $output->writeString($kiter211);
            $xfer += $viter212->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RemoveRequest {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tableName = null;
  /**
   * 待删除的记录主键
   * 
   * @var array
   */
  public $keys = null;
  /**
   * 待删除的属性列表，不指定表示删除整条记录。
   * 当删除部分属性时，即使所有属性均已被删除，记录仍存在，删除整条记录需要显式删除
   * 
   * @var string[]
   */
  public $attributes = null;
  /**
   * 仅当满足指定条件时执行删除操作
   * 
   * @var \SDS\Table\SimpleCondition
   */
  public $condition = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'keys',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        3 => array(
          'var' => 'attributes',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'condition',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\SimpleCondition',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
      if (isset($vals['condition'])) {
        $this->condition = $vals['condition'];
      }
    }
  }

  public function getName() {
    return 'RemoveRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->keys = array();
            $_size213 = 0;
            $_ktype214 = 0;
            $_vtype215 = 0;
            $xfer += $input->readMapBegin($_ktype214, $_vtype215, $_size213);
            for ($_i217 = 0; $_i217 < $_size213; ++$_i217)
            {
              $key218 = '';
              $val219 = new \SDS\Table\Datum();
              $xfer += $input->readString($key218);
              $val219 = new \SDS\Table\Datum();
              $xfer += $val219->read($input);
              $this->keys[$key218] = $val219;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->attributes = array();
            $_size220 = 0;
            $_etype223 = 0;
            $xfer += $input->readListBegin($_etype223, $_size220);
            for ($_i224 = 0; $_i224 < $_size220; ++$_i224)
            {
              $elem225 = null;
              $xfer += $input->readString($elem225);
              $this->attributes []= $elem225;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->condition = new \SDS\Table\SimpleCondition();
            $xfer += $this->condition->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RemoveRequest');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->keys));
        {
          foreach ($this->keys as $kiter226 => $viter227)
          {
            $xfer += $output->writeString($kiter226);
            $xfer += $viter227->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_array($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->attributes));
        {
          foreach ($this->attributes as $iter228)
          {
            $xfer += $output->writeString($iter228);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->condition !== null) {
      if (!is_object($this->condition)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('condition', TType::STRUCT, 4);
      $xfer += $this->condition->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RemoveResult {
  static $_TSPEC;

  /**
   * 删除操作是否被执行（是否满足设置的条件）
   * 
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'RemoveResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RemoveResult');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 1);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Request {
  static $_TSPEC;

  /**
   * 随机读操作
   * 
   * @var \SDS\Table\GetRequest
   */
  public $getRequest = null;
  /**
   * 写入操作，不支持条件
   * 
   * @var \SDS\Table\PutRequest
   */
  public $putRequest = null;
  /**
   * 自增操作
   * 
   * @var \SDS\Table\IncrementRequest
   */
  public $incrementRequest = null;
  /**
   * 删除操作，不支持条件
   * 
   * @var \SDS\Table\RemoveRequest
   */
  public $removeRequest = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'getRequest',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\GetRequest',
          ),
        2 => array(
          'var' => 'putRequest',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\PutRequest',
          ),
        3 => array(
          'var' => 'incrementRequest',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\IncrementRequest',
          ),
        4 => array(
          'var' => 'removeRequest',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\RemoveRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['getRequest'])) {
        $this->getRequest = $vals['getRequest'];
      }
      if (isset($vals['putRequest'])) {
        $this->putRequest = $vals['putRequest'];
      }
      if (isset($vals['incrementRequest'])) {
        $this->incrementRequest = $vals['incrementRequest'];
      }
      if (isset($vals['removeRequest'])) {
        $this->removeRequest = $vals['removeRequest'];
      }
    }
  }

  public function getName() {
    return 'Request';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->getRequest = new \SDS\Table\GetRequest();
            $xfer += $this->getRequest->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->putRequest = new \SDS\Table\PutRequest();
            $xfer += $this->putRequest->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->incrementRequest = new \SDS\Table\IncrementRequest();
            $xfer += $this->incrementRequest->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->removeRequest = new \SDS\Table\RemoveRequest();
            $xfer += $this->removeRequest->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Request');
    if ($this->getRequest !== null) {
      if (!is_object($this->getRequest)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('getRequest', TType::STRUCT, 1);
      $xfer += $this->getRequest->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->putRequest !== null) {
      if (!is_object($this->putRequest)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('putRequest', TType::STRUCT, 2);
      $xfer += $this->putRequest->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->incrementRequest !== null) {
      if (!is_object($this->incrementRequest)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('incrementRequest', TType::STRUCT, 3);
      $xfer += $this->incrementRequest->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->removeRequest !== null) {
      if (!is_object($this->removeRequest)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('removeRequest', TType::STRUCT, 4);
      $xfer += $this->removeRequest->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ScanAction {
  static $_TSPEC;

  /**
   * scan时连带操作
   * 
   * @var int
   */
  public $action = null;
  /**
   * 实际操作，不需要指定key
   * 
   * @var \SDS\Table\Request
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'action',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\Request',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['action'])) {
        $this->action = $vals['action'];
      }
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'ScanAction';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->action);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->request = new \SDS\Table\Request();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ScanAction');
    if ($this->action !== null) {
      $xfer += $output->writeFieldBegin('action', TType::I32, 1);
      $xfer += $output->writeI32($this->action);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 2);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 范围查询，支持主键和二级索引查询，
 * 查询范围为闭开区间[startKey, endKey)，
 * 当指定索引时，查询范围的entity group必须唯一指定
 */
class ScanRequest {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tableName = null;
  /**
   * 不指定表示通过主键进行查询
   * 
   * @var string
   */
  public $indexName = null;
  /**
   * 查询范围开始，包含startKey，
   * 如果startKey不是完整键，而是部分key的前缀，则实际查询的startKey为{startKey, 最小可能的后缀}补全形式
   * 
   * @var array
   */
  public $startKey = null;
  /**
   * 查询范围结束，不包含stopKey，
   * 如果stopKey不是完整键，而是部分key的前缀，则实际查询的stopKey为{stopKey, 最大可能的后缀}补全形式
   * 
   * @var array
   */
  public $stopKey = null;
  /**
   * 需要返回的属性列表，不指定表示返回所有属性
   * 
   * @var string[]
   */
  public $attributes = null;
  /**
   * 类SQL WHERE语句的查询条件。
   * 注意：与SQL不同，此条件仅作为过滤条件，不影响具体查询计划(index, startKey, endKey)，
   * 进行范围查询时需要显示设置index和startKey以及endKey。每个扫描的记录均计入读配额，
   * 即使不满足查询条件。尽量避免使用条件过滤，尤其是当过滤掉的记录占一半以上时，强烈不建议使用。
   * 
   * @var string
   */
  public $condition = null;
  /**
   * 返回记录的最大数目，返回数目可能小于此值(如超出表的读配额时)
   * 
   * @var int
   */
  public $limit = 10;
  /**
   * 是否进行逆序扫描，进行逆序扫描时startKey应大于endKey，
   * 注意：逆序查询效率较低，谨慎使用，建议设置对应的Key为逆序存储
   * 
   * @var bool
   */
  public $reverse = false;
  /**
   * 是否全局有序扫描
   * 
   * @var bool
   */
  public $inGlobalOrder = true;
  /**
   * 是否将结果放入cache，对于类似MapReduce的大批量扫描的应用应该关闭此选项
   * 
   * @var bool
   */
  public $cacheResult = true;
  /**
   * 查找属性在seek之前进行顺序skip的次数。非必要情况，请不要设置
   * 
   * @var int
   */
  public $lookAheadStep = 0;
  /**
   * scan时的连带操作，包括COUNT，DELETE和UPDATE
   * 
   * @var \SDS\Table\ScanAction
   */
  public $action = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'indexName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'startKey',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        4 => array(
          'var' => 'stopKey',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        5 => array(
          'var' => 'attributes',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        6 => array(
          'var' => 'condition',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'reverse',
          'type' => TType::BOOL,
          ),
        9 => array(
          'var' => 'inGlobalOrder',
          'type' => TType::BOOL,
          ),
        10 => array(
          'var' => 'cacheResult',
          'type' => TType::BOOL,
          ),
        11 => array(
          'var' => 'lookAheadStep',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'action',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\ScanAction',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
      if (isset($vals['indexName'])) {
        $this->indexName = $vals['indexName'];
      }
      if (isset($vals['startKey'])) {
        $this->startKey = $vals['startKey'];
      }
      if (isset($vals['stopKey'])) {
        $this->stopKey = $vals['stopKey'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
      if (isset($vals['condition'])) {
        $this->condition = $vals['condition'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['reverse'])) {
        $this->reverse = $vals['reverse'];
      }
      if (isset($vals['inGlobalOrder'])) {
        $this->inGlobalOrder = $vals['inGlobalOrder'];
      }
      if (isset($vals['cacheResult'])) {
        $this->cacheResult = $vals['cacheResult'];
      }
      if (isset($vals['lookAheadStep'])) {
        $this->lookAheadStep = $vals['lookAheadStep'];
      }
      if (isset($vals['action'])) {
        $this->action = $vals['action'];
      }
    }
  }

  public function getName() {
    return 'ScanRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->indexName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->startKey = array();
            $_size229 = 0;
            $_ktype230 = 0;
            $_vtype231 = 0;
            $xfer += $input->readMapBegin($_ktype230, $_vtype231, $_size229);
            for ($_i233 = 0; $_i233 < $_size229; ++$_i233)
            {
              $key234 = '';
              $val235 = new \SDS\Table\Datum();
              $xfer += $input->readString($key234);
              $val235 = new \SDS\Table\Datum();
              $xfer += $val235->read($input);
              $this->startKey[$key234] = $val235;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->stopKey = array();
            $_size236 = 0;
            $_ktype237 = 0;
            $_vtype238 = 0;
            $xfer += $input->readMapBegin($_ktype237, $_vtype238, $_size236);
            for ($_i240 = 0; $_i240 < $_size236; ++$_i240)
            {
              $key241 = '';
              $val242 = new \SDS\Table\Datum();
              $xfer += $input->readString($key241);
              $val242 = new \SDS\Table\Datum();
              $xfer += $val242->read($input);
              $this->stopKey[$key241] = $val242;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->attributes = array();
            $_size243 = 0;
            $_etype246 = 0;
            $xfer += $input->readListBegin($_etype246, $_size243);
            for ($_i247 = 0; $_i247 < $_size243; ++$_i247)
            {
              $elem248 = null;
              $xfer += $input->readString($elem248);
              $this->attributes []= $elem248;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->condition);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->reverse);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->inGlobalOrder);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->cacheResult);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lookAheadStep);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRUCT) {
            $this->action = new \SDS\Table\ScanAction();
            $xfer += $this->action->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ScanRequest');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->indexName !== null) {
      $xfer += $output->writeFieldBegin('indexName', TType::STRING, 2);
      $xfer += $output->writeString($this->indexName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startKey !== null) {
      if (!is_array($this->startKey)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('startKey', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->startKey));
        {
          foreach ($this->startKey as $kiter249 => $viter250)
          {
            $xfer += $output->writeString($kiter249);
            $xfer += $viter250->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stopKey !== null) {
      if (!is_array($this->stopKey)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('stopKey', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->stopKey));
        {
          foreach ($this->stopKey as $kiter251 => $viter252)
          {
            $xfer += $output->writeString($kiter251);
            $xfer += $viter252->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_array($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRING, count($this->attributes));
        {
          foreach ($this->attributes as $iter253)
          {
            $xfer += $output->writeString($iter253);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->condition !== null) {
      $xfer += $output->writeFieldBegin('condition', TType::STRING, 6);
      $xfer += $output->writeString($this->condition);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 7);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reverse !== null) {
      $xfer += $output->writeFieldBegin('reverse', TType::BOOL, 8);
      $xfer += $output->writeBool($this->reverse);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inGlobalOrder !== null) {
      $xfer += $output->writeFieldBegin('inGlobalOrder', TType::BOOL, 9);
      $xfer += $output->writeBool($this->inGlobalOrder);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cacheResult !== null) {
      $xfer += $output->writeFieldBegin('cacheResult', TType::BOOL, 10);
      $xfer += $output->writeBool($this->cacheResult);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lookAheadStep !== null) {
      $xfer += $output->writeFieldBegin('lookAheadStep', TType::I32, 11);
      $xfer += $output->writeI32($this->lookAheadStep);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action !== null) {
      if (!is_object($this->action)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('action', TType::STRUCT, 12);
      $xfer += $this->action->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ScanResult {
  static $_TSPEC;

  /**
   * 下一个需要扫描的记录主键，NULL表示达到制定的结束位置
   * 
   * @var array
   */
  public $nextStartKey = null;
  /**
   * 扫描的记录
   * 
   * @var array[]
   */
  public $records = null;
  /**
   * 是否超过表的qps quota
   * 
   * @var bool
   */
  public $throttled = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'nextStartKey',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::MAP,
          'elem' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\SDS\Table\Datum',
              ),
            ),
          ),
        3 => array(
          'var' => 'throttled',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['nextStartKey'])) {
        $this->nextStartKey = $vals['nextStartKey'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['throttled'])) {
        $this->throttled = $vals['throttled'];
      }
    }
  }

  public function getName() {
    return 'ScanResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->nextStartKey = array();
            $_size254 = 0;
            $_ktype255 = 0;
            $_vtype256 = 0;
            $xfer += $input->readMapBegin($_ktype255, $_vtype256, $_size254);
            for ($_i258 = 0; $_i258 < $_size254; ++$_i258)
            {
              $key259 = '';
              $val260 = new \SDS\Table\Datum();
              $xfer += $input->readString($key259);
              $val260 = new \SDS\Table\Datum();
              $xfer += $val260->read($input);
              $this->nextStartKey[$key259] = $val260;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size261 = 0;
            $_etype264 = 0;
            $xfer += $input->readListBegin($_etype264, $_size261);
            for ($_i265 = 0; $_i265 < $_size261; ++$_i265)
            {
              $elem266 = null;
              $elem266 = array();
              $_size267 = 0;
              $_ktype268 = 0;
              $_vtype269 = 0;
              $xfer += $input->readMapBegin($_ktype268, $_vtype269, $_size267);
              for ($_i271 = 0; $_i271 < $_size267; ++$_i271)
              {
                $key272 = '';
                $val273 = new \SDS\Table\Datum();
                $xfer += $input->readString($key272);
                $val273 = new \SDS\Table\Datum();
                $xfer += $val273->read($input);
                $elem266[$key272] = $val273;
              }
              $xfer += $input->readMapEnd();
              $this->records []= $elem266;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->throttled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ScanResult');
    if ($this->nextStartKey !== null) {
      if (!is_array($this->nextStartKey)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('nextStartKey', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->nextStartKey));
        {
          foreach ($this->nextStartKey as $kiter274 => $viter275)
          {
            $xfer += $output->writeString($kiter274);
            $xfer += $viter275->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::MAP, count($this->records));
        {
          foreach ($this->records as $iter276)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($iter276));
              {
                foreach ($iter276 as $kiter277 => $viter278)
                {
                  $xfer += $output->writeString($kiter277);
                  $xfer += $viter278->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->throttled !== null) {
      $xfer += $output->writeFieldBegin('throttled', TType::BOOL, 3);
      $xfer += $output->writeBool($this->throttled);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BatchRequestItem {
  static $_TSPEC;

  /**
   * @var int
   */
  public $action = null;
  /**
   * @var \SDS\Table\Request
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'action',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\Request',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['action'])) {
        $this->action = $vals['action'];
      }
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'BatchRequestItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->action);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->request = new \SDS\Table\Request();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BatchRequestItem');
    if ($this->action !== null) {
      $xfer += $output->writeFieldBegin('action', TType::I32, 1);
      $xfer += $output->writeI32($this->action);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 2);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Result {
  static $_TSPEC;

  /**
   * @var \SDS\Table\GetResult
   */
  public $getResult = null;
  /**
   * @var \SDS\Table\PutResult
   */
  public $putResult = null;
  /**
   * @var \SDS\Table\IncrementResult
   */
  public $incrementResult = null;
  /**
   * @var \SDS\Table\RemoveResult
   */
  public $removeResult = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'getResult',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\GetResult',
          ),
        2 => array(
          'var' => 'putResult',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\PutResult',
          ),
        3 => array(
          'var' => 'incrementResult',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\IncrementResult',
          ),
        4 => array(
          'var' => 'removeResult',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\RemoveResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['getResult'])) {
        $this->getResult = $vals['getResult'];
      }
      if (isset($vals['putResult'])) {
        $this->putResult = $vals['putResult'];
      }
      if (isset($vals['incrementResult'])) {
        $this->incrementResult = $vals['incrementResult'];
      }
      if (isset($vals['removeResult'])) {
        $this->removeResult = $vals['removeResult'];
      }
    }
  }

  public function getName() {
    return 'Result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->getResult = new \SDS\Table\GetResult();
            $xfer += $this->getResult->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->putResult = new \SDS\Table\PutResult();
            $xfer += $this->putResult->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->incrementResult = new \SDS\Table\IncrementResult();
            $xfer += $this->incrementResult->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->removeResult = new \SDS\Table\RemoveResult();
            $xfer += $this->removeResult->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Result');
    if ($this->getResult !== null) {
      if (!is_object($this->getResult)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('getResult', TType::STRUCT, 1);
      $xfer += $this->getResult->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->putResult !== null) {
      if (!is_object($this->putResult)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('putResult', TType::STRUCT, 2);
      $xfer += $this->putResult->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->incrementResult !== null) {
      if (!is_object($this->incrementResult)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('incrementResult', TType::STRUCT, 3);
      $xfer += $this->incrementResult->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->removeResult !== null) {
      if (!is_object($this->removeResult)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('removeResult', TType::STRUCT, 4);
      $xfer += $this->removeResult->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BatchResultItem {
  static $_TSPEC;

  /**
   * 操作类型
   * 
   * @var int
   */
  public $action = null;
  /**
   * 是否成功执行，即无异常
   * 
   * @var bool
   */
  public $success = null;
  /**
   * 操作结果，操作成功时被设置
   * 
   * @var \SDS\Table\Result
   */
  public $result = null;
  /**
   * 操作时发生的异常，操作失败时被设置
   * 
   * @var \SDS\Errors\ServiceException
   */
  public $serviceException = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'action',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'result',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\Result',
          ),
        4 => array(
          'var' => 'serviceException',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['action'])) {
        $this->action = $vals['action'];
      }
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['serviceException'])) {
        $this->serviceException = $vals['serviceException'];
      }
    }
  }

  public function getName() {
    return 'BatchResultItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->action);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->result = new \SDS\Table\Result();
            $xfer += $this->result->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->serviceException = new \SDS\Errors\ServiceException();
            $xfer += $this->serviceException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BatchResultItem');
    if ($this->action !== null) {
      $xfer += $output->writeFieldBegin('action', TType::I32, 1);
      $xfer += $output->writeI32($this->action);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 2);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->result !== null) {
      if (!is_object($this->result)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('result', TType::STRUCT, 3);
      $xfer += $this->result->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serviceException !== null) {
      $xfer += $output->writeFieldBegin('serviceException', TType::STRUCT, 4);
      $xfer += $this->serviceException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BatchRequest {
  static $_TSPEC;

  /**
   * @var \SDS\Table\BatchRequestItem[]
   */
  public $items = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'items',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\BatchRequestItem',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['items'])) {
        $this->items = $vals['items'];
      }
    }
  }

  public function getName() {
    return 'BatchRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->items = array();
            $_size279 = 0;
            $_etype282 = 0;
            $xfer += $input->readListBegin($_etype282, $_size279);
            for ($_i283 = 0; $_i283 < $_size279; ++$_i283)
            {
              $elem284 = null;
              $elem284 = new \SDS\Table\BatchRequestItem();
              $xfer += $elem284->read($input);
              $this->items []= $elem284;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BatchRequest');
    if ($this->items !== null) {
      if (!is_array($this->items)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('items', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->items));
        {
          foreach ($this->items as $iter285)
          {
            $xfer += $iter285->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BatchResult {
  static $_TSPEC;

  /**
   * @var \SDS\Table\BatchResultItem[]
   */
  public $items = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'items',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\BatchResultItem',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['items'])) {
        $this->items = $vals['items'];
      }
    }
  }

  public function getName() {
    return 'BatchResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->items = array();
            $_size286 = 0;
            $_etype289 = 0;
            $xfer += $input->readListBegin($_etype289, $_size286);
            for ($_i290 = 0; $_i290 < $_size286; ++$_i290)
            {
              $elem291 = null;
              $elem291 = new \SDS\Table\BatchResultItem();
              $xfer += $elem291->read($input);
              $this->items []= $elem291;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BatchResult');
    if ($this->items !== null) {
      if (!is_array($this->items)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('items', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->items));
        {
          foreach ($this->items as $iter292)
          {
            $xfer += $iter292->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * internal mutation log entry
 * 
 */
class InternalMutationLogEntry {
  static $_TSPEC;

  /**
   * row key and items
   * 
   * @var array
   */
  public $record = null;
  /**
   * mutation type
   * 
   * @var int
   */
  public $type = null;
  /**
   * is row deleted or not
   * 
   * @var bool
   */
  public $rowDeleted = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'rowDeleted',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['rowDeleted'])) {
        $this->rowDeleted = $vals['rowDeleted'];
      }
    }
  }

  public function getName() {
    return 'InternalMutationLogEntry';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->record = array();
            $_size293 = 0;
            $_ktype294 = 0;
            $_vtype295 = 0;
            $xfer += $input->readMapBegin($_ktype294, $_vtype295, $_size293);
            for ($_i297 = 0; $_i297 < $_size293; ++$_i297)
            {
              $key298 = '';
              $val299 = '';
              $xfer += $input->readString($key298);
              $xfer += $input->readString($val299);
              $this->record[$key298] = $val299;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->rowDeleted);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InternalMutationLogEntry');
    if ($this->record !== null) {
      if (!is_array($this->record)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('record', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->record));
        {
          foreach ($this->record as $kiter300 => $viter301)
          {
            $xfer += $output->writeString($kiter300);
            $xfer += $output->writeString($viter301);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 2);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rowDeleted !== null) {
      $xfer += $output->writeFieldBegin('rowDeleted', TType::BOOL, 3);
      $xfer += $output->writeBool($this->rowDeleted);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * mutation log entry
 * 
 */
class MutationLogEntry {
  static $_TSPEC;

  /**
   * row key and items
   * 
   * @var array
   */
  public $record = null;
  /**
   * mutation type
   * 
   * @var int
   */
  public $type = null;
  /**
   * is row deleted or not
   * 
   * @var bool
   */
  public $rowDeleted = null;
  /**
   * mutation timestamp
   * 
   * @var int
   */
  public $timestamp = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        2 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'rowDeleted',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['rowDeleted'])) {
        $this->rowDeleted = $vals['rowDeleted'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
    }
  }

  public function getName() {
    return 'MutationLogEntry';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->record = array();
            $_size302 = 0;
            $_ktype303 = 0;
            $_vtype304 = 0;
            $xfer += $input->readMapBegin($_ktype303, $_vtype304, $_size302);
            for ($_i306 = 0; $_i306 < $_size302; ++$_i306)
            {
              $key307 = '';
              $val308 = new \SDS\Table\Datum();
              $xfer += $input->readString($key307);
              $val308 = new \SDS\Table\Datum();
              $xfer += $val308->read($input);
              $this->record[$key307] = $val308;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->rowDeleted);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MutationLogEntry');
    if ($this->record !== null) {
      if (!is_array($this->record)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('record', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->record));
        {
          foreach ($this->record as $kiter309 => $viter310)
          {
            $xfer += $output->writeString($kiter309);
            $xfer += $viter310->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 2);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rowDeleted !== null) {
      $xfer += $output->writeFieldBegin('rowDeleted', TType::BOOL, 3);
      $xfer += $output->writeBool($this->rowDeleted);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 4);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * record image
 * 
 */
class RecordImage {
  static $_TSPEC;

  /**
   * row key and attributes
   * 
   * @var array
   */
  public $record = null;
  /**
   * is row deleted or not
   * 
   * @var bool
   */
  public $rowDeleted = null;
  /**
   * record mutated timestamp
   * 
   * @var int
   */
  public $timestamp = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        2 => array(
          'var' => 'rowDeleted',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['rowDeleted'])) {
        $this->rowDeleted = $vals['rowDeleted'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
    }
  }

  public function getName() {
    return 'RecordImage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->record = array();
            $_size311 = 0;
            $_ktype312 = 0;
            $_vtype313 = 0;
            $xfer += $input->readMapBegin($_ktype312, $_vtype313, $_size311);
            for ($_i315 = 0; $_i315 < $_size311; ++$_i315)
            {
              $key316 = '';
              $val317 = new \SDS\Table\Datum();
              $xfer += $input->readString($key316);
              $val317 = new \SDS\Table\Datum();
              $xfer += $val317->read($input);
              $this->record[$key316] = $val317;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->rowDeleted);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RecordImage');
    if ($this->record !== null) {
      if (!is_array($this->record)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('record', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->record));
        {
          foreach ($this->record as $kiter318 => $viter319)
          {
            $xfer += $output->writeString($kiter318);
            $xfer += $viter319->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rowDeleted !== null) {
      $xfer += $output->writeFieldBegin('rowDeleted', TType::BOOL, 2);
      $xfer += $output->writeBool($this->rowDeleted);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


