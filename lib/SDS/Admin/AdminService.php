<?php
namespace SDS\Admin;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * 结构化存储管理接口
 */
interface AdminServiceIf extends \SDS\Common\BaseServiceIf {
  /**
   * 保存应用信息，用于注册第三方应用OAuth信息
   * 
   * @param \SDS\Admin\AppInfo $appInfo
   * @throws \SDS\Errors\ServiceException
   */
  public function saveAppInfo(\SDS\Admin\AppInfo $appInfo);
  /**
   * 查询应用信息
   * 
   * @param string $appId
   * @return \SDS\Admin\AppInfo 应用信息
   * 
   * @throws \SDS\Errors\ServiceException
   */
  public function getAppInfo($appId);
  /**
   * 查询指定用户所有应用信息
   * 
   * @return \SDS\Admin\AppInfo[]
   * @throws \SDS\Errors\ServiceException
   */
  public function findAllApps();
  /**
   * 获取指定用户所有表信息
   * 
   * @return \SDS\Table\TableInfo[]
   * @throws \SDS\Errors\ServiceException
   */
  public function findAllTables();
  /**
   * 创建表
   * 
   * @param string $tableName
   * @param \SDS\Table\TableSpec $tableSpec
   * @return \SDS\Table\TableInfo 表信息
   * 
   * @throws \SDS\Errors\ServiceException
   */
  public function createTable($tableName, \SDS\Table\TableSpec $tableSpec);
  /**
   * 删除表
   * 
   * @param string $tableName
   * @throws \SDS\Errors\ServiceException
   */
  public function dropTable($tableName);
  /**
   * 修改表
   * 
   * @param string $tableName
   * @param \SDS\Table\TableSpec $tableSpec
   * @throws \SDS\Errors\ServiceException
   */
  public function alterTable($tableName, \SDS\Table\TableSpec $tableSpec);
  /**
   * 克隆表
   * 
   * @param string $srcName
   * @param string $destTable
   * @param bool $flushTable
   * @throws \SDS\Errors\ServiceException
   */
  public function cloneTable($srcName, $destTable, $flushTable);
  /**
   * 关闭表读写操作
   * 
   * @param string $tableName
   * @throws \SDS\Errors\ServiceException
   */
  public function disableTable($tableName);
  /**
   * 打开表读写操作
   * 
   * @param string $tableName
   * @throws \SDS\Errors\ServiceException
   */
  public function enableTable($tableName);
  /**
   * 获取表定义
   * 
   * @param string $tableName
   * @return \SDS\Table\TableSpec 表配置信息
   * 
   * @throws \SDS\Errors\ServiceException
   */
  public function describeTable($tableName);
  /**
   * 获取表状态等元信息
   * 
   * @param string $tableName
   * @return \SDS\Table\TableStatus 表状态信息
   * 
   * @throws \SDS\Errors\ServiceException
   */
  public function getTableStatus($tableName);
  /**
   * 获取表状态
   * 
   * @param string $tableName
   * @return int 表状态
   * 
   * @throws \SDS\Errors\ServiceException
   */
  public function getTableState($tableName);
  /**
   * 获取表分布信息，如用于MapReduce应用
   * 
   * @param string $tableName
   * @param array $startKey
   * @param array $stopKey
   * @return \SDS\Table\TableSplit[]
   * @throws \SDS\Errors\ServiceException
   */
  public function getTableSplits($tableName, $startKey, $stopKey);
  /**
   * 查询表统计指标
   * 
   * @param \SDS\Admin\MetricQueryRequest $query
   * @return \SDS\Admin\TimeSeriesData 统计指标时间序列
   * 
   * @throws \SDS\Errors\ServiceException
   */
  public function queryMetric(\SDS\Admin\MetricQueryRequest $query);
  /**
   * 批量查询表统计指标
   * 
   * @param \SDS\Admin\MetricQueryRequest[] $queries
   * @return \SDS\Admin\TimeSeriesData[]
   * @throws \SDS\Errors\ServiceException
   */
  public function queryMetrics(array $queries);
  /**
   * 获取AppInfo列表,只包括appId和appName
   * 
   * @return \SDS\Admin\AppInfo[]
   * @throws \SDS\Errors\ServiceException
   */
  public function findAllAppInfo();
  /**
   * 获取表空间大小
   * 
   * @param string $tableName
   * @return int
   * @throws \SDS\Errors\ServiceException
   */
  public function getTableSize($tableName);
  /**
   * 上传客户端metrics
   * 
   * @param \SDS\Admin\ClientMetrics $clientMetrics
   * @throws \SDS\Errors\ServiceException
   */
  public function putClientMetrics(\SDS\Admin\ClientMetrics $clientMetrics);
  /**
   * 添加关注电话
   * 
   * @param string $phoneNumber
   * @param string $spaceId
   * @throws \SDS\Errors\ServiceException
   */
  public function subscribePhoneAlert($phoneNumber, $spaceId);
  /**
   * 取消关注电话
   * 
   * @param string $phoneNumber
   * @param string $spaceId
   * @throws \SDS\Errors\ServiceException
   */
  public function unsubscribePhoneAlert($phoneNumber, $spaceId);
  /**
   * 添加关注邮箱
   * 
   * @param string $email
   * @param string $spaceId
   * @throws \SDS\Errors\ServiceException
   */
  public function subscribeEmailAlert($email, $spaceId);
  /**
   * 取消关注邮箱
   * 
   * @param string $email
   * @param string $spaceId
   * @throws \SDS\Errors\ServiceException
   */
  public function unsubscribeEmailAlert($email, $spaceId);
  /**
   * 查看所有关注电话
   * 
   * @param string $spaceId
   * @return string[]
   * @throws \SDS\Errors\ServiceException
   */
  public function listSubscribedPhone($spaceId);
  /**
   * 查看所有关注邮箱地址
   * 
   * @param string $spaceId
   * @return string[]
   * @throws \SDS\Errors\ServiceException
   */
  public function listSubscribedEmail($spaceId);
  /**
   * 获取表空间历史大小
   * 
   * @param string $tableName
   * @param int $startDate
   * @param int $stopDate
   * @return array
   * @throws \SDS\Errors\ServiceException
   */
  public function getTableHistorySize($tableName, $startDate, $stopDate);
  /**
   * 表重命名
   * 
   * @param string $srcName
   * @param string $destName
   * @throws \SDS\Errors\ServiceException
   */
  public function renameTable($srcName, $destName);
  /**
   * 查询表的所有snapshot
   * 
   * @param string $tableName
   * @return \SDS\Admin\TableSnapshots 表的所有快照
   * 
   * @throws \SDS\Errors\ServiceException
   */
  public function listSnapshots($tableName);
  /**
   * 生成表快照
   * 
   * @param string $tableName
   * @param string $snapshotName
   * @throws \SDS\Errors\ServiceException
   */
  public function snapshotTable($tableName, $snapshotName);
  /**
   * 删除某个快照
   * 
   * @param string $tableName
   * @param string $snapshotName
   * @throws \SDS\Errors\ServiceException
   */
  public function deleteSnapshot($tableName, $snapshotName);
  /**
   * 从快照恢复表
   * 
   * @param string $tableName
   * @param string $snapshotName
   * @param string $destTableName
   * @param bool $isSystem
   * @throws \SDS\Errors\ServiceException
   */
  public function restoreSnapshot($tableName, $snapshotName, $destTableName, $isSystem);
  /**
   * 列出用户的所有表快照
   * 
   * @return \SDS\Admin\SnapshotTableView[]
   * @throws \SDS\Errors\ServiceException
   */
  public function listAllSnapshots();
  /**
   * 取消生成快照
   * 
   * @param string $tableName
   * @param string $snapshotName
   * @throws \SDS\Errors\ServiceException
   */
  public function cancelSnapshotTable($tableName, $snapshotName);
  /**
   * 查询快照状态
   * 
   * @param string $tableName
   * @param string $snapshotName
   * @return int 快照状态
   * 
   * @throws \SDS\Errors\ServiceException
   */
  public function getSnapshotState($tableName, $snapshotName);
  /**
   * 查询用户各种quota的使用情况
   * 
   * @param string $spaceId
   * @return \SDS\Admin\QuotaInfo
   * @throws \SDS\Errors\ServiceException
   */
  public function getQuotaInfo($spaceId);
}

class AdminServiceClient extends \SDS\Common\BaseServiceClient implements \SDS\Admin\AdminServiceIf {
  public function __construct($input, $output=null) {
    parent::__construct($input, $output);
  }

  public function saveAppInfo(\SDS\Admin\AppInfo $appInfo)
  {
    $this->send_saveAppInfo($appInfo);
    $this->recv_saveAppInfo();
  }

  public function send_saveAppInfo(\SDS\Admin\AppInfo $appInfo)
  {
    $args = new \SDS\Admin\AdminService_saveAppInfo_args();
    $args->appInfo = $appInfo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'saveAppInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('saveAppInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_saveAppInfo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_saveAppInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_saveAppInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    return;
  }

  public function getAppInfo($appId)
  {
    $this->send_getAppInfo($appId);
    return $this->recv_getAppInfo();
  }

  public function send_getAppInfo($appId)
  {
    $args = new \SDS\Admin\AdminService_getAppInfo_args();
    $args->appId = $appId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAppInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAppInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAppInfo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_getAppInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_getAppInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new \Exception("getAppInfo failed: unknown result");
  }

  public function findAllApps()
  {
    $this->send_findAllApps();
    return $this->recv_findAllApps();
  }

  public function send_findAllApps()
  {
    $args = new \SDS\Admin\AdminService_findAllApps_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findAllApps', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findAllApps', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findAllApps()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_findAllApps_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_findAllApps_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new \Exception("findAllApps failed: unknown result");
  }

  public function findAllTables()
  {
    $this->send_findAllTables();
    return $this->recv_findAllTables();
  }

  public function send_findAllTables()
  {
    $args = new \SDS\Admin\AdminService_findAllTables_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findAllTables', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findAllTables', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findAllTables()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_findAllTables_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_findAllTables_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new \Exception("findAllTables failed: unknown result");
  }

  public function createTable($tableName, \SDS\Table\TableSpec $tableSpec)
  {
    $this->send_createTable($tableName, $tableSpec);
    return $this->recv_createTable();
  }

  public function send_createTable($tableName, \SDS\Table\TableSpec $tableSpec)
  {
    $args = new \SDS\Admin\AdminService_createTable_args();
    $args->tableName = $tableName;
    $args->tableSpec = $tableSpec;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'createTable', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('createTable', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_createTable()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_createTable_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_createTable_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new \Exception("createTable failed: unknown result");
  }

  public function dropTable($tableName)
  {
    $this->send_dropTable($tableName);
    $this->recv_dropTable();
  }

  public function send_dropTable($tableName)
  {
    $args = new \SDS\Admin\AdminService_dropTable_args();
    $args->tableName = $tableName;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'dropTable', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('dropTable', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_dropTable()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_dropTable_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_dropTable_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    return;
  }

  public function alterTable($tableName, \SDS\Table\TableSpec $tableSpec)
  {
    $this->send_alterTable($tableName, $tableSpec);
    $this->recv_alterTable();
  }

  public function send_alterTable($tableName, \SDS\Table\TableSpec $tableSpec)
  {
    $args = new \SDS\Admin\AdminService_alterTable_args();
    $args->tableName = $tableName;
    $args->tableSpec = $tableSpec;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'alterTable', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('alterTable', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_alterTable()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_alterTable_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_alterTable_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    return;
  }

  public function cloneTable($srcName, $destTable, $flushTable)
  {
    $this->send_cloneTable($srcName, $destTable, $flushTable);
    $this->recv_cloneTable();
  }

  public function send_cloneTable($srcName, $destTable, $flushTable)
  {
    $args = new \SDS\Admin\AdminService_cloneTable_args();
    $args->srcName = $srcName;
    $args->destTable = $destTable;
    $args->flushTable = $flushTable;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cloneTable', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cloneTable', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cloneTable()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_cloneTable_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_cloneTable_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    return;
  }

  public function disableTable($tableName)
  {
    $this->send_disableTable($tableName);
    $this->recv_disableTable();
  }

  public function send_disableTable($tableName)
  {
    $args = new \SDS\Admin\AdminService_disableTable_args();
    $args->tableName = $tableName;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'disableTable', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('disableTable', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_disableTable()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_disableTable_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_disableTable_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    return;
  }

  public function enableTable($tableName)
  {
    $this->send_enableTable($tableName);
    $this->recv_enableTable();
  }

  public function send_enableTable($tableName)
  {
    $args = new \SDS\Admin\AdminService_enableTable_args();
    $args->tableName = $tableName;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'enableTable', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('enableTable', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_enableTable()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_enableTable_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_enableTable_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    return;
  }

  public function describeTable($tableName)
  {
    $this->send_describeTable($tableName);
    return $this->recv_describeTable();
  }

  public function send_describeTable($tableName)
  {
    $args = new \SDS\Admin\AdminService_describeTable_args();
    $args->tableName = $tableName;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'describeTable', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('describeTable', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_describeTable()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_describeTable_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_describeTable_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new \Exception("describeTable failed: unknown result");
  }

  public function getTableStatus($tableName)
  {
    $this->send_getTableStatus($tableName);
    return $this->recv_getTableStatus();
  }

  public function send_getTableStatus($tableName)
  {
    $args = new \SDS\Admin\AdminService_getTableStatus_args();
    $args->tableName = $tableName;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTableStatus', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTableStatus', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTableStatus()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_getTableStatus_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_getTableStatus_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new \Exception("getTableStatus failed: unknown result");
  }

  public function getTableState($tableName)
  {
    $this->send_getTableState($tableName);
    return $this->recv_getTableState();
  }

  public function send_getTableState($tableName)
  {
    $args = new \SDS\Admin\AdminService_getTableState_args();
    $args->tableName = $tableName;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTableState', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTableState', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTableState()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_getTableState_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_getTableState_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new \Exception("getTableState failed: unknown result");
  }

  public function getTableSplits($tableName, $startKey, $stopKey)
  {
    $this->send_getTableSplits($tableName, $startKey, $stopKey);
    return $this->recv_getTableSplits();
  }

  public function send_getTableSplits($tableName, $startKey, $stopKey)
  {
    $args = new \SDS\Admin\AdminService_getTableSplits_args();
    $args->tableName = $tableName;
    $args->startKey = $startKey;
    $args->stopKey = $stopKey;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTableSplits', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTableSplits', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTableSplits()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_getTableSplits_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_getTableSplits_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new \Exception("getTableSplits failed: unknown result");
  }

  public function queryMetric(\SDS\Admin\MetricQueryRequest $query)
  {
    $this->send_queryMetric($query);
    return $this->recv_queryMetric();
  }

  public function send_queryMetric(\SDS\Admin\MetricQueryRequest $query)
  {
    $args = new \SDS\Admin\AdminService_queryMetric_args();
    $args->query = $query;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'queryMetric', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('queryMetric', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_queryMetric()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_queryMetric_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_queryMetric_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new \Exception("queryMetric failed: unknown result");
  }

  public function queryMetrics(array $queries)
  {
    $this->send_queryMetrics($queries);
    return $this->recv_queryMetrics();
  }

  public function send_queryMetrics(array $queries)
  {
    $args = new \SDS\Admin\AdminService_queryMetrics_args();
    $args->queries = $queries;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'queryMetrics', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('queryMetrics', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_queryMetrics()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_queryMetrics_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_queryMetrics_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new \Exception("queryMetrics failed: unknown result");
  }

  public function findAllAppInfo()
  {
    $this->send_findAllAppInfo();
    return $this->recv_findAllAppInfo();
  }

  public function send_findAllAppInfo()
  {
    $args = new \SDS\Admin\AdminService_findAllAppInfo_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findAllAppInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findAllAppInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findAllAppInfo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_findAllAppInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_findAllAppInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new \Exception("findAllAppInfo failed: unknown result");
  }

  public function getTableSize($tableName)
  {
    $this->send_getTableSize($tableName);
    return $this->recv_getTableSize();
  }

  public function send_getTableSize($tableName)
  {
    $args = new \SDS\Admin\AdminService_getTableSize_args();
    $args->tableName = $tableName;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTableSize', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTableSize', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTableSize()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_getTableSize_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_getTableSize_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new \Exception("getTableSize failed: unknown result");
  }

  public function putClientMetrics(\SDS\Admin\ClientMetrics $clientMetrics)
  {
    $this->send_putClientMetrics($clientMetrics);
    $this->recv_putClientMetrics();
  }

  public function send_putClientMetrics(\SDS\Admin\ClientMetrics $clientMetrics)
  {
    $args = new \SDS\Admin\AdminService_putClientMetrics_args();
    $args->clientMetrics = $clientMetrics;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'putClientMetrics', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('putClientMetrics', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_putClientMetrics()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_putClientMetrics_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_putClientMetrics_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    return;
  }

  public function subscribePhoneAlert($phoneNumber, $spaceId)
  {
    $this->send_subscribePhoneAlert($phoneNumber, $spaceId);
    $this->recv_subscribePhoneAlert();
  }

  public function send_subscribePhoneAlert($phoneNumber, $spaceId)
  {
    $args = new \SDS\Admin\AdminService_subscribePhoneAlert_args();
    $args->phoneNumber = $phoneNumber;
    $args->spaceId = $spaceId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'subscribePhoneAlert', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('subscribePhoneAlert', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_subscribePhoneAlert()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_subscribePhoneAlert_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_subscribePhoneAlert_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    return;
  }

  public function unsubscribePhoneAlert($phoneNumber, $spaceId)
  {
    $this->send_unsubscribePhoneAlert($phoneNumber, $spaceId);
    $this->recv_unsubscribePhoneAlert();
  }

  public function send_unsubscribePhoneAlert($phoneNumber, $spaceId)
  {
    $args = new \SDS\Admin\AdminService_unsubscribePhoneAlert_args();
    $args->phoneNumber = $phoneNumber;
    $args->spaceId = $spaceId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'unsubscribePhoneAlert', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('unsubscribePhoneAlert', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_unsubscribePhoneAlert()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_unsubscribePhoneAlert_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_unsubscribePhoneAlert_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    return;
  }

  public function subscribeEmailAlert($email, $spaceId)
  {
    $this->send_subscribeEmailAlert($email, $spaceId);
    $this->recv_subscribeEmailAlert();
  }

  public function send_subscribeEmailAlert($email, $spaceId)
  {
    $args = new \SDS\Admin\AdminService_subscribeEmailAlert_args();
    $args->email = $email;
    $args->spaceId = $spaceId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'subscribeEmailAlert', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('subscribeEmailAlert', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_subscribeEmailAlert()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_subscribeEmailAlert_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_subscribeEmailAlert_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    return;
  }

  public function unsubscribeEmailAlert($email, $spaceId)
  {
    $this->send_unsubscribeEmailAlert($email, $spaceId);
    $this->recv_unsubscribeEmailAlert();
  }

  public function send_unsubscribeEmailAlert($email, $spaceId)
  {
    $args = new \SDS\Admin\AdminService_unsubscribeEmailAlert_args();
    $args->email = $email;
    $args->spaceId = $spaceId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'unsubscribeEmailAlert', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('unsubscribeEmailAlert', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_unsubscribeEmailAlert()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_unsubscribeEmailAlert_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_unsubscribeEmailAlert_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    return;
  }

  public function listSubscribedPhone($spaceId)
  {
    $this->send_listSubscribedPhone($spaceId);
    return $this->recv_listSubscribedPhone();
  }

  public function send_listSubscribedPhone($spaceId)
  {
    $args = new \SDS\Admin\AdminService_listSubscribedPhone_args();
    $args->spaceId = $spaceId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'listSubscribedPhone', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('listSubscribedPhone', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_listSubscribedPhone()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_listSubscribedPhone_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_listSubscribedPhone_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new \Exception("listSubscribedPhone failed: unknown result");
  }

  public function listSubscribedEmail($spaceId)
  {
    $this->send_listSubscribedEmail($spaceId);
    return $this->recv_listSubscribedEmail();
  }

  public function send_listSubscribedEmail($spaceId)
  {
    $args = new \SDS\Admin\AdminService_listSubscribedEmail_args();
    $args->spaceId = $spaceId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'listSubscribedEmail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('listSubscribedEmail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_listSubscribedEmail()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_listSubscribedEmail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_listSubscribedEmail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new \Exception("listSubscribedEmail failed: unknown result");
  }

  public function getTableHistorySize($tableName, $startDate, $stopDate)
  {
    $this->send_getTableHistorySize($tableName, $startDate, $stopDate);
    return $this->recv_getTableHistorySize();
  }

  public function send_getTableHistorySize($tableName, $startDate, $stopDate)
  {
    $args = new \SDS\Admin\AdminService_getTableHistorySize_args();
    $args->tableName = $tableName;
    $args->startDate = $startDate;
    $args->stopDate = $stopDate;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTableHistorySize', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTableHistorySize', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTableHistorySize()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_getTableHistorySize_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_getTableHistorySize_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new \Exception("getTableHistorySize failed: unknown result");
  }

  public function renameTable($srcName, $destName)
  {
    $this->send_renameTable($srcName, $destName);
    $this->recv_renameTable();
  }

  public function send_renameTable($srcName, $destName)
  {
    $args = new \SDS\Admin\AdminService_renameTable_args();
    $args->srcName = $srcName;
    $args->destName = $destName;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'renameTable', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('renameTable', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_renameTable()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_renameTable_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_renameTable_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    return;
  }

  public function listSnapshots($tableName)
  {
    $this->send_listSnapshots($tableName);
    return $this->recv_listSnapshots();
  }

  public function send_listSnapshots($tableName)
  {
    $args = new \SDS\Admin\AdminService_listSnapshots_args();
    $args->tableName = $tableName;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'listSnapshots', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('listSnapshots', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_listSnapshots()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_listSnapshots_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_listSnapshots_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new \Exception("listSnapshots failed: unknown result");
  }

  public function snapshotTable($tableName, $snapshotName)
  {
    $this->send_snapshotTable($tableName, $snapshotName);
    $this->recv_snapshotTable();
  }

  public function send_snapshotTable($tableName, $snapshotName)
  {
    $args = new \SDS\Admin\AdminService_snapshotTable_args();
    $args->tableName = $tableName;
    $args->snapshotName = $snapshotName;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'snapshotTable', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('snapshotTable', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_snapshotTable()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_snapshotTable_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_snapshotTable_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    return;
  }

  public function deleteSnapshot($tableName, $snapshotName)
  {
    $this->send_deleteSnapshot($tableName, $snapshotName);
    $this->recv_deleteSnapshot();
  }

  public function send_deleteSnapshot($tableName, $snapshotName)
  {
    $args = new \SDS\Admin\AdminService_deleteSnapshot_args();
    $args->tableName = $tableName;
    $args->snapshotName = $snapshotName;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteSnapshot', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteSnapshot', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteSnapshot()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_deleteSnapshot_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_deleteSnapshot_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    return;
  }

  public function restoreSnapshot($tableName, $snapshotName, $destTableName, $isSystem)
  {
    $this->send_restoreSnapshot($tableName, $snapshotName, $destTableName, $isSystem);
    $this->recv_restoreSnapshot();
  }

  public function send_restoreSnapshot($tableName, $snapshotName, $destTableName, $isSystem)
  {
    $args = new \SDS\Admin\AdminService_restoreSnapshot_args();
    $args->tableName = $tableName;
    $args->snapshotName = $snapshotName;
    $args->destTableName = $destTableName;
    $args->isSystem = $isSystem;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'restoreSnapshot', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('restoreSnapshot', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_restoreSnapshot()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_restoreSnapshot_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_restoreSnapshot_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    return;
  }

  public function listAllSnapshots()
  {
    $this->send_listAllSnapshots();
    return $this->recv_listAllSnapshots();
  }

  public function send_listAllSnapshots()
  {
    $args = new \SDS\Admin\AdminService_listAllSnapshots_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'listAllSnapshots', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('listAllSnapshots', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_listAllSnapshots()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_listAllSnapshots_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_listAllSnapshots_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new \Exception("listAllSnapshots failed: unknown result");
  }

  public function cancelSnapshotTable($tableName, $snapshotName)
  {
    $this->send_cancelSnapshotTable($tableName, $snapshotName);
    $this->recv_cancelSnapshotTable();
  }

  public function send_cancelSnapshotTable($tableName, $snapshotName)
  {
    $args = new \SDS\Admin\AdminService_cancelSnapshotTable_args();
    $args->tableName = $tableName;
    $args->snapshotName = $snapshotName;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cancelSnapshotTable', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cancelSnapshotTable', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cancelSnapshotTable()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_cancelSnapshotTable_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_cancelSnapshotTable_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    return;
  }

  public function getSnapshotState($tableName, $snapshotName)
  {
    $this->send_getSnapshotState($tableName, $snapshotName);
    return $this->recv_getSnapshotState();
  }

  public function send_getSnapshotState($tableName, $snapshotName)
  {
    $args = new \SDS\Admin\AdminService_getSnapshotState_args();
    $args->tableName = $tableName;
    $args->snapshotName = $snapshotName;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSnapshotState', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSnapshotState', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSnapshotState()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_getSnapshotState_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_getSnapshotState_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new \Exception("getSnapshotState failed: unknown result");
  }

  public function getQuotaInfo($spaceId)
  {
    $this->send_getQuotaInfo($spaceId);
    return $this->recv_getQuotaInfo();
  }

  public function send_getQuotaInfo($spaceId)
  {
    $args = new \SDS\Admin\AdminService_getQuotaInfo_args();
    $args->spaceId = $spaceId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getQuotaInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getQuotaInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getQuotaInfo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SDS\Admin\AdminService_getQuotaInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SDS\Admin\AdminService_getQuotaInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new \Exception("getQuotaInfo failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class AdminService_saveAppInfo_args {
  static $_TSPEC;

  /**
   * @var \SDS\Admin\AppInfo
   */
  public $appInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appInfo',
          'type' => TType::STRUCT,
          'class' => '\SDS\Admin\AppInfo',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appInfo'])) {
        $this->appInfo = $vals['appInfo'];
      }
    }
  }

  public function getName() {
    return 'AdminService_saveAppInfo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->appInfo = new \SDS\Admin\AppInfo();
            $xfer += $this->appInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_saveAppInfo_args');
    if ($this->appInfo !== null) {
      if (!is_object($this->appInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('appInfo', TType::STRUCT, 1);
      $xfer += $this->appInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_saveAppInfo_result {
  static $_TSPEC;

  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_saveAppInfo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_saveAppInfo_result');
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_getAppInfo_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $appId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appId'])) {
        $this->appId = $vals['appId'];
      }
    }
  }

  public function getName() {
    return 'AdminService_getAppInfo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_getAppInfo_args');
    if ($this->appId !== null) {
      $xfer += $output->writeFieldBegin('appId', TType::STRING, 1);
      $xfer += $output->writeString($this->appId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_getAppInfo_result {
  static $_TSPEC;

  /**
   * @var \SDS\Admin\AppInfo
   */
  public $success = null;
  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\SDS\Admin\AppInfo',
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_getAppInfo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \SDS\Admin\AppInfo();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_getAppInfo_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_findAllApps_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'AdminService_findAllApps_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_findAllApps_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_findAllApps_result {
  static $_TSPEC;

  /**
   * @var \SDS\Admin\AppInfo[]
   */
  public $success = null;
  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Admin\AppInfo',
            ),
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_findAllApps_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size48 = 0;
            $_etype51 = 0;
            $xfer += $input->readListBegin($_etype51, $_size48);
            for ($_i52 = 0; $_i52 < $_size48; ++$_i52)
            {
              $elem53 = null;
              $elem53 = new \SDS\Admin\AppInfo();
              $xfer += $elem53->read($input);
              $this->success []= $elem53;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_findAllApps_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter54)
          {
            $xfer += $iter54->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_findAllTables_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'AdminService_findAllTables_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_findAllTables_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_findAllTables_result {
  static $_TSPEC;

  /**
   * @var \SDS\Table\TableInfo[]
   */
  public $success = null;
  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\TableInfo',
            ),
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_findAllTables_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size55 = 0;
            $_etype58 = 0;
            $xfer += $input->readListBegin($_etype58, $_size55);
            for ($_i59 = 0; $_i59 < $_size55; ++$_i59)
            {
              $elem60 = null;
              $elem60 = new \SDS\Table\TableInfo();
              $xfer += $elem60->read($input);
              $this->success []= $elem60;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_findAllTables_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter61)
          {
            $xfer += $iter61->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_createTable_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tableName = null;
  /**
   * @var \SDS\Table\TableSpec
   */
  public $tableSpec = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'tableSpec',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\TableSpec',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
      if (isset($vals['tableSpec'])) {
        $this->tableSpec = $vals['tableSpec'];
      }
    }
  }

  public function getName() {
    return 'AdminService_createTable_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->tableSpec = new \SDS\Table\TableSpec();
            $xfer += $this->tableSpec->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_createTable_args');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tableSpec !== null) {
      if (!is_object($this->tableSpec)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tableSpec', TType::STRUCT, 2);
      $xfer += $this->tableSpec->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_createTable_result {
  static $_TSPEC;

  /**
   * @var \SDS\Table\TableInfo
   */
  public $success = null;
  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\TableInfo',
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_createTable_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \SDS\Table\TableInfo();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_createTable_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_dropTable_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tableName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
    }
  }

  public function getName() {
    return 'AdminService_dropTable_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_dropTable_args');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_dropTable_result {
  static $_TSPEC;

  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_dropTable_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_dropTable_result');
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_alterTable_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tableName = null;
  /**
   * @var \SDS\Table\TableSpec
   */
  public $tableSpec = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'tableSpec',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\TableSpec',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
      if (isset($vals['tableSpec'])) {
        $this->tableSpec = $vals['tableSpec'];
      }
    }
  }

  public function getName() {
    return 'AdminService_alterTable_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->tableSpec = new \SDS\Table\TableSpec();
            $xfer += $this->tableSpec->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_alterTable_args');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tableSpec !== null) {
      if (!is_object($this->tableSpec)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tableSpec', TType::STRUCT, 2);
      $xfer += $this->tableSpec->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_alterTable_result {
  static $_TSPEC;

  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_alterTable_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_alterTable_result');
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_cloneTable_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $srcName = null;
  /**
   * @var string
   */
  public $destTable = null;
  /**
   * @var bool
   */
  public $flushTable = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'srcName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'destTable',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'flushTable',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['srcName'])) {
        $this->srcName = $vals['srcName'];
      }
      if (isset($vals['destTable'])) {
        $this->destTable = $vals['destTable'];
      }
      if (isset($vals['flushTable'])) {
        $this->flushTable = $vals['flushTable'];
      }
    }
  }

  public function getName() {
    return 'AdminService_cloneTable_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->srcName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->destTable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->flushTable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_cloneTable_args');
    if ($this->srcName !== null) {
      $xfer += $output->writeFieldBegin('srcName', TType::STRING, 1);
      $xfer += $output->writeString($this->srcName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->destTable !== null) {
      $xfer += $output->writeFieldBegin('destTable', TType::STRING, 2);
      $xfer += $output->writeString($this->destTable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flushTable !== null) {
      $xfer += $output->writeFieldBegin('flushTable', TType::BOOL, 3);
      $xfer += $output->writeBool($this->flushTable);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_cloneTable_result {
  static $_TSPEC;

  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_cloneTable_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_cloneTable_result');
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_disableTable_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tableName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
    }
  }

  public function getName() {
    return 'AdminService_disableTable_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_disableTable_args');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_disableTable_result {
  static $_TSPEC;

  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_disableTable_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_disableTable_result');
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_enableTable_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tableName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
    }
  }

  public function getName() {
    return 'AdminService_enableTable_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_enableTable_args');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_enableTable_result {
  static $_TSPEC;

  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_enableTable_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_enableTable_result');
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_describeTable_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tableName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
    }
  }

  public function getName() {
    return 'AdminService_describeTable_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_describeTable_args');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_describeTable_result {
  static $_TSPEC;

  /**
   * @var \SDS\Table\TableSpec
   */
  public $success = null;
  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\TableSpec',
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_describeTable_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \SDS\Table\TableSpec();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_describeTable_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_getTableStatus_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tableName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
    }
  }

  public function getName() {
    return 'AdminService_getTableStatus_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_getTableStatus_args');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_getTableStatus_result {
  static $_TSPEC;

  /**
   * @var \SDS\Table\TableStatus
   */
  public $success = null;
  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\SDS\Table\TableStatus',
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_getTableStatus_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \SDS\Table\TableStatus();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_getTableStatus_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_getTableState_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tableName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
    }
  }

  public function getName() {
    return 'AdminService_getTableState_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_getTableState_args');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_getTableState_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_getTableState_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_getTableState_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_getTableSplits_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tableName = null;
  /**
   * @var array
   */
  public $startKey = null;
  /**
   * @var array
   */
  public $stopKey = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'startKey',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        3 => array(
          'var' => 'stopKey',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\Datum',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
      if (isset($vals['startKey'])) {
        $this->startKey = $vals['startKey'];
      }
      if (isset($vals['stopKey'])) {
        $this->stopKey = $vals['stopKey'];
      }
    }
  }

  public function getName() {
    return 'AdminService_getTableSplits_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->startKey = array();
            $_size62 = 0;
            $_ktype63 = 0;
            $_vtype64 = 0;
            $xfer += $input->readMapBegin($_ktype63, $_vtype64, $_size62);
            for ($_i66 = 0; $_i66 < $_size62; ++$_i66)
            {
              $key67 = '';
              $val68 = new \SDS\Table\Datum();
              $xfer += $input->readString($key67);
              $val68 = new \SDS\Table\Datum();
              $xfer += $val68->read($input);
              $this->startKey[$key67] = $val68;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->stopKey = array();
            $_size69 = 0;
            $_ktype70 = 0;
            $_vtype71 = 0;
            $xfer += $input->readMapBegin($_ktype70, $_vtype71, $_size69);
            for ($_i73 = 0; $_i73 < $_size69; ++$_i73)
            {
              $key74 = '';
              $val75 = new \SDS\Table\Datum();
              $xfer += $input->readString($key74);
              $val75 = new \SDS\Table\Datum();
              $xfer += $val75->read($input);
              $this->stopKey[$key74] = $val75;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_getTableSplits_args');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startKey !== null) {
      if (!is_array($this->startKey)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('startKey', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->startKey));
        {
          foreach ($this->startKey as $kiter76 => $viter77)
          {
            $xfer += $output->writeString($kiter76);
            $xfer += $viter77->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stopKey !== null) {
      if (!is_array($this->stopKey)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('stopKey', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->stopKey));
        {
          foreach ($this->stopKey as $kiter78 => $viter79)
          {
            $xfer += $output->writeString($kiter78);
            $xfer += $viter79->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_getTableSplits_result {
  static $_TSPEC;

  /**
   * @var \SDS\Table\TableSplit[]
   */
  public $success = null;
  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Table\TableSplit',
            ),
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_getTableSplits_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size80 = 0;
            $_etype83 = 0;
            $xfer += $input->readListBegin($_etype83, $_size80);
            for ($_i84 = 0; $_i84 < $_size80; ++$_i84)
            {
              $elem85 = null;
              $elem85 = new \SDS\Table\TableSplit();
              $xfer += $elem85->read($input);
              $this->success []= $elem85;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_getTableSplits_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter86)
          {
            $xfer += $iter86->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_queryMetric_args {
  static $_TSPEC;

  /**
   * @var \SDS\Admin\MetricQueryRequest
   */
  public $query = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query',
          'type' => TType::STRUCT,
          'class' => '\SDS\Admin\MetricQueryRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['query'])) {
        $this->query = $vals['query'];
      }
    }
  }

  public function getName() {
    return 'AdminService_queryMetric_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->query = new \SDS\Admin\MetricQueryRequest();
            $xfer += $this->query->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_queryMetric_args');
    if ($this->query !== null) {
      if (!is_object($this->query)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('query', TType::STRUCT, 1);
      $xfer += $this->query->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_queryMetric_result {
  static $_TSPEC;

  /**
   * @var \SDS\Admin\TimeSeriesData
   */
  public $success = null;
  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\SDS\Admin\TimeSeriesData',
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_queryMetric_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \SDS\Admin\TimeSeriesData();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_queryMetric_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_queryMetrics_args {
  static $_TSPEC;

  /**
   * @var \SDS\Admin\MetricQueryRequest[]
   */
  public $queries = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'queries',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Admin\MetricQueryRequest',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['queries'])) {
        $this->queries = $vals['queries'];
      }
    }
  }

  public function getName() {
    return 'AdminService_queryMetrics_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->queries = array();
            $_size87 = 0;
            $_etype90 = 0;
            $xfer += $input->readListBegin($_etype90, $_size87);
            for ($_i91 = 0; $_i91 < $_size87; ++$_i91)
            {
              $elem92 = null;
              $elem92 = new \SDS\Admin\MetricQueryRequest();
              $xfer += $elem92->read($input);
              $this->queries []= $elem92;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_queryMetrics_args');
    if ($this->queries !== null) {
      if (!is_array($this->queries)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('queries', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->queries));
        {
          foreach ($this->queries as $iter93)
          {
            $xfer += $iter93->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_queryMetrics_result {
  static $_TSPEC;

  /**
   * @var \SDS\Admin\TimeSeriesData[]
   */
  public $success = null;
  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Admin\TimeSeriesData',
            ),
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_queryMetrics_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size94 = 0;
            $_etype97 = 0;
            $xfer += $input->readListBegin($_etype97, $_size94);
            for ($_i98 = 0; $_i98 < $_size94; ++$_i98)
            {
              $elem99 = null;
              $elem99 = new \SDS\Admin\TimeSeriesData();
              $xfer += $elem99->read($input);
              $this->success []= $elem99;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_queryMetrics_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter100)
          {
            $xfer += $iter100->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_findAllAppInfo_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'AdminService_findAllAppInfo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_findAllAppInfo_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_findAllAppInfo_result {
  static $_TSPEC;

  /**
   * @var \SDS\Admin\AppInfo[]
   */
  public $success = null;
  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Admin\AppInfo',
            ),
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_findAllAppInfo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size101 = 0;
            $_etype104 = 0;
            $xfer += $input->readListBegin($_etype104, $_size101);
            for ($_i105 = 0; $_i105 < $_size101; ++$_i105)
            {
              $elem106 = null;
              $elem106 = new \SDS\Admin\AppInfo();
              $xfer += $elem106->read($input);
              $this->success []= $elem106;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_findAllAppInfo_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter107)
          {
            $xfer += $iter107->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_getTableSize_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tableName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
    }
  }

  public function getName() {
    return 'AdminService_getTableSize_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_getTableSize_args');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_getTableSize_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_getTableSize_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_getTableSize_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_putClientMetrics_args {
  static $_TSPEC;

  /**
   * @var \SDS\Admin\ClientMetrics
   */
  public $clientMetrics = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'clientMetrics',
          'type' => TType::STRUCT,
          'class' => '\SDS\Admin\ClientMetrics',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['clientMetrics'])) {
        $this->clientMetrics = $vals['clientMetrics'];
      }
    }
  }

  public function getName() {
    return 'AdminService_putClientMetrics_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->clientMetrics = new \SDS\Admin\ClientMetrics();
            $xfer += $this->clientMetrics->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_putClientMetrics_args');
    if ($this->clientMetrics !== null) {
      if (!is_object($this->clientMetrics)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('clientMetrics', TType::STRUCT, 1);
      $xfer += $this->clientMetrics->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_putClientMetrics_result {
  static $_TSPEC;

  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_putClientMetrics_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_putClientMetrics_result');
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_subscribePhoneAlert_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $phoneNumber = null;
  /**
   * @var string
   */
  public $spaceId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'phoneNumber',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'spaceId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['phoneNumber'])) {
        $this->phoneNumber = $vals['phoneNumber'];
      }
      if (isset($vals['spaceId'])) {
        $this->spaceId = $vals['spaceId'];
      }
    }
  }

  public function getName() {
    return 'AdminService_subscribePhoneAlert_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phoneNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->spaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_subscribePhoneAlert_args');
    if ($this->phoneNumber !== null) {
      $xfer += $output->writeFieldBegin('phoneNumber', TType::STRING, 1);
      $xfer += $output->writeString($this->phoneNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spaceId !== null) {
      $xfer += $output->writeFieldBegin('spaceId', TType::STRING, 2);
      $xfer += $output->writeString($this->spaceId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_subscribePhoneAlert_result {
  static $_TSPEC;

  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_subscribePhoneAlert_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_subscribePhoneAlert_result');
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_unsubscribePhoneAlert_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $phoneNumber = null;
  /**
   * @var string
   */
  public $spaceId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'phoneNumber',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'spaceId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['phoneNumber'])) {
        $this->phoneNumber = $vals['phoneNumber'];
      }
      if (isset($vals['spaceId'])) {
        $this->spaceId = $vals['spaceId'];
      }
    }
  }

  public function getName() {
    return 'AdminService_unsubscribePhoneAlert_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phoneNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->spaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_unsubscribePhoneAlert_args');
    if ($this->phoneNumber !== null) {
      $xfer += $output->writeFieldBegin('phoneNumber', TType::STRING, 1);
      $xfer += $output->writeString($this->phoneNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spaceId !== null) {
      $xfer += $output->writeFieldBegin('spaceId', TType::STRING, 2);
      $xfer += $output->writeString($this->spaceId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_unsubscribePhoneAlert_result {
  static $_TSPEC;

  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_unsubscribePhoneAlert_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_unsubscribePhoneAlert_result');
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_subscribeEmailAlert_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $email = null;
  /**
   * @var string
   */
  public $spaceId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'spaceId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['spaceId'])) {
        $this->spaceId = $vals['spaceId'];
      }
    }
  }

  public function getName() {
    return 'AdminService_subscribeEmailAlert_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->spaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_subscribeEmailAlert_args');
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 1);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spaceId !== null) {
      $xfer += $output->writeFieldBegin('spaceId', TType::STRING, 2);
      $xfer += $output->writeString($this->spaceId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_subscribeEmailAlert_result {
  static $_TSPEC;

  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_subscribeEmailAlert_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_subscribeEmailAlert_result');
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_unsubscribeEmailAlert_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $email = null;
  /**
   * @var string
   */
  public $spaceId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'spaceId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['spaceId'])) {
        $this->spaceId = $vals['spaceId'];
      }
    }
  }

  public function getName() {
    return 'AdminService_unsubscribeEmailAlert_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->spaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_unsubscribeEmailAlert_args');
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 1);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spaceId !== null) {
      $xfer += $output->writeFieldBegin('spaceId', TType::STRING, 2);
      $xfer += $output->writeString($this->spaceId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_unsubscribeEmailAlert_result {
  static $_TSPEC;

  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_unsubscribeEmailAlert_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_unsubscribeEmailAlert_result');
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_listSubscribedPhone_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $spaceId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'spaceId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['spaceId'])) {
        $this->spaceId = $vals['spaceId'];
      }
    }
  }

  public function getName() {
    return 'AdminService_listSubscribedPhone_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->spaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_listSubscribedPhone_args');
    if ($this->spaceId !== null) {
      $xfer += $output->writeFieldBegin('spaceId', TType::STRING, 1);
      $xfer += $output->writeString($this->spaceId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_listSubscribedPhone_result {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $success = null;
  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_listSubscribedPhone_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size108 = 0;
            $_etype111 = 0;
            $xfer += $input->readListBegin($_etype111, $_size108);
            for ($_i112 = 0; $_i112 < $_size108; ++$_i112)
            {
              $elem113 = null;
              $xfer += $input->readString($elem113);
              $this->success []= $elem113;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_listSubscribedPhone_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRING, count($this->success));
        {
          foreach ($this->success as $iter114)
          {
            $xfer += $output->writeString($iter114);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_listSubscribedEmail_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $spaceId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'spaceId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['spaceId'])) {
        $this->spaceId = $vals['spaceId'];
      }
    }
  }

  public function getName() {
    return 'AdminService_listSubscribedEmail_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->spaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_listSubscribedEmail_args');
    if ($this->spaceId !== null) {
      $xfer += $output->writeFieldBegin('spaceId', TType::STRING, 1);
      $xfer += $output->writeString($this->spaceId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_listSubscribedEmail_result {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $success = null;
  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_listSubscribedEmail_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size115 = 0;
            $_etype118 = 0;
            $xfer += $input->readListBegin($_etype118, $_size115);
            for ($_i119 = 0; $_i119 < $_size115; ++$_i119)
            {
              $elem120 = null;
              $xfer += $input->readString($elem120);
              $this->success []= $elem120;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_listSubscribedEmail_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRING, count($this->success));
        {
          foreach ($this->success as $iter121)
          {
            $xfer += $output->writeString($iter121);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_getTableHistorySize_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tableName = null;
  /**
   * @var int
   */
  public $startDate = null;
  /**
   * @var int
   */
  public $stopDate = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'startDate',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'stopDate',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
      if (isset($vals['startDate'])) {
        $this->startDate = $vals['startDate'];
      }
      if (isset($vals['stopDate'])) {
        $this->stopDate = $vals['stopDate'];
      }
    }
  }

  public function getName() {
    return 'AdminService_getTableHistorySize_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->startDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->stopDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_getTableHistorySize_args');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startDate !== null) {
      $xfer += $output->writeFieldBegin('startDate', TType::I64, 2);
      $xfer += $output->writeI64($this->startDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stopDate !== null) {
      $xfer += $output->writeFieldBegin('stopDate', TType::I64, 3);
      $xfer += $output->writeI64($this->stopDate);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_getTableHistorySize_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::I64,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_getTableHistorySize_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size122 = 0;
            $_ktype123 = 0;
            $_vtype124 = 0;
            $xfer += $input->readMapBegin($_ktype123, $_vtype124, $_size122);
            for ($_i126 = 0; $_i126 < $_size122; ++$_i126)
            {
              $key127 = 0;
              $val128 = 0;
              $xfer += $input->readI64($key127);
              $xfer += $input->readI64($val128);
              $this->success[$key127] = $val128;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_getTableHistorySize_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::I64, count($this->success));
        {
          foreach ($this->success as $kiter129 => $viter130)
          {
            $xfer += $output->writeI64($kiter129);
            $xfer += $output->writeI64($viter130);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_renameTable_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $srcName = null;
  /**
   * @var string
   */
  public $destName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'srcName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'destName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['srcName'])) {
        $this->srcName = $vals['srcName'];
      }
      if (isset($vals['destName'])) {
        $this->destName = $vals['destName'];
      }
    }
  }

  public function getName() {
    return 'AdminService_renameTable_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->srcName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->destName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_renameTable_args');
    if ($this->srcName !== null) {
      $xfer += $output->writeFieldBegin('srcName', TType::STRING, 1);
      $xfer += $output->writeString($this->srcName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->destName !== null) {
      $xfer += $output->writeFieldBegin('destName', TType::STRING, 2);
      $xfer += $output->writeString($this->destName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_renameTable_result {
  static $_TSPEC;

  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_renameTable_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_renameTable_result');
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_listSnapshots_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tableName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
    }
  }

  public function getName() {
    return 'AdminService_listSnapshots_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_listSnapshots_args');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_listSnapshots_result {
  static $_TSPEC;

  /**
   * @var \SDS\Admin\TableSnapshots
   */
  public $success = null;
  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\SDS\Admin\TableSnapshots',
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_listSnapshots_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \SDS\Admin\TableSnapshots();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_listSnapshots_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_snapshotTable_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tableName = null;
  /**
   * @var string
   */
  public $snapshotName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'snapshotName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
      if (isset($vals['snapshotName'])) {
        $this->snapshotName = $vals['snapshotName'];
      }
    }
  }

  public function getName() {
    return 'AdminService_snapshotTable_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snapshotName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_snapshotTable_args');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snapshotName !== null) {
      $xfer += $output->writeFieldBegin('snapshotName', TType::STRING, 2);
      $xfer += $output->writeString($this->snapshotName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_snapshotTable_result {
  static $_TSPEC;

  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_snapshotTable_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_snapshotTable_result');
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_deleteSnapshot_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tableName = null;
  /**
   * @var string
   */
  public $snapshotName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'snapshotName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
      if (isset($vals['snapshotName'])) {
        $this->snapshotName = $vals['snapshotName'];
      }
    }
  }

  public function getName() {
    return 'AdminService_deleteSnapshot_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snapshotName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_deleteSnapshot_args');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snapshotName !== null) {
      $xfer += $output->writeFieldBegin('snapshotName', TType::STRING, 2);
      $xfer += $output->writeString($this->snapshotName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_deleteSnapshot_result {
  static $_TSPEC;

  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_deleteSnapshot_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_deleteSnapshot_result');
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_restoreSnapshot_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tableName = null;
  /**
   * @var string
   */
  public $snapshotName = null;
  /**
   * @var string
   */
  public $destTableName = null;
  /**
   * @var bool
   */
  public $isSystem = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'snapshotName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'destTableName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'isSystem',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
      if (isset($vals['snapshotName'])) {
        $this->snapshotName = $vals['snapshotName'];
      }
      if (isset($vals['destTableName'])) {
        $this->destTableName = $vals['destTableName'];
      }
      if (isset($vals['isSystem'])) {
        $this->isSystem = $vals['isSystem'];
      }
    }
  }

  public function getName() {
    return 'AdminService_restoreSnapshot_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snapshotName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->destTableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isSystem);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_restoreSnapshot_args');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snapshotName !== null) {
      $xfer += $output->writeFieldBegin('snapshotName', TType::STRING, 2);
      $xfer += $output->writeString($this->snapshotName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->destTableName !== null) {
      $xfer += $output->writeFieldBegin('destTableName', TType::STRING, 3);
      $xfer += $output->writeString($this->destTableName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isSystem !== null) {
      $xfer += $output->writeFieldBegin('isSystem', TType::BOOL, 4);
      $xfer += $output->writeBool($this->isSystem);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_restoreSnapshot_result {
  static $_TSPEC;

  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_restoreSnapshot_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_restoreSnapshot_result');
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_listAllSnapshots_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'AdminService_listAllSnapshots_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_listAllSnapshots_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_listAllSnapshots_result {
  static $_TSPEC;

  /**
   * @var \SDS\Admin\SnapshotTableView[]
   */
  public $success = null;
  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SDS\Admin\SnapshotTableView',
            ),
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_listAllSnapshots_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size131 = 0;
            $_etype134 = 0;
            $xfer += $input->readListBegin($_etype134, $_size131);
            for ($_i135 = 0; $_i135 < $_size131; ++$_i135)
            {
              $elem136 = null;
              $elem136 = new \SDS\Admin\SnapshotTableView();
              $xfer += $elem136->read($input);
              $this->success []= $elem136;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_listAllSnapshots_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter137)
          {
            $xfer += $iter137->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_cancelSnapshotTable_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tableName = null;
  /**
   * @var string
   */
  public $snapshotName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'snapshotName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
      if (isset($vals['snapshotName'])) {
        $this->snapshotName = $vals['snapshotName'];
      }
    }
  }

  public function getName() {
    return 'AdminService_cancelSnapshotTable_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snapshotName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_cancelSnapshotTable_args');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snapshotName !== null) {
      $xfer += $output->writeFieldBegin('snapshotName', TType::STRING, 2);
      $xfer += $output->writeString($this->snapshotName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_cancelSnapshotTable_result {
  static $_TSPEC;

  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_cancelSnapshotTable_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_cancelSnapshotTable_result');
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_getSnapshotState_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tableName = null;
  /**
   * @var string
   */
  public $snapshotName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'snapshotName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
      if (isset($vals['snapshotName'])) {
        $this->snapshotName = $vals['snapshotName'];
      }
    }
  }

  public function getName() {
    return 'AdminService_getSnapshotState_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snapshotName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_getSnapshotState_args');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snapshotName !== null) {
      $xfer += $output->writeFieldBegin('snapshotName', TType::STRING, 2);
      $xfer += $output->writeString($this->snapshotName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_getSnapshotState_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_getSnapshotState_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_getSnapshotState_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_getQuotaInfo_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $spaceId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'spaceId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['spaceId'])) {
        $this->spaceId = $vals['spaceId'];
      }
    }
  }

  public function getName() {
    return 'AdminService_getQuotaInfo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->spaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_getQuotaInfo_args');
    if ($this->spaceId !== null) {
      $xfer += $output->writeFieldBegin('spaceId', TType::STRING, 1);
      $xfer += $output->writeString($this->spaceId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdminService_getQuotaInfo_result {
  static $_TSPEC;

  /**
   * @var \SDS\Admin\QuotaInfo
   */
  public $success = null;
  /**
   * @var \SDS\Errors\ServiceException
   */
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\SDS\Admin\QuotaInfo',
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\SDS\Errors\ServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'AdminService_getQuotaInfo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \SDS\Admin\QuotaInfo();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \SDS\Errors\ServiceException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminService_getQuotaInfo_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


